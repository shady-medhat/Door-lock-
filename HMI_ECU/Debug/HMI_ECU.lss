
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00004548  000045dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000f8  008000f8  00004674  2**0
                  ALLOC
  3 .stab         000039cc  00000000  00000000  00004674  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001387  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000093c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009507  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cf58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 10 	call	0x208e	; 0x208e <main>
      8a:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 22 	jmp	0x444c	; 0x444c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ee       	ldi	r26, 0xE2	; 226
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 22 	jmp	0x444c	; 0x444c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ee       	ldi	r24, 0xE2	; 226
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 22 	jmp	0x446c	; 0x446c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 22 	jmp	0x44a4	; 0x44a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Initializing_pass>:
/* Description:
 * take the password from the user
 * send it to CONTROL_ECU to check on it
 */
/*Function used to take 2 passwords from user and send to other ECU to initialize the password and save in EEPROM*/
void Initializing_pass(){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cb 54       	subi	r28, 0x4B	; 75
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_clearScreen();/* clear LCD */
     b60:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:"); /*display please enter pass*/
     b64:	20 e6       	ldi	r18, 0x60	; 96
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>

	for (uint8 i = 0; i < 5; i++){
     b72:	fe 01       	movw	r30, r28
     b74:	e6 5b       	subi	r30, 0xB6	; 182
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	10 82       	st	Z, r1
     b7a:	a4 c0       	rjmp	.+328    	; 0xcc4 <Initializing_pass+0x17e>
		pass[i] = KEYPAD_getPressedKey();
     b7c:	fe 01       	movw	r30, r28
     b7e:	e6 5b       	subi	r30, 0xB6	; 182
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	08 2f       	mov	r16, r24
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
     b8c:	f8 01       	movw	r30, r16
     b8e:	e5 50       	subi	r30, 0x05	; 5
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	80 83       	st	Z, r24
		LCD_moveCursor(1, i);
     b94:	fe 01       	movw	r30, r28
     b96:	e6 5b       	subi	r30, 0xB6	; 182
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	60 81       	ld	r22, Z
     b9e:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <LCD_moveCursor>
		LCD_displayCharacter('*');
     ba2:	8a e2       	ldi	r24, 0x2A	; 42
     ba4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_displayCharacter>
     ba8:	fe 01       	movw	r30, r28
     baa:	ed 5b       	subi	r30, 0xBD	; 189
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	a8 e4       	ldi	r26, 0x48	; 72
     bb4:	b3 e4       	ldi	r27, 0x43	; 67
     bb6:	80 83       	st	Z, r24
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	a2 83       	std	Z+2, r26	; 0x02
     bbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bbe:	8e 01       	movw	r16, r28
     bc0:	01 5c       	subi	r16, 0xC1	; 193
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	fe 01       	movw	r30, r28
     bc6:	ed 5b       	subi	r30, 0xBD	; 189
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	93 81       	ldd	r25, Z+3	; 0x03
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4a ef       	ldi	r20, 0xFA	; 250
     bd8:	54 e4       	ldi	r21, 0x44	; 68
     bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	f8 01       	movw	r30, r16
     be4:	80 83       	st	Z, r24
     be6:	91 83       	std	Z+1, r25	; 0x01
     be8:	a2 83       	std	Z+2, r26	; 0x02
     bea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bec:	fe 01       	movw	r30, r28
     bee:	ff 96       	adiw	r30, 0x3f	; 63
     bf0:	60 81       	ld	r22, Z
     bf2:	71 81       	ldd	r23, Z+1	; 0x01
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c04:	88 23       	and	r24, r24
     c06:	2c f4       	brge	.+10     	; 0xc12 <Initializing_pass+0xcc>
		__ticks = 1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9e af       	std	Y+62, r25	; 0x3e
     c0e:	8d af       	std	Y+61, r24	; 0x3d
     c10:	46 c0       	rjmp	.+140    	; 0xc9e <Initializing_pass+0x158>
	else if (__tmp > 65535)
     c12:	fe 01       	movw	r30, r28
     c14:	ff 96       	adiw	r30, 0x3f	; 63
     c16:	60 81       	ld	r22, Z
     c18:	71 81       	ldd	r23, Z+1	; 0x01
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	64 f5       	brge	.+88     	; 0xc86 <Initializing_pass+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	fe 01       	movw	r30, r28
     c30:	ed 5b       	subi	r30, 0xBD	; 189
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	60 81       	ld	r22, Z
     c36:	71 81       	ldd	r23, Z+1	; 0x01
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e2       	ldi	r20, 0x20	; 32
     c42:	51 e4       	ldi	r21, 0x41	; 65
     c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	bc 01       	movw	r22, r24
     c4e:	cd 01       	movw	r24, r26
     c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9e af       	std	Y+62, r25	; 0x3e
     c5a:	8d af       	std	Y+61, r24	; 0x3d
     c5c:	0f c0       	rjmp	.+30     	; 0xc7c <Initializing_pass+0x136>
     c5e:	88 ec       	ldi	r24, 0xC8	; 200
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9c af       	std	Y+60, r25	; 0x3c
     c64:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c66:	8b ad       	ldd	r24, Y+59	; 0x3b
     c68:	9c ad       	ldd	r25, Y+60	; 0x3c
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <Initializing_pass+0x124>
     c6e:	9c af       	std	Y+60, r25	; 0x3c
     c70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c72:	8d ad       	ldd	r24, Y+61	; 0x3d
     c74:	9e ad       	ldd	r25, Y+62	; 0x3e
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	9e af       	std	Y+62, r25	; 0x3e
     c7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     c7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	69 f7       	brne	.-38     	; 0xc5e <Initializing_pass+0x118>
     c84:	16 c0       	rjmp	.+44     	; 0xcb2 <Initializing_pass+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c86:	fe 01       	movw	r30, r28
     c88:	ff 96       	adiw	r30, 0x3f	; 63
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9e af       	std	Y+62, r25	; 0x3e
     c9c:	8d af       	std	Y+61, r24	; 0x3d
     c9e:	8d ad       	ldd	r24, Y+61	; 0x3d
     ca0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ca2:	9a af       	std	Y+58, r25	; 0x3a
     ca4:	89 af       	std	Y+57, r24	; 0x39
     ca6:	89 ad       	ldd	r24, Y+57	; 0x39
     ca8:	9a ad       	ldd	r25, Y+58	; 0x3a
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <Initializing_pass+0x164>
     cae:	9a af       	std	Y+58, r25	; 0x3a
     cb0:	89 af       	std	Y+57, r24	; 0x39
void Initializing_pass(){
	uint8 key;
	LCD_clearScreen();/* clear LCD */
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:"); /*display please enter pass*/

	for (uint8 i = 0; i < 5; i++){
     cb2:	de 01       	movw	r26, r28
     cb4:	a6 5b       	subi	r26, 0xB6	; 182
     cb6:	bf 4f       	sbci	r27, 0xFF	; 255
     cb8:	fe 01       	movw	r30, r28
     cba:	e6 5b       	subi	r30, 0xB6	; 182
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	8c 93       	st	X, r24
     cc4:	fe 01       	movw	r30, r28
     cc6:	e6 5b       	subi	r30, 0xB6	; 182
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	80 81       	ld	r24, Z
     ccc:	85 30       	cpi	r24, 0x05	; 5
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <Initializing_pass+0x18c>
     cd0:	55 cf       	rjmp	.-342    	; 0xb7c <Initializing_pass+0x36>
		pass[i] = KEYPAD_getPressedKey();
		LCD_moveCursor(1, i);
		LCD_displayCharacter('*');
		_delay_ms(200); /* Press time */
	} /*take password from user and put in array*/
	key = KEYPAD_getPressedKey();
     cd2:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
     cd6:	fe 01       	movw	r30, r28
     cd8:	e5 5b       	subi	r30, 0xB5	; 181
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 83       	st	Z, r24
	if(key == '='){; /* make '=' as an Enter button */
     cde:	fe 01       	movw	r30, r28
     ce0:	e5 5b       	subi	r30, 0xB5	; 181
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	80 81       	ld	r24, Z
     ce6:	8d 33       	cpi	r24, 0x3D	; 61
     ce8:	09 f0       	breq	.+2      	; 0xcec <Initializing_pass+0x1a6>
     cea:	97 c0       	rjmp	.+302    	; 0xe1a <Initializing_pass+0x2d4>
    for (uint8 i = 0; i < 5; i++){
     cec:	fe 01       	movw	r30, r28
     cee:	e7 5b       	subi	r30, 0xB7	; 183
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	10 82       	st	Z, r1
     cf4:	8b c0       	rjmp	.+278    	; 0xe0c <Initializing_pass+0x2c6>
			   while(UART_recieveByte()!= MC2_READY){}
     cf6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
     cfa:	80 31       	cpi	r24, 0x10	; 16
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <Initializing_pass+0x1b0>
			   UART_sendByte(pass[i]);
     cfe:	fe 01       	movw	r30, r28
     d00:	e7 5b       	subi	r30, 0xB7	; 183
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	fc 01       	movw	r30, r24
     d0c:	e5 50       	subi	r30, 0x05	; 5
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a8 e4       	ldi	r26, 0x48	; 72
     d1c:	b3 e4       	ldi	r27, 0x43	; 67
     d1e:	8d ab       	std	Y+53, r24	; 0x35
     d20:	9e ab       	std	Y+54, r25	; 0x36
     d22:	af ab       	std	Y+55, r26	; 0x37
     d24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d26:	6d a9       	ldd	r22, Y+53	; 0x35
     d28:	7e a9       	ldd	r23, Y+54	; 0x36
     d2a:	8f a9       	ldd	r24, Y+55	; 0x37
     d2c:	98 ad       	ldd	r25, Y+56	; 0x38
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	4a ef       	ldi	r20, 0xFA	; 250
     d34:	54 e4       	ldi	r21, 0x44	; 68
     d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	89 ab       	std	Y+49, r24	; 0x31
     d40:	9a ab       	std	Y+50, r25	; 0x32
     d42:	ab ab       	std	Y+51, r26	; 0x33
     d44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d46:	69 a9       	ldd	r22, Y+49	; 0x31
     d48:	7a a9       	ldd	r23, Y+50	; 0x32
     d4a:	8b a9       	ldd	r24, Y+51	; 0x33
     d4c:	9c a9       	ldd	r25, Y+52	; 0x34
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	5f e3       	ldi	r21, 0x3F	; 63
     d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	2c f4       	brge	.+10     	; 0xd68 <Initializing_pass+0x222>
		__ticks = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	98 ab       	std	Y+48, r25	; 0x30
     d64:	8f a7       	std	Y+47, r24	; 0x2f
     d66:	3f c0       	rjmp	.+126    	; 0xde6 <Initializing_pass+0x2a0>
	else if (__tmp > 65535)
     d68:	69 a9       	ldd	r22, Y+49	; 0x31
     d6a:	7a a9       	ldd	r23, Y+50	; 0x32
     d6c:	8b a9       	ldd	r24, Y+51	; 0x33
     d6e:	9c a9       	ldd	r25, Y+52	; 0x34
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	3f ef       	ldi	r19, 0xFF	; 255
     d74:	4f e7       	ldi	r20, 0x7F	; 127
     d76:	57 e4       	ldi	r21, 0x47	; 71
     d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	4c f5       	brge	.+82     	; 0xdd2 <Initializing_pass+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	6d a9       	ldd	r22, Y+53	; 0x35
     d82:	7e a9       	ldd	r23, Y+54	; 0x36
     d84:	8f a9       	ldd	r24, Y+55	; 0x37
     d86:	98 ad       	ldd	r25, Y+56	; 0x38
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e2       	ldi	r20, 0x20	; 32
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	98 ab       	std	Y+48, r25	; 0x30
     da6:	8f a7       	std	Y+47, r24	; 0x2f
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <Initializing_pass+0x282>
     daa:	88 ec       	ldi	r24, 0xC8	; 200
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9e a7       	std	Y+46, r25	; 0x2e
     db0:	8d a7       	std	Y+45, r24	; 0x2d
     db2:	8d a5       	ldd	r24, Y+45	; 0x2d
     db4:	9e a5       	ldd	r25, Y+46	; 0x2e
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <Initializing_pass+0x270>
     dba:	9e a7       	std	Y+46, r25	; 0x2e
     dbc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc0:	98 a9       	ldd	r25, Y+48	; 0x30
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	98 ab       	std	Y+48, r25	; 0x30
     dc6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dca:	98 a9       	ldd	r25, Y+48	; 0x30
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f7       	brne	.-38     	; 0xdaa <Initializing_pass+0x264>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <Initializing_pass+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd2:	69 a9       	ldd	r22, Y+49	; 0x31
     dd4:	7a a9       	ldd	r23, Y+50	; 0x32
     dd6:	8b a9       	ldd	r24, Y+51	; 0x33
     dd8:	9c a9       	ldd	r25, Y+52	; 0x34
     dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	98 ab       	std	Y+48, r25	; 0x30
     de4:	8f a7       	std	Y+47, r24	; 0x2f
     de6:	8f a5       	ldd	r24, Y+47	; 0x2f
     de8:	98 a9       	ldd	r25, Y+48	; 0x30
     dea:	9c a7       	std	Y+44, r25	; 0x2c
     dec:	8b a7       	std	Y+43, r24	; 0x2b
     dee:	8b a5       	ldd	r24, Y+43	; 0x2b
     df0:	9c a5       	ldd	r25, Y+44	; 0x2c
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <Initializing_pass+0x2ac>
     df6:	9c a7       	std	Y+44, r25	; 0x2c
     df8:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_displayCharacter('*');
		_delay_ms(200); /* Press time */
	} /*take password from user and put in array*/
	key = KEYPAD_getPressedKey();
	if(key == '='){; /* make '=' as an Enter button */
    for (uint8 i = 0; i < 5; i++){
     dfa:	de 01       	movw	r26, r28
     dfc:	a7 5b       	subi	r26, 0xB7	; 183
     dfe:	bf 4f       	sbci	r27, 0xFF	; 255
     e00:	fe 01       	movw	r30, r28
     e02:	e7 5b       	subi	r30, 0xB7	; 183
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	80 81       	ld	r24, Z
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8c 93       	st	X, r24
     e0c:	fe 01       	movw	r30, r28
     e0e:	e7 5b       	subi	r30, 0xB7	; 183
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	85 30       	cpi	r24, 0x05	; 5
     e16:	08 f4       	brcc	.+2      	; 0xe1a <Initializing_pass+0x2d4>
     e18:	6e cf       	rjmp	.-292    	; 0xcf6 <Initializing_pass+0x1b0>
			   while(UART_recieveByte()!= MC2_READY){}
			   UART_sendByte(pass[i]);
			   _delay_ms(200);
}}/*send first password to another ECU*/

	LCD_clearScreen();/* clear LCD */
     e1a:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz re-enter the");/*display please re enter function*/
     e1e:	20 e7       	ldi	r18, 0x70	; 112
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	a9 01       	movw	r20, r18
     e28:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Same Pass:");
     e2c:	21 e8       	ldi	r18, 0x81	; 129
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	a9 01       	movw	r20, r18
     e36:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 11);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	6b e0       	ldi	r22, 0x0B	; 11
     e3e:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <LCD_moveCursor>

	for (uint8 i = 0; i < 5; i++){
     e42:	fe 01       	movw	r30, r28
     e44:	e8 5b       	subi	r30, 0xB8	; 184
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	10 82       	st	Z, r1
     e4a:	8a c0       	rjmp	.+276    	; 0xf60 <Initializing_pass+0x41a>
		pass_2[i] = KEYPAD_getPressedKey();
     e4c:	fe 01       	movw	r30, r28
     e4e:	e8 5b       	subi	r30, 0xB8	; 184
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 81       	ld	r24, Z
     e54:	08 2f       	mov	r16, r24
     e56:	10 e0       	ldi	r17, 0x00	; 0
     e58:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
     e5c:	f8 01       	movw	r30, r16
     e5e:	e0 50       	subi	r30, 0x00	; 0
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 83       	st	Z, r24

		LCD_displayCharacter('*'); /* display the pressed keypad switch as '*' */
     e64:	8a e2       	ldi	r24, 0x2A	; 42
     e66:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_displayCharacter>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	aa ef       	ldi	r26, 0xFA	; 250
     e70:	b3 e4       	ldi	r27, 0x43	; 67
     e72:	8f a3       	std	Y+39, r24	; 0x27
     e74:	98 a7       	std	Y+40, r25	; 0x28
     e76:	a9 a7       	std	Y+41, r26	; 0x29
     e78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6f a1       	ldd	r22, Y+39	; 0x27
     e7c:	78 a5       	ldd	r23, Y+40	; 0x28
     e7e:	89 a5       	ldd	r24, Y+41	; 0x29
     e80:	9a a5       	ldd	r25, Y+42	; 0x2a
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8b a3       	std	Y+35, r24	; 0x23
     e94:	9c a3       	std	Y+36, r25	; 0x24
     e96:	ad a3       	std	Y+37, r26	; 0x25
     e98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e9a:	6b a1       	ldd	r22, Y+35	; 0x23
     e9c:	7c a1       	ldd	r23, Y+36	; 0x24
     e9e:	8d a1       	ldd	r24, Y+37	; 0x25
     ea0:	9e a1       	ldd	r25, Y+38	; 0x26
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <Initializing_pass+0x376>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9a a3       	std	Y+34, r25	; 0x22
     eb8:	89 a3       	std	Y+33, r24	; 0x21
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <Initializing_pass+0x3f4>
	else if (__tmp > 65535)
     ebc:	6b a1       	ldd	r22, Y+35	; 0x23
     ebe:	7c a1       	ldd	r23, Y+36	; 0x24
     ec0:	8d a1       	ldd	r24, Y+37	; 0x25
     ec2:	9e a1       	ldd	r25, Y+38	; 0x26
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <Initializing_pass+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6f a1       	ldd	r22, Y+39	; 0x27
     ed6:	78 a5       	ldd	r23, Y+40	; 0x28
     ed8:	89 a5       	ldd	r24, Y+41	; 0x29
     eda:	9a a5       	ldd	r25, Y+42	; 0x2a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9a a3       	std	Y+34, r25	; 0x22
     efa:	89 a3       	std	Y+33, r24	; 0x21
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <Initializing_pass+0x3d6>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	98 a3       	std	Y+32, r25	; 0x20
     f04:	8f 8f       	std	Y+31, r24	; 0x1f
     f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f08:	98 a1       	ldd	r25, Y+32	; 0x20
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <Initializing_pass+0x3c4>
     f0e:	98 a3       	std	Y+32, r25	; 0x20
     f10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	89 a1       	ldd	r24, Y+33	; 0x21
     f14:	9a a1       	ldd	r25, Y+34	; 0x22
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9a a3       	std	Y+34, r25	; 0x22
     f1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	89 a1       	ldd	r24, Y+33	; 0x21
     f1e:	9a a1       	ldd	r25, Y+34	; 0x22
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <Initializing_pass+0x3b8>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <Initializing_pass+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6b a1       	ldd	r22, Y+35	; 0x23
     f28:	7c a1       	ldd	r23, Y+36	; 0x24
     f2a:	8d a1       	ldd	r24, Y+37	; 0x25
     f2c:	9e a1       	ldd	r25, Y+38	; 0x26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9a a3       	std	Y+34, r25	; 0x22
     f38:	89 a3       	std	Y+33, r24	; 0x21
     f3a:	89 a1       	ldd	r24, Y+33	; 0x21
     f3c:	9a a1       	ldd	r25, Y+34	; 0x22
     f3e:	9e 8f       	std	Y+30, r25	; 0x1e
     f40:	8d 8f       	std	Y+29, r24	; 0x1d
     f42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f44:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <Initializing_pass+0x400>
     f4a:	9e 8f       	std	Y+30, r25	; 0x1e
     f4c:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();/* clear LCD */
	LCD_displayStringRowColumn(0, 0, "Plz re-enter the");/*display please re enter function*/
	LCD_displayStringRowColumn(1, 0, "Same Pass:");
	LCD_moveCursor(1, 11);

	for (uint8 i = 0; i < 5; i++){
     f4e:	de 01       	movw	r26, r28
     f50:	a8 5b       	subi	r26, 0xB8	; 184
     f52:	bf 4f       	sbci	r27, 0xFF	; 255
     f54:	fe 01       	movw	r30, r28
     f56:	e8 5b       	subi	r30, 0xB8	; 184
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	8c 93       	st	X, r24
     f60:	fe 01       	movw	r30, r28
     f62:	e8 5b       	subi	r30, 0xB8	; 184
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	85 30       	cpi	r24, 0x05	; 5
     f6a:	08 f4       	brcc	.+2      	; 0xf6e <Initializing_pass+0x428>
     f6c:	6f cf       	rjmp	.-290    	; 0xe4c <Initializing_pass+0x306>

		LCD_displayCharacter('*'); /* display the pressed keypad switch as '*' */

		_delay_ms(500); /* Press time */
		}/*take the check password from user and put in array*/
	key = KEYPAD_getPressedKey();
     f6e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
     f72:	fe 01       	movw	r30, r28
     f74:	e5 5b       	subi	r30, 0xB5	; 181
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 83       	st	Z, r24
	while(key != '='){}; /* make '=' as an Enter button */
     f7a:	fe 01       	movw	r30, r28
     f7c:	e5 5b       	subi	r30, 0xB5	; 181
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	8d 33       	cpi	r24, 0x3D	; 61
     f84:	d1 f7       	brne	.-12     	; 0xf7a <Initializing_pass+0x434>

			   for (uint8 i = 0; i < 5; i++){
     f86:	fe 01       	movw	r30, r28
     f88:	e9 5b       	subi	r30, 0xB9	; 185
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	10 82       	st	Z, r1
     f8e:	8b c0       	rjmp	.+278    	; 0x10a6 <Initializing_pass+0x560>
				   while(UART_recieveByte()!= MC2_READY){}
     f90:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
     f94:	80 31       	cpi	r24, 0x10	; 16
     f96:	e1 f7       	brne	.-8      	; 0xf90 <Initializing_pass+0x44a>
				   UART_sendByte(pass_2[i]);
     f98:	fe 01       	movw	r30, r28
     f9a:	e9 5b       	subi	r30, 0xB9	; 185
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	fc 01       	movw	r30, r24
     fa6:	e0 50       	subi	r30, 0x00	; 0
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a8 e4       	ldi	r26, 0x48	; 72
     fb6:	b3 e4       	ldi	r27, 0x43	; 67
     fb8:	89 8f       	std	Y+25, r24	; 0x19
     fba:	9a 8f       	std	Y+26, r25	; 0x1a
     fbc:	ab 8f       	std	Y+27, r26	; 0x1b
     fbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc0:	69 8d       	ldd	r22, Y+25	; 0x19
     fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	4a ef       	ldi	r20, 0xFA	; 250
     fce:	54 e4       	ldi	r21, 0x44	; 68
     fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	8d 8b       	std	Y+21, r24	; 0x15
     fda:	9e 8b       	std	Y+22, r25	; 0x16
     fdc:	af 8b       	std	Y+23, r26	; 0x17
     fde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fe0:	6d 89       	ldd	r22, Y+21	; 0x15
     fe2:	7e 89       	ldd	r23, Y+22	; 0x16
     fe4:	8f 89       	ldd	r24, Y+23	; 0x17
     fe6:	98 8d       	ldd	r25, Y+24	; 0x18
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e8       	ldi	r20, 0x80	; 128
     fee:	5f e3       	ldi	r21, 0x3F	; 63
     ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff4:	88 23       	and	r24, r24
     ff6:	2c f4       	brge	.+10     	; 0x1002 <Initializing_pass+0x4bc>
		__ticks = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9c 8b       	std	Y+20, r25	; 0x14
     ffe:	8b 8b       	std	Y+19, r24	; 0x13
    1000:	3f c0       	rjmp	.+126    	; 0x1080 <Initializing_pass+0x53a>
	else if (__tmp > 65535)
    1002:	6d 89       	ldd	r22, Y+21	; 0x15
    1004:	7e 89       	ldd	r23, Y+22	; 0x16
    1006:	8f 89       	ldd	r24, Y+23	; 0x17
    1008:	98 8d       	ldd	r25, Y+24	; 0x18
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	3f ef       	ldi	r19, 0xFF	; 255
    100e:	4f e7       	ldi	r20, 0x7F	; 127
    1010:	57 e4       	ldi	r21, 0x47	; 71
    1012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1016:	18 16       	cp	r1, r24
    1018:	4c f5       	brge	.+82     	; 0x106c <Initializing_pass+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101a:	69 8d       	ldd	r22, Y+25	; 0x19
    101c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    101e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e2       	ldi	r20, 0x20	; 32
    1028:	51 e4       	ldi	r21, 0x41	; 65
    102a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	9c 8b       	std	Y+20, r25	; 0x14
    1040:	8b 8b       	std	Y+19, r24	; 0x13
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <Initializing_pass+0x51c>
    1044:	88 ec       	ldi	r24, 0xC8	; 200
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9a 8b       	std	Y+18, r25	; 0x12
    104a:	89 8b       	std	Y+17, r24	; 0x11
    104c:	89 89       	ldd	r24, Y+17	; 0x11
    104e:	9a 89       	ldd	r25, Y+18	; 0x12
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <Initializing_pass+0x50a>
    1054:	9a 8b       	std	Y+18, r25	; 0x12
    1056:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	69 f7       	brne	.-38     	; 0x1044 <Initializing_pass+0x4fe>
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <Initializing_pass+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106c:	6d 89       	ldd	r22, Y+21	; 0x15
    106e:	7e 89       	ldd	r23, Y+22	; 0x16
    1070:	8f 89       	ldd	r24, Y+23	; 0x17
    1072:	98 8d       	ldd	r25, Y+24	; 0x18
    1074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	8b 89       	ldd	r24, Y+19	; 0x13
    1082:	9c 89       	ldd	r25, Y+20	; 0x14
    1084:	98 8b       	std	Y+16, r25	; 0x10
    1086:	8f 87       	std	Y+15, r24	; 0x0f
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	98 89       	ldd	r25, Y+16	; 0x10
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <Initializing_pass+0x546>
    1090:	98 8b       	std	Y+16, r25	; 0x10
    1092:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500); /* Press time */
		}/*take the check password from user and put in array*/
	key = KEYPAD_getPressedKey();
	while(key != '='){}; /* make '=' as an Enter button */

			   for (uint8 i = 0; i < 5; i++){
    1094:	de 01       	movw	r26, r28
    1096:	a9 5b       	subi	r26, 0xB9	; 185
    1098:	bf 4f       	sbci	r27, 0xFF	; 255
    109a:	fe 01       	movw	r30, r28
    109c:	e9 5b       	subi	r30, 0xB9	; 185
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	8c 93       	st	X, r24
    10a6:	fe 01       	movw	r30, r28
    10a8:	e9 5b       	subi	r30, 0xB9	; 185
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	85 30       	cpi	r24, 0x05	; 5
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <Initializing_pass+0x56e>
    10b2:	6e cf       	rjmp	.-292    	; 0xf90 <Initializing_pass+0x44a>
				   while(UART_recieveByte()!= MC2_READY){}
				   UART_sendByte(pass_2[i]);
				   _delay_ms(200);
			   }/*send first password to another ECU*/

	receive = UART_recieveByte(); /*receive byte identifying whether they are identical or not */
    10b4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    10b8:	80 93 f8 00 	sts	0x00F8, r24
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	aa ef       	ldi	r26, 0xFA	; 250
    10c2:	b3 e4       	ldi	r27, 0x43	; 67
    10c4:	8b 87       	std	Y+11, r24	; 0x0b
    10c6:	9c 87       	std	Y+12, r25	; 0x0c
    10c8:	ad 87       	std	Y+13, r26	; 0x0d
    10ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	4a ef       	ldi	r20, 0xFA	; 250
    10da:	54 e4       	ldi	r21, 0x44	; 68
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8f 83       	std	Y+7, r24	; 0x07
    10e6:	98 87       	std	Y+8, r25	; 0x08
    10e8:	a9 87       	std	Y+9, r26	; 0x09
    10ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e8       	ldi	r20, 0x80	; 128
    10fa:	5f e3       	ldi	r21, 0x3F	; 63
    10fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1100:	88 23       	and	r24, r24
    1102:	2c f4       	brge	.+10     	; 0x110e <Initializing_pass+0x5c8>
		__ticks = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	3f c0       	rjmp	.+126    	; 0x118c <Initializing_pass+0x646>
	else if (__tmp > 65535)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	57 e4       	ldi	r21, 0x47	; 71
    111e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1122:	18 16       	cp	r1, r24
    1124:	4c f5       	brge	.+82     	; 0x1178 <Initializing_pass+0x632>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	6b 85       	ldd	r22, Y+11	; 0x0b
    1128:	7c 85       	ldd	r23, Y+12	; 0x0c
    112a:	8d 85       	ldd	r24, Y+13	; 0x0d
    112c:	9e 85       	ldd	r25, Y+14	; 0x0e
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e2       	ldi	r20, 0x20	; 32
    1134:	51 e4       	ldi	r21, 0x41	; 65
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9e 83       	std	Y+6, r25	; 0x06
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	0f c0       	rjmp	.+30     	; 0x116e <Initializing_pass+0x628>
    1150:	88 ec       	ldi	r24, 0xC8	; 200
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9c 83       	std	Y+4, r25	; 0x04
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <Initializing_pass+0x616>
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	69 f7       	brne	.-38     	; 0x1150 <Initializing_pass+0x60a>
    1176:	14 c0       	rjmp	.+40     	; 0x11a0 <Initializing_pass+0x65a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <Initializing_pass+0x652>
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	if(receive == Not_identical)
    11a0:	80 91 f8 00 	lds	r24, 0x00F8
    11a4:	88 23       	and	r24, r24
    11a6:	11 f4       	brne	.+4      	; 0x11ac <Initializing_pass+0x666>
	{
		Initializing_pass();
    11a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Initializing_pass>
	}/*if not identical repeat function again*/

}
    11ac:	c5 5b       	subi	r28, 0xB5	; 181
    11ae:	df 4f       	sbci	r29, 0xFF	; 255
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <TIMER1_ticks>:
/*call back function that increments the g_tick every time the timer matches the compare value*/
void TIMER1_ticks()
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11cc:	80 91 05 01 	lds	r24, 0x0105
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	80 93 05 01 	sts	0x0105, r24
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <LCD_Operation>:
/*Function used to operate the motor */
void LCD_Operation(){
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62

	    g_tick = 0;/*Initiallizing g tick value to start counting*/
    11e4:	10 92 05 01 	sts	0x0105, r1
	    /* operating motor for 15 seconds CW*/
		if(g_tick == 5)
    11e8:	80 91 05 01 	lds	r24, 0x0105
    11ec:	85 30       	cpi	r24, 0x05	; 5
    11ee:	51 f4       	brne	.+20     	; 0x1204 <LCD_Operation+0x28>
		{

			LCD_clearScreen();/*Clearing LCD*/
    11f0:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Hold");/*Displaying Hold for 3 seconds*/
    11f4:	2c e8       	ldi	r18, 0x8C	; 140
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
    1202:	16 c0       	rjmp	.+44     	; 0x1230 <LCD_Operation+0x54>

		}
		else if(g_tick == 6)
    1204:	80 91 05 01 	lds	r24, 0x0105
    1208:	86 30       	cpi	r24, 0x06	; 6
    120a:	51 f4       	brne	.+20     	; 0x1220 <LCD_Operation+0x44>
		{

			LCD_clearScreen();/*Clearing LCD*/
    120c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Door is Locking");/*Displaying Door is Locking for 15 seconds*/
    1210:	21 e9       	ldi	r18, 0x91	; 145
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <LCD_Operation+0x54>

		}
		else if(g_tick == 11)
    1220:	80 91 05 01 	lds	r24, 0x0105
    1224:	8b 30       	cpi	r24, 0x0B	; 11
    1226:	21 f4       	brne	.+8      	; 0x1230 <LCD_Operation+0x54>
		{
			LCD_clearScreen();/*Clearing LCD*/
    1228:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
		    g_tick = 0;/*Initializing g_tick value to start counting*/
    122c:	10 92 05 01 	sts	0x0105, r1
		}
}
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <PASS>:
/*function used to take password using keypad and send it to the other ECU*/
void PASS(void)
{
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	ad 97       	sbiw	r28, 0x2d	; 45
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_clearScreen();/*Clearing LCD*/
    124e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");/*Displaying please enter password*/
    1252:	20 e6       	ldi	r18, 0x60	; 96
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>

	for (uint8 i = 0; i < 5; i++){
    1260:	1c a6       	std	Y+44, r1	; 0x2c
    1262:	85 c0       	rjmp	.+266    	; 0x136e <PASS+0x138>

		pass[i] = KEYPAD_getPressedKey();
    1264:	8c a5       	ldd	r24, Y+44	; 0x2c
    1266:	08 2f       	mov	r16, r24
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
    126e:	f8 01       	movw	r30, r16
    1270:	e5 50       	subi	r30, 0x05	; 5
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 83       	st	Z, r24
		LCD_moveCursor(1, i);
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	6c a5       	ldd	r22, Y+44	; 0x2c
    127a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <LCD_moveCursor>
		LCD_displayCharacter('*'); /* display the pressed keypad switch as '*' */
    127e:	8a e2       	ldi	r24, 0x2A	; 42
    1280:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_displayCharacter>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	aa ef       	ldi	r26, 0xFA	; 250
    128a:	b3 e4       	ldi	r27, 0x43	; 67
    128c:	8f a3       	std	Y+39, r24	; 0x27
    128e:	98 a7       	std	Y+40, r25	; 0x28
    1290:	a9 a7       	std	Y+41, r26	; 0x29
    1292:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	6f a1       	ldd	r22, Y+39	; 0x27
    1296:	78 a5       	ldd	r23, Y+40	; 0x28
    1298:	89 a5       	ldd	r24, Y+41	; 0x29
    129a:	9a a5       	ldd	r25, Y+42	; 0x2a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a ef       	ldi	r20, 0xFA	; 250
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8b a3       	std	Y+35, r24	; 0x23
    12ae:	9c a3       	std	Y+36, r25	; 0x24
    12b0:	ad a3       	std	Y+37, r26	; 0x25
    12b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12b4:	6b a1       	ldd	r22, Y+35	; 0x23
    12b6:	7c a1       	ldd	r23, Y+36	; 0x24
    12b8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ba:	9e a1       	ldd	r25, Y+38	; 0x26
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <PASS+0xa0>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9a a3       	std	Y+34, r25	; 0x22
    12d2:	89 a3       	std	Y+33, r24	; 0x21
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <PASS+0x11e>
	else if (__tmp > 65535)
    12d6:	6b a1       	ldd	r22, Y+35	; 0x23
    12d8:	7c a1       	ldd	r23, Y+36	; 0x24
    12da:	8d a1       	ldd	r24, Y+37	; 0x25
    12dc:	9e a1       	ldd	r25, Y+38	; 0x26
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <PASS+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	6f a1       	ldd	r22, Y+39	; 0x27
    12f0:	78 a5       	ldd	r23, Y+40	; 0x28
    12f2:	89 a5       	ldd	r24, Y+41	; 0x29
    12f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9a a3       	std	Y+34, r25	; 0x22
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <PASS+0x100>
    1318:	88 ec       	ldi	r24, 0xC8	; 200
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	98 a3       	std	Y+32, r25	; 0x20
    131e:	8f 8f       	std	Y+31, r24	; 0x1f
    1320:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1322:	98 a1       	ldd	r25, Y+32	; 0x20
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <PASS+0xee>
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	89 a1       	ldd	r24, Y+33	; 0x21
    132e:	9a a1       	ldd	r25, Y+34	; 0x22
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9a a3       	std	Y+34, r25	; 0x22
    1334:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	89 a1       	ldd	r24, Y+33	; 0x21
    1338:	9a a1       	ldd	r25, Y+34	; 0x22
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <PASS+0xe2>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <PASS+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6b a1       	ldd	r22, Y+35	; 0x23
    1342:	7c a1       	ldd	r23, Y+36	; 0x24
    1344:	8d a1       	ldd	r24, Y+37	; 0x25
    1346:	9e a1       	ldd	r25, Y+38	; 0x26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	9a a1       	ldd	r25, Y+34	; 0x22
    1358:	9e 8f       	std	Y+30, r25	; 0x1e
    135a:	8d 8f       	std	Y+29, r24	; 0x1d
    135c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    135e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <PASS+0x12a>
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
{
	uint8 key;
	LCD_clearScreen();/*Clearing LCD*/
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");/*Displaying please enter password*/

	for (uint8 i = 0; i < 5; i++){
    1368:	8c a5       	ldd	r24, Y+44	; 0x2c
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	8c a7       	std	Y+44, r24	; 0x2c
    136e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1370:	85 30       	cpi	r24, 0x05	; 5
    1372:	08 f4       	brcc	.+2      	; 0x1376 <PASS+0x140>
    1374:	77 cf       	rjmp	.-274    	; 0x1264 <PASS+0x2e>
		LCD_moveCursor(1, i);
		LCD_displayCharacter('*'); /* display the pressed keypad switch as '*' */

		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
    1376:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
    137a:	8d a7       	std	Y+45, r24	; 0x2d
	while(key != '='){}; /* make '=' as an Enter button */
    137c:	8d a5       	ldd	r24, Y+45	; 0x2d
    137e:	8d 33       	cpi	r24, 0x3D	; 61
    1380:	e9 f7       	brne	.-6      	; 0x137c <PASS+0x146>

		   for (uint8 i = 0; i < 5; i++){
    1382:	1b a6       	std	Y+43, r1	; 0x2b
    1384:	82 c0       	rjmp	.+260    	; 0x148a <PASS+0x254>
			   while(UART_recieveByte()!= MC2_READY){}
    1386:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    138a:	80 31       	cpi	r24, 0x10	; 16
    138c:	e1 f7       	brne	.-8      	; 0x1386 <PASS+0x150>
			   UART_sendByte(pass[i]);
    138e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	fc 01       	movw	r30, r24
    1396:	e5 50       	subi	r30, 0x05	; 5
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a8 e4       	ldi	r26, 0x48	; 72
    13a6:	b3 e4       	ldi	r27, 0x43	; 67
    13a8:	89 8f       	std	Y+25, r24	; 0x19
    13aa:	9a 8f       	std	Y+26, r25	; 0x1a
    13ac:	ab 8f       	std	Y+27, r26	; 0x1b
    13ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	69 8d       	ldd	r22, Y+25	; 0x19
    13b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8d 8b       	std	Y+21, r24	; 0x15
    13ca:	9e 8b       	std	Y+22, r25	; 0x16
    13cc:	af 8b       	std	Y+23, r26	; 0x17
    13ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <PASS+0x1bc>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <PASS+0x23a>
	else if (__tmp > 65535)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <PASS+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <PASS+0x21c>
    1434:	88 ec       	ldi	r24, 0xC8	; 200
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
    143c:	89 89       	ldd	r24, Y+17	; 0x11
    143e:	9a 89       	ldd	r25, Y+18	; 0x12
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <PASS+0x20a>
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9c 8b       	std	Y+20, r25	; 0x14
    1450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <PASS+0x1fe>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <PASS+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	8b 89       	ldd	r24, Y+19	; 0x13
    1472:	9c 89       	ldd	r25, Y+20	; 0x14
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	98 89       	ldd	r25, Y+16	; 0x10
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <PASS+0x246>
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
	while(key != '='){}; /* make '=' as an Enter button */

		   for (uint8 i = 0; i < 5; i++){
    1484:	8b a5       	ldd	r24, Y+43	; 0x2b
    1486:	8f 5f       	subi	r24, 0xFF	; 255
    1488:	8b a7       	std	Y+43, r24	; 0x2b
    148a:	8b a5       	ldd	r24, Y+43	; 0x2b
    148c:	85 30       	cpi	r24, 0x05	; 5
    148e:	08 f4       	brcc	.+2      	; 0x1492 <PASS+0x25c>
    1490:	7a cf       	rjmp	.-268    	; 0x1386 <PASS+0x150>
			   UART_sendByte(pass[i]);
			   _delay_ms(200);

		   }// send password to the other ECU

	receive = UART_recieveByte();/*receiving if password correct or not*/
    1492:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    1496:	80 93 f8 00 	sts	0x00F8, r24
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	aa ef       	ldi	r26, 0xFA	; 250
    14a0:	b3 e4       	ldi	r27, 0x43	; 67
    14a2:	8b 87       	std	Y+11, r24	; 0x0b
    14a4:	9c 87       	std	Y+12, r25	; 0x0c
    14a6:	ad 87       	std	Y+13, r26	; 0x0d
    14a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4a ef       	ldi	r20, 0xFA	; 250
    14b8:	54 e4       	ldi	r21, 0x44	; 68
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	8f 83       	std	Y+7, r24	; 0x07
    14c4:	98 87       	std	Y+8, r25	; 0x08
    14c6:	a9 87       	std	Y+9, r26	; 0x09
    14c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ca:	6f 81       	ldd	r22, Y+7	; 0x07
    14cc:	78 85       	ldd	r23, Y+8	; 0x08
    14ce:	89 85       	ldd	r24, Y+9	; 0x09
    14d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14de:	88 23       	and	r24, r24
    14e0:	2c f4       	brge	.+10     	; 0x14ec <PASS+0x2b6>
		__ticks = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <PASS+0x334>
	else if (__tmp > 65535)
    14ec:	6f 81       	ldd	r22, Y+7	; 0x07
    14ee:	78 85       	ldd	r23, Y+8	; 0x08
    14f0:	89 85       	ldd	r24, Y+9	; 0x09
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
    14f8:	4f e7       	ldi	r20, 0x7F	; 127
    14fa:	57 e4       	ldi	r21, 0x47	; 71
    14fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1500:	18 16       	cp	r1, r24
    1502:	4c f5       	brge	.+82     	; 0x1556 <PASS+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	6b 85       	ldd	r22, Y+11	; 0x0b
    1506:	7c 85       	ldd	r23, Y+12	; 0x0c
    1508:	8d 85       	ldd	r24, Y+13	; 0x0d
    150a:	9e 85       	ldd	r25, Y+14	; 0x0e
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	51 e4       	ldi	r21, 0x41	; 65
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	0f c0       	rjmp	.+30     	; 0x154c <PASS+0x316>
    152e:	88 ec       	ldi	r24, 0xC8	; 200
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <PASS+0x304>
    153e:	9c 83       	std	Y+4, r25	; 0x04
    1540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	69 f7       	brne	.-38     	; 0x152e <PASS+0x2f8>
    1554:	14 c0       	rjmp	.+40     	; 0x157e <PASS+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <PASS+0x340>
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    157e:	ad 96       	adiw	r28, 0x2d	; 45
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <Motor_Change_operations>:
/*Function responsible for operating and managing the whole module */
void Motor_Change_operations(){
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	c1 57       	subi	r28, 0x71	; 113
    15a2:	d0 40       	sbci	r29, 0x00	; 0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
	uint8 k;/*variable to hold the key pressed */
	/*Displaying the main menu */
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    15ae:	21 ea       	ldi	r18, 0xA1	; 161
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	a9 01       	movw	r20, r18
    15b8:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0, 13, "   ");
    15bc:	2f ea       	ldi	r18, 0xAF	; 175
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	6d e0       	ldi	r22, 0x0D	; 13
    15c4:	a9 01       	movw	r20, r18
    15c6:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    15ca:	23 eb       	ldi	r18, 0xB3	; 179
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 15, "  ");
    15d8:	23 ec       	ldi	r18, 0xC3	; 195
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	6f e0       	ldi	r22, 0x0F	; 15
    15e0:	a9 01       	movw	r20, r18
    15e2:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
	k = KEYPAD_getPressedKey();
    15e6:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <KEYPAD_getPressedKey>
    15ea:	fe 01       	movw	r30, r28
    15ec:	ef 58       	subi	r30, 0x8F	; 143
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
	if (k == '+'){
    15f2:	fe 01       	movw	r30, r28
    15f4:	ef 58       	subi	r30, 0x8F	; 143
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	8b 32       	cpi	r24, 0x2B	; 43
    15fc:	09 f0       	breq	.+2      	; 0x1600 <Motor_Change_operations+0x6c>
    15fe:	1d c3       	rjmp	.+1594   	; 0x1c3a <Motor_Change_operations+0x6a6>
	   PASS();/*call the pass function to send password and check if correct*/
    1600:	0e 94 1b 09 	call	0x1236	; 0x1236 <PASS>
	   if(receive == identical)
    1604:	80 91 f8 00 	lds	r24, 0x00F8
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <Motor_Change_operations+0x7a>
    160c:	cd c0       	rjmp	.+410    	; 0x17a8 <Motor_Change_operations+0x214>
		{
		   while(UART_recieveByte()!= MC2_READY){}/*wait until other ECU is ready to receive */
    160e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    1612:	80 31       	cpi	r24, 0x10	; 16
    1614:	e1 f7       	brne	.-8      	; 0x160e <Motor_Change_operations+0x7a>
		   UART_sendByte(open_motor); /*send operation needed to be done */
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    161c:	fe 01       	movw	r30, r28
    161e:	e3 59       	subi	r30, 0x93	; 147
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	aa ef       	ldi	r26, 0xFA	; 250
    1628:	b3 e4       	ldi	r27, 0x43	; 67
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	a2 83       	std	Z+2, r26	; 0x02
    1630:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	8e 01       	movw	r16, r28
    1634:	07 59       	subi	r16, 0x97	; 151
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	fe 01       	movw	r30, r28
    163a:	e3 59       	subi	r30, 0x93	; 147
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4a ef       	ldi	r20, 0xFA	; 250
    164c:	54 e4       	ldi	r21, 0x44	; 68
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	f8 01       	movw	r30, r16
    1658:	80 83       	st	Z, r24
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	a2 83       	std	Z+2, r26	; 0x02
    165e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1660:	fe 01       	movw	r30, r28
    1662:	e7 59       	subi	r30, 0x97	; 151
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	44 f4       	brge	.+16     	; 0x168e <Motor_Change_operations+0xfa>
		__ticks = 1;
    167e:	fe 01       	movw	r30, r28
    1680:	e9 59       	subi	r30, 0x99	; 153
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	64 c0       	rjmp	.+200    	; 0x1756 <Motor_Change_operations+0x1c2>
	else if (__tmp > 65535)
    168e:	fe 01       	movw	r30, r28
    1690:	e7 59       	subi	r30, 0x97	; 151
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <Motor_Change_operations+0x11a>
    16ac:	43 c0       	rjmp	.+134    	; 0x1734 <Motor_Change_operations+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	fe 01       	movw	r30, r28
    16b0:	e3 59       	subi	r30, 0x93	; 147
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8e 01       	movw	r16, r28
    16ce:	09 59       	subi	r16, 0x99	; 153
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f8 01       	movw	r30, r16
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	1f c0       	rjmp	.+62     	; 0x1724 <Motor_Change_operations+0x190>
    16e6:	fe 01       	movw	r30, r28
    16e8:	eb 59       	subi	r30, 0x9B	; 155
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	88 ec       	ldi	r24, 0xC8	; 200
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24
    16f4:	fe 01       	movw	r30, r28
    16f6:	eb 59       	subi	r30, 0x9B	; 155
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <Motor_Change_operations+0x16a>
    1702:	fe 01       	movw	r30, r28
    1704:	eb 59       	subi	r30, 0x9B	; 155
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	de 01       	movw	r26, r28
    170e:	a9 59       	subi	r26, 0x99	; 153
    1710:	bf 4f       	sbci	r27, 0xFF	; 255
    1712:	fe 01       	movw	r30, r28
    1714:	e9 59       	subi	r30, 0x99	; 153
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	9c 93       	st	X, r25
    1722:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	fe 01       	movw	r30, r28
    1726:	e9 59       	subi	r30, 0x99	; 153
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	d1 f6       	brne	.-76     	; 0x16e6 <Motor_Change_operations+0x152>
    1732:	27 c0       	rjmp	.+78     	; 0x1782 <Motor_Change_operations+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	8e 01       	movw	r16, r28
    1736:	09 59       	subi	r16, 0x99	; 153
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	fe 01       	movw	r30, r28
    173c:	e7 59       	subi	r30, 0x97	; 151
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	f8 01       	movw	r30, r16
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
    1756:	de 01       	movw	r26, r28
    1758:	ad 59       	subi	r26, 0x9D	; 157
    175a:	bf 4f       	sbci	r27, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	e9 59       	subi	r30, 0x99	; 153
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	8d 93       	st	X+, r24
    1768:	9c 93       	st	X, r25
    176a:	fe 01       	movw	r30, r28
    176c:	ed 59       	subi	r30, 0x9D	; 157
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <Motor_Change_operations+0x1e0>
    1778:	fe 01       	movw	r30, r28
    177a:	ed 59       	subi	r30, 0x9D	; 157
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
		   _delay_ms(500);
		   LCD_clearScreen();
    1782:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
		   LCD_displayStringRowColumn(0, 0, "Door is");/*Display Door is unlocking for 15 seconds*/
    1786:	26 ec       	ldi	r18, 0xC6	; 198
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
		   LCD_displayStringRowColumn(1, 0, "Unlocking");
    1794:	2e ec       	ldi	r18, 0xCE	; 206
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
		   LCD_Operation(); /*call function responsible for doing the display operation*/
    17a2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_Operation>
    17a6:	49 c2       	rjmp	.+1170   	; 0x1c3a <Motor_Change_operations+0x6a6>
		}
	   /*taking password again to check if identical*/
	   else if(receive == Not_identical)
    17a8:	80 91 f8 00 	lds	r24, 0x00F8
    17ac:	88 23       	and	r24, r24
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <Motor_Change_operations+0x21e>
    17b0:	44 c2       	rjmp	.+1160   	; 0x1c3a <Motor_Change_operations+0x6a6>
			{

		   PASS();/*call the pass function to send password and check if correct*/
    17b2:	0e 94 1b 09 	call	0x1236	; 0x1236 <PASS>
		   if(receive == identical)
    17b6:	80 91 f8 00 	lds	r24, 0x00F8
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <Motor_Change_operations+0x22c>
    17be:	cd c0       	rjmp	.+410    	; 0x195a <Motor_Change_operations+0x3c6>
		   		{
		   		   while(UART_recieveByte()!= MC2_READY){}
    17c0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    17c4:	80 31       	cpi	r24, 0x10	; 16
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <Motor_Change_operations+0x22c>
		   		   UART_sendByte(open_motor);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    17ce:	fe 01       	movw	r30, r28
    17d0:	e1 5a       	subi	r30, 0xA1	; 161
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	aa ef       	ldi	r26, 0xFA	; 250
    17da:	b3 e4       	ldi	r27, 0x43	; 67
    17dc:	80 83       	st	Z, r24
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	a2 83       	std	Z+2, r26	; 0x02
    17e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	8e 01       	movw	r16, r28
    17e6:	05 5a       	subi	r16, 0xA5	; 165
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	fe 01       	movw	r30, r28
    17ec:	e1 5a       	subi	r30, 0xA1	; 161
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	a2 83       	std	Z+2, r26	; 0x02
    1810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1812:	fe 01       	movw	r30, r28
    1814:	e5 5a       	subi	r30, 0xA5	; 165
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	44 f4       	brge	.+16     	; 0x1840 <Motor_Change_operations+0x2ac>
		__ticks = 1;
    1830:	fe 01       	movw	r30, r28
    1832:	e7 5a       	subi	r30, 0xA7	; 167
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
    183e:	64 c0       	rjmp	.+200    	; 0x1908 <Motor_Change_operations+0x374>
	else if (__tmp > 65535)
    1840:	fe 01       	movw	r30, r28
    1842:	e5 5a       	subi	r30, 0xA5	; 165
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	0c f0       	brlt	.+2      	; 0x1860 <Motor_Change_operations+0x2cc>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <Motor_Change_operations+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	fe 01       	movw	r30, r28
    1862:	e1 5a       	subi	r30, 0xA1	; 161
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8e 01       	movw	r16, r28
    1880:	07 5a       	subi	r16, 0xA7	; 167
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	1f c0       	rjmp	.+62     	; 0x18d6 <Motor_Change_operations+0x342>
    1898:	fe 01       	movw	r30, r28
    189a:	e9 5a       	subi	r30, 0xA9	; 169
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	fe 01       	movw	r30, r28
    18a8:	e9 5a       	subi	r30, 0xA9	; 169
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <Motor_Change_operations+0x31c>
    18b4:	fe 01       	movw	r30, r28
    18b6:	e9 5a       	subi	r30, 0xA9	; 169
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	de 01       	movw	r26, r28
    18c0:	a7 5a       	subi	r26, 0xA7	; 167
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	e7 5a       	subi	r30, 0xA7	; 167
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	9c 93       	st	X, r25
    18d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	fe 01       	movw	r30, r28
    18d8:	e7 5a       	subi	r30, 0xA7	; 167
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	d1 f6       	brne	.-76     	; 0x1898 <Motor_Change_operations+0x304>
    18e4:	27 c0       	rjmp	.+78     	; 0x1934 <Motor_Change_operations+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	8e 01       	movw	r16, r28
    18e8:	07 5a       	subi	r16, 0xA7	; 167
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	e5 5a       	subi	r30, 0xA5	; 165
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	de 01       	movw	r26, r28
    190a:	ab 5a       	subi	r26, 0xAB	; 171
    190c:	bf 4f       	sbci	r27, 0xFF	; 255
    190e:	fe 01       	movw	r30, r28
    1910:	e7 5a       	subi	r30, 0xA7	; 167
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	8d 93       	st	X+, r24
    191a:	9c 93       	st	X, r25
    191c:	fe 01       	movw	r30, r28
    191e:	eb 5a       	subi	r30, 0xAB	; 171
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <Motor_Change_operations+0x392>
    192a:	fe 01       	movw	r30, r28
    192c:	eb 5a       	subi	r30, 0xAB	; 171
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
		   		   _delay_ms(500);
		   		   LCD_clearScreen();
    1934:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
		   		   LCD_displayStringRowColumn(0, 0, "Door is");/*Display Door is unlocking for 15 seconds*/
    1938:	26 ec       	ldi	r18, 0xC6	; 198
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	a9 01       	movw	r20, r18
    1942:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
		   		   LCD_displayStringRowColumn(1, 0, "Unlocking");
    1946:	2e ec       	ldi	r18, 0xCE	; 206
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
		   		   LCD_Operation();/*call function responsible for doing the display operation*/
    1954:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_Operation>
    1958:	70 c1       	rjmp	.+736    	; 0x1c3a <Motor_Change_operations+0x6a6>


			}
		   /*taking password again to check if identical*/
		   else if(receive == Not_identical){
    195a:	80 91 f8 00 	lds	r24, 0x00F8
    195e:	88 23       	and	r24, r24
    1960:	09 f0       	breq	.+2      	; 0x1964 <Motor_Change_operations+0x3d0>
    1962:	6b c1       	rjmp	.+726    	; 0x1c3a <Motor_Change_operations+0x6a6>
			   PASS();/*call the pass function to send password and check if correct*/
    1964:	0e 94 1b 09 	call	0x1236	; 0x1236 <PASS>
			   if(receive == identical)
    1968:	80 91 f8 00 	lds	r24, 0x00F8
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	09 f0       	breq	.+2      	; 0x1972 <Motor_Change_operations+0x3de>
    1970:	cd c0       	rjmp	.+410    	; 0x1b0c <Motor_Change_operations+0x578>
			    {
				   while(UART_recieveByte()!= MC2_READY){}
    1972:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    1976:	80 31       	cpi	r24, 0x10	; 16
    1978:	e1 f7       	brne	.-8      	; 0x1972 <Motor_Change_operations+0x3de>
				   UART_sendByte(open_motor);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    1980:	fe 01       	movw	r30, r28
    1982:	ef 5a       	subi	r30, 0xAF	; 175
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	aa ef       	ldi	r26, 0xFA	; 250
    198c:	b3 e4       	ldi	r27, 0x43	; 67
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	8e 01       	movw	r16, r28
    1998:	03 5b       	subi	r16, 0xB3	; 179
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	fe 01       	movw	r30, r28
    199e:	ef 5a       	subi	r30, 0xAF	; 175
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	80 83       	st	Z, r24
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	a2 83       	std	Z+2, r26	; 0x02
    19c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e3 5b       	subi	r30, 0xB3	; 179
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <Motor_Change_operations+0x45e>
		__ticks = 1;
    19e2:	fe 01       	movw	r30, r28
    19e4:	e5 5b       	subi	r30, 0xB5	; 181
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	64 c0       	rjmp	.+200    	; 0x1aba <Motor_Change_operations+0x526>
	else if (__tmp > 65535)
    19f2:	fe 01       	movw	r30, r28
    19f4:	e3 5b       	subi	r30, 0xB3	; 179
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	0c f0       	brlt	.+2      	; 0x1a12 <Motor_Change_operations+0x47e>
    1a10:	43 c0       	rjmp	.+134    	; 0x1a98 <Motor_Change_operations+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a12:	fe 01       	movw	r30, r28
    1a14:	ef 5a       	subi	r30, 0xAF	; 175
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8e 01       	movw	r16, r28
    1a32:	05 5b       	subi	r16, 0xB5	; 181
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	f8 01       	movw	r30, r16
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
    1a48:	1f c0       	rjmp	.+62     	; 0x1a88 <Motor_Change_operations+0x4f4>
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e7 5b       	subi	r30, 0xB7	; 183
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	88 ec       	ldi	r24, 0xC8	; 200
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e7 5b       	subi	r30, 0xB7	; 183
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <Motor_Change_operations+0x4ce>
    1a66:	fe 01       	movw	r30, r28
    1a68:	e7 5b       	subi	r30, 0xB7	; 183
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	de 01       	movw	r26, r28
    1a72:	a5 5b       	subi	r26, 0xB5	; 181
    1a74:	bf 4f       	sbci	r27, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	e5 5b       	subi	r30, 0xB5	; 181
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	11 96       	adiw	r26, 0x01	; 1
    1a84:	9c 93       	st	X, r25
    1a86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e5 5b       	subi	r30, 0xB5	; 181
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	d1 f6       	brne	.-76     	; 0x1a4a <Motor_Change_operations+0x4b6>
    1a96:	27 c0       	rjmp	.+78     	; 0x1ae6 <Motor_Change_operations+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	05 5b       	subi	r16, 0xB5	; 181
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e3 5b       	subi	r30, 0xB3	; 179
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	de 01       	movw	r26, r28
    1abc:	a9 5b       	subi	r26, 0xB9	; 185
    1abe:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e5 5b       	subi	r30, 0xB5	; 181
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	8d 93       	st	X+, r24
    1acc:	9c 93       	st	X, r25
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e9 5b       	subi	r30, 0xB9	; 185
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <Motor_Change_operations+0x544>
    1adc:	fe 01       	movw	r30, r28
    1ade:	e9 5b       	subi	r30, 0xB9	; 185
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
				   _delay_ms(500);
				   LCD_clearScreen();
    1ae6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
				   LCD_displayStringRowColumn(0, 0, "Door is");/*Display Door is unlocking for 15 seconds*/
    1aea:	26 ec       	ldi	r18, 0xC6	; 198
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	a9 01       	movw	r20, r18
    1af4:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
				   LCD_displayStringRowColumn(1, 0, "Unlocking");
    1af8:	2e ec       	ldi	r18, 0xCE	; 206
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	0e 94 be 21 	call	0x437c	; 0x437c <LCD_displayStringRowColumn>
				   LCD_Operation();/*call function responsible for doing the display operation*/
    1b06:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_Operation>
    1b0a:	97 c0       	rjmp	.+302    	; 0x1c3a <Motor_Change_operations+0x6a6>

		   }
			   /*After giving 2 chances to get the correct password hold the system for 1 minute*/
			   else if(receive == Not_identical){
    1b0c:	80 91 f8 00 	lds	r24, 0x00F8
    1b10:	88 23       	and	r24, r24
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <Motor_Change_operations+0x582>
    1b14:	92 c0       	rjmp	.+292    	; 0x1c3a <Motor_Change_operations+0x6a6>
				   UART_sendByte(Buzzer); /* send Buzzer to the other ECU */
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
				   	LCD_clearScreen();
    1b1c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
				   	LCD_displayString("ERROR!!!!");/*Display Error*/
    1b20:	88 ed       	ldi	r24, 0xD8	; 216
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 53 21 	call	0x42a6	; 0x42a6 <LCD_displayString>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ed 5b       	subi	r30, 0xBD	; 189
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e6       	ldi	r25, 0x60	; 96
    1b32:	aa e6       	ldi	r26, 0x6A	; 106
    1b34:	b7 e4       	ldi	r27, 0x47	; 71
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	8e 01       	movw	r16, r28
    1b40:	01 5c       	subi	r16, 0xC1	; 193
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	fe 01       	movw	r30, r28
    1b46:	ed 5b       	subi	r30, 0xBD	; 189
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a ef       	ldi	r20, 0xFA	; 250
    1b58:	54 e4       	ldi	r21, 0x44	; 68
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	f8 01       	movw	r30, r16
    1b64:	80 83       	st	Z, r24
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ff 96       	adiw	r30, 0x3f	; 63
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <Motor_Change_operations+0x5fe>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9e af       	std	Y+62, r25	; 0x3e
    1b8e:	8d af       	std	Y+61, r24	; 0x3d
    1b90:	46 c0       	rjmp	.+140    	; 0x1c1e <Motor_Change_operations+0x68a>
	else if (__tmp > 65535)
    1b92:	fe 01       	movw	r30, r28
    1b94:	ff 96       	adiw	r30, 0x3f	; 63
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	64 f5       	brge	.+88     	; 0x1c06 <Motor_Change_operations+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ed 5b       	subi	r30, 0xBD	; 189
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e af       	std	Y+62, r25	; 0x3e
    1bda:	8d af       	std	Y+61, r24	; 0x3d
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <Motor_Change_operations+0x668>
    1bde:	88 ec       	ldi	r24, 0xC8	; 200
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9c af       	std	Y+60, r25	; 0x3c
    1be4:	8b af       	std	Y+59, r24	; 0x3b
    1be6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1be8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <Motor_Change_operations+0x656>
    1bee:	9c af       	std	Y+60, r25	; 0x3c
    1bf0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	9e af       	std	Y+62, r25	; 0x3e
    1bfa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <Motor_Change_operations+0x64a>
    1c04:	16 c0       	rjmp	.+44     	; 0x1c32 <Motor_Change_operations+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	fe 01       	movw	r30, r28
    1c08:	ff 96       	adiw	r30, 0x3f	; 63
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e af       	std	Y+62, r25	; 0x3e
    1c1c:	8d af       	std	Y+61, r24	; 0x3d
    1c1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c22:	9a af       	std	Y+58, r25	; 0x3a
    1c24:	89 af       	std	Y+57, r24	; 0x39
    1c26:	89 ad       	ldd	r24, Y+57	; 0x39
    1c28:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <Motor_Change_operations+0x696>
    1c2e:	9a af       	std	Y+58, r25	; 0x3a
    1c30:	89 af       	std	Y+57, r24	; 0x39
				   	_delay_ms(60000); // wait a minute
				   	LCD_clearScreen();/*clear LCD*/
    1c32:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
				   	Motor_Change_operations(); /*Start function from start*/
    1c36:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Motor_Change_operations>
			   }

			}

	}
	if (k == '-'){
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ef 58       	subi	r30, 0x8F	; 143
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	8d 32       	cpi	r24, 0x2D	; 45
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <Motor_Change_operations+0x6b4>
    1c46:	17 c2       	rjmp	.+1070   	; 0x2076 <Motor_Change_operations+0xae2>
		PASS();/*call the pass function to send password and check if correct*/
    1c48:	0e 94 1b 09 	call	0x1236	; 0x1236 <PASS>
		if(receive == identical)
    1c4c:	80 91 f8 00 	lds	r24, 0x00F8
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <Motor_Change_operations+0x6c2>
    1c54:	7c c0       	rjmp	.+248    	; 0x1d4e <Motor_Change_operations+0x7ba>
	    {
			while(UART_recieveByte()!= MC2_READY){}
    1c56:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    1c5a:	80 31       	cpi	r24, 0x10	; 16
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <Motor_Change_operations+0x6c2>
			UART_sendByte(change_Password);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a8 e4       	ldi	r26, 0x48	; 72
    1c6a:	b3 e4       	ldi	r27, 0x43	; 67
    1c6c:	8d ab       	std	Y+53, r24	; 0x35
    1c6e:	9e ab       	std	Y+54, r25	; 0x36
    1c70:	af ab       	std	Y+55, r26	; 0x37
    1c72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6d a9       	ldd	r22, Y+53	; 0x35
    1c76:	7e a9       	ldd	r23, Y+54	; 0x36
    1c78:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	89 ab       	std	Y+49, r24	; 0x31
    1c8e:	9a ab       	std	Y+50, r25	; 0x32
    1c90:	ab ab       	std	Y+51, r26	; 0x33
    1c92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c94:	69 a9       	ldd	r22, Y+49	; 0x31
    1c96:	7a a9       	ldd	r23, Y+50	; 0x32
    1c98:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <Motor_Change_operations+0x722>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	98 ab       	std	Y+48, r25	; 0x30
    1cb2:	8f a7       	std	Y+47, r24	; 0x2f
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <Motor_Change_operations+0x7a0>
	else if (__tmp > 65535)
    1cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cba:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <Motor_Change_operations+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	98 ab       	std	Y+48, r25	; 0x30
    1cf4:	8f a7       	std	Y+47, r24	; 0x2f
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <Motor_Change_operations+0x782>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9e a7       	std	Y+46, r25	; 0x2e
    1cfe:	8d a7       	std	Y+45, r24	; 0x2d
    1d00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <Motor_Change_operations+0x770>
    1d08:	9e a7       	std	Y+46, r25	; 0x2e
    1d0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	98 ab       	std	Y+48, r25	; 0x30
    1d14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d18:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <Motor_Change_operations+0x764>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <Motor_Change_operations+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	69 a9       	ldd	r22, Y+49	; 0x31
    1d22:	7a a9       	ldd	r23, Y+50	; 0x32
    1d24:	8b a9       	ldd	r24, Y+51	; 0x33
    1d26:	9c a9       	ldd	r25, Y+52	; 0x34
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	98 ab       	std	Y+48, r25	; 0x30
    1d32:	8f a7       	std	Y+47, r24	; 0x2f
    1d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d36:	98 a9       	ldd	r25, Y+48	; 0x30
    1d38:	9c a7       	std	Y+44, r25	; 0x2c
    1d3a:	8b a7       	std	Y+43, r24	; 0x2b
    1d3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <Motor_Change_operations+0x7ac>
    1d44:	9c a7       	std	Y+44, r25	; 0x2c
    1d46:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			Initializing_pass();
    1d48:	0e 94 a3 05 	call	0xb46	; 0xb46 <Initializing_pass>
    1d4c:	94 c1       	rjmp	.+808    	; 0x2076 <Motor_Change_operations+0xae2>
	     } /*if identical passwords Change password*/
		/*taking password again to check if identical*/
		else if(receive == Not_identical)
    1d4e:	80 91 f8 00 	lds	r24, 0x00F8
    1d52:	88 23       	and	r24, r24
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <Motor_Change_operations+0x7c4>
    1d56:	8f c1       	rjmp	.+798    	; 0x2076 <Motor_Change_operations+0xae2>
	    {

			   PASS();/*call the pass function to send password and check if correct*/
    1d58:	0e 94 1b 09 	call	0x1236	; 0x1236 <PASS>
			   if(receive == identical)
    1d5c:	80 91 f8 00 	lds	r24, 0x00F8
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <Motor_Change_operations+0x7d2>
    1d64:	7c c0       	rjmp	.+248    	; 0x1e5e <Motor_Change_operations+0x8ca>
			   		{
				   while(UART_recieveByte()!= MC2_READY){}
    1d66:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    1d6a:	80 31       	cpi	r24, 0x10	; 16
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <Motor_Change_operations+0x7d2>
				   UART_sendByte(change_Password);
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a8 e4       	ldi	r26, 0x48	; 72
    1d7a:	b3 e4       	ldi	r27, 0x43	; 67
    1d7c:	8f a3       	std	Y+39, r24	; 0x27
    1d7e:	98 a7       	std	Y+40, r25	; 0x28
    1d80:	a9 a7       	std	Y+41, r26	; 0x29
    1d82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	6f a1       	ldd	r22, Y+39	; 0x27
    1d86:	78 a5       	ldd	r23, Y+40	; 0x28
    1d88:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a ef       	ldi	r20, 0xFA	; 250
    1d92:	54 e4       	ldi	r21, 0x44	; 68
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8b a3       	std	Y+35, r24	; 0x23
    1d9e:	9c a3       	std	Y+36, r25	; 0x24
    1da0:	ad a3       	std	Y+37, r26	; 0x25
    1da2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da4:	6b a1       	ldd	r22, Y+35	; 0x23
    1da6:	7c a1       	ldd	r23, Y+36	; 0x24
    1da8:	8d a1       	ldd	r24, Y+37	; 0x25
    1daa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <Motor_Change_operations+0x832>
		__ticks = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9a a3       	std	Y+34, r25	; 0x22
    1dc2:	89 a3       	std	Y+33, r24	; 0x21
    1dc4:	3f c0       	rjmp	.+126    	; 0x1e44 <Motor_Change_operations+0x8b0>
	else if (__tmp > 65535)
    1dc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dca:	8d a1       	ldd	r24, Y+37	; 0x25
    1dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	4c f5       	brge	.+82     	; 0x1e30 <Motor_Change_operations+0x89c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dde:	6f a1       	ldd	r22, Y+39	; 0x27
    1de0:	78 a5       	ldd	r23, Y+40	; 0x28
    1de2:	89 a5       	ldd	r24, Y+41	; 0x29
    1de4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <Motor_Change_operations+0x892>
    1e08:	88 ec       	ldi	r24, 0xC8	; 200
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	98 a3       	std	Y+32, r25	; 0x20
    1e0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e12:	98 a1       	ldd	r25, Y+32	; 0x20
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <Motor_Change_operations+0x880>
    1e18:	98 a3       	std	Y+32, r25	; 0x20
    1e1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	9a a3       	std	Y+34, r25	; 0x22
    1e24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	89 a1       	ldd	r24, Y+33	; 0x21
    1e28:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <Motor_Change_operations+0x874>
    1e2e:	14 c0       	rjmp	.+40     	; 0x1e58 <Motor_Change_operations+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e30:	6b a1       	ldd	r22, Y+35	; 0x23
    1e32:	7c a1       	ldd	r23, Y+36	; 0x24
    1e34:	8d a1       	ldd	r24, Y+37	; 0x25
    1e36:	9e a1       	ldd	r25, Y+38	; 0x26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
    1e44:	89 a1       	ldd	r24, Y+33	; 0x21
    1e46:	9a a1       	ldd	r25, Y+34	; 0x22
    1e48:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <Motor_Change_operations+0x8bc>
    1e54:	9e 8f       	std	Y+30, r25	; 0x1e
    1e56:	8d 8f       	std	Y+29, r24	; 0x1d
				   _delay_ms(200);
				   Initializing_pass();
    1e58:	0e 94 a3 05 	call	0xb46	; 0xb46 <Initializing_pass>
    1e5c:	0c c1       	rjmp	.+536    	; 0x2076 <Motor_Change_operations+0xae2>


				}
			   /*taking password again to check if identical*/
			   else if(receive == Not_identical){
    1e5e:	80 91 f8 00 	lds	r24, 0x00F8
    1e62:	88 23       	and	r24, r24
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <Motor_Change_operations+0x8d4>
    1e66:	07 c1       	rjmp	.+526    	; 0x2076 <Motor_Change_operations+0xae2>
				   PASS();/*call the pass function to send password and check if correct*/
    1e68:	0e 94 1b 09 	call	0x1236	; 0x1236 <PASS>
				   if(receive == identical)
    1e6c:	80 91 f8 00 	lds	r24, 0x00F8
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <Motor_Change_operations+0x8e2>
    1e74:	7c c0       	rjmp	.+248    	; 0x1f6e <Motor_Change_operations+0x9da>
				    {
					   while(UART_recieveByte()!= MC2_READY){}
    1e76:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    1e7a:	80 31       	cpi	r24, 0x10	; 16
    1e7c:	e1 f7       	brne	.-8      	; 0x1e76 <Motor_Change_operations+0x8e2>
					   UART_sendByte(change_Password);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a8 e4       	ldi	r26, 0x48	; 72
    1e8a:	b3 e4       	ldi	r27, 0x43	; 67
    1e8c:	89 8f       	std	Y+25, r24	; 0x19
    1e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e90:	ab 8f       	std	Y+27, r26	; 0x1b
    1e92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	69 8d       	ldd	r22, Y+25	; 0x19
    1e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8d 8b       	std	Y+21, r24	; 0x15
    1eae:	9e 8b       	std	Y+22, r25	; 0x16
    1eb0:	af 8b       	std	Y+23, r26	; 0x17
    1eb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <Motor_Change_operations+0x942>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <Motor_Change_operations+0x9c0>
	else if (__tmp > 65535)
    1ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eda:	8f 89       	ldd	r24, Y+23	; 0x17
    1edc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <Motor_Change_operations+0x9ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <Motor_Change_operations+0x9a2>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9a 8b       	std	Y+18, r25	; 0x12
    1f1e:	89 8b       	std	Y+17, r24	; 0x11
    1f20:	89 89       	ldd	r24, Y+17	; 0x11
    1f22:	9a 89       	ldd	r25, Y+18	; 0x12
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <Motor_Change_operations+0x990>
    1f28:	9a 8b       	std	Y+18, r25	; 0x12
    1f2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8b 89       	ldd	r24, Y+19	; 0x13
    1f38:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <Motor_Change_operations+0x984>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <Motor_Change_operations+0x9d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9c 8b       	std	Y+20, r25	; 0x14
    1f52:	8b 8b       	std	Y+19, r24	; 0x13
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	9c 89       	ldd	r25, Y+20	; 0x14
    1f58:	98 8b       	std	Y+16, r25	; 0x10
    1f5a:	8f 87       	std	Y+15, r24	; 0x0f
    1f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5e:	98 89       	ldd	r25, Y+16	; 0x10
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <Motor_Change_operations+0x9cc>
    1f64:	98 8b       	std	Y+16, r25	; 0x10
    1f66:	8f 87       	std	Y+15, r24	; 0x0f
					   _delay_ms(200);
					   Initializing_pass();
    1f68:	0e 94 a3 05 	call	0xb46	; 0xb46 <Initializing_pass>
    1f6c:	84 c0       	rjmp	.+264    	; 0x2076 <Motor_Change_operations+0xae2>

			   }
				   /*After giving 2 chances to get the correct password hold the system for 1 minute*/
				   else if(receive == Not_identical){
    1f6e:	80 91 f8 00 	lds	r24, 0x00F8
    1f72:	88 23       	and	r24, r24
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <Motor_Change_operations+0x9e4>
    1f76:	7f c0       	rjmp	.+254    	; 0x2076 <Motor_Change_operations+0xae2>
					   UART_sendByte(Buzzer); /* send Buzzer to the other ECU */
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
					   	LCD_clearScreen();
    1f7e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
					   	LCD_displayString("ERROR!!!!");/*Display Error*/
    1f82:	88 ed       	ldi	r24, 0xD8	; 216
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 53 21 	call	0x42a6	; 0x42a6 <LCD_displayString>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e6       	ldi	r25, 0x60	; 96
    1f8e:	aa e6       	ldi	r26, 0x6A	; 106
    1f90:	b7 e4       	ldi	r27, 0x47	; 71
    1f92:	8b 87       	std	Y+11, r24	; 0x0b
    1f94:	9c 87       	std	Y+12, r25	; 0x0c
    1f96:	ad 87       	std	Y+13, r26	; 0x0d
    1f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	8f 83       	std	Y+7, r24	; 0x07
    1fb4:	98 87       	std	Y+8, r25	; 0x08
    1fb6:	a9 87       	std	Y+9, r26	; 0x09
    1fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <Motor_Change_operations+0xa48>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <Motor_Change_operations+0xac6>
	else if (__tmp > 65535)
    1fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fde:	78 85       	ldd	r23, Y+8	; 0x08
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	57 e4       	ldi	r21, 0x47	; 71
    1fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	4c f5       	brge	.+82     	; 0x2046 <Motor_Change_operations+0xab2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	0f c0       	rjmp	.+30     	; 0x203c <Motor_Change_operations+0xaa8>
    201e:	88 ec       	ldi	r24, 0xC8	; 200
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9c 83       	std	Y+4, r25	; 0x04
    2024:	8b 83       	std	Y+3, r24	; 0x03
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <Motor_Change_operations+0xa96>
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	69 f7       	brne	.-38     	; 0x201e <Motor_Change_operations+0xa8a>
    2044:	14 c0       	rjmp	.+40     	; 0x206e <Motor_Change_operations+0xada>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	6f 81       	ldd	r22, Y+7	; 0x07
    2048:	78 85       	ldd	r23, Y+8	; 0x08
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <Motor_Change_operations+0xad2>
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
					   	_delay_ms(60000);
					   	LCD_clearScreen();/*clear LCD*/
    206e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <LCD_clearScreen>
					   	Motor_Change_operations();/*Start function from start*/
    2072:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Motor_Change_operations>
				   }

				}
		}

	}
    2076:	cf 58       	subi	r28, 0x8F	; 143
    2078:	df 4f       	sbci	r29, 0xFF	; 255
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <main>:


int main(void){
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	67 97       	sbiw	r28, 0x17	; 23
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType UART_Configuration={Eight_bit,Disabled,One_bit,9600}; /* configuring the UART as eight bit mode, disabled parity, One stop bit, and baud rate = 9600*/
    20a2:	ce 01       	movw	r24, r28
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	9f 87       	std	Y+15, r25	; 0x0f
    20a8:	8e 87       	std	Y+14, r24	; 0x0e
    20aa:	e0 ef       	ldi	r30, 0xF0	; 240
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	f9 8b       	std	Y+17, r31	; 0x11
    20b0:	e8 8b       	std	Y+16, r30	; 0x10
    20b2:	f7 e0       	ldi	r31, 0x07	; 7
    20b4:	fa 8b       	std	Y+18, r31	; 0x12
    20b6:	e8 89       	ldd	r30, Y+16	; 0x10
    20b8:	f9 89       	ldd	r31, Y+17	; 0x11
    20ba:	00 80       	ld	r0, Z
    20bc:	88 89       	ldd	r24, Y+16	; 0x10
    20be:	99 89       	ldd	r25, Y+17	; 0x11
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	99 8b       	std	Y+17, r25	; 0x11
    20c4:	88 8b       	std	Y+16, r24	; 0x10
    20c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    20c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    20ca:	00 82       	st	Z, r0
    20cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	9f 87       	std	Y+15, r25	; 0x0f
    20d4:	8e 87       	std	Y+14, r24	; 0x0e
    20d6:	9a 89       	ldd	r25, Y+18	; 0x12
    20d8:	91 50       	subi	r25, 0x01	; 1
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	ea 89       	ldd	r30, Y+18	; 0x12
    20de:	ee 23       	and	r30, r30
    20e0:	51 f7       	brne	.-44     	; 0x20b6 <main+0x28>
	UART_init(&UART_Configuration); /*Initializing UART*/
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	0e 94 9d 11 	call	0x233a	; 0x233a <UART_init>
	LCD_init();/*Initializing LCD*/
    20ea:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_init>
	Initializing_pass(); /*calling the initializing function to create password*/
    20ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <Initializing_pass>
	Timer1_ConfigType Configuration2={0,23438,F_CPU_1024,Compare_mode}; /* configuring Timer 1 as initial value = 0, compare value = 23438(3 seconds ), prescaler = 1024, and operate compare mode  */
    20f2:	ce 01       	movw	r24, r28
    20f4:	08 96       	adiw	r24, 0x08	; 8
    20f6:	9c 8b       	std	Y+20, r25	; 0x14
    20f8:	8b 8b       	std	Y+19, r24	; 0x13
    20fa:	ea ee       	ldi	r30, 0xEA	; 234
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	fe 8b       	std	Y+22, r31	; 0x16
    2100:	ed 8b       	std	Y+21, r30	; 0x15
    2102:	f6 e0       	ldi	r31, 0x06	; 6
    2104:	ff 8b       	std	Y+23, r31	; 0x17
    2106:	ed 89       	ldd	r30, Y+21	; 0x15
    2108:	fe 89       	ldd	r31, Y+22	; 0x16
    210a:	00 80       	ld	r0, Z
    210c:	8d 89       	ldd	r24, Y+21	; 0x15
    210e:	9e 89       	ldd	r25, Y+22	; 0x16
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	9e 8b       	std	Y+22, r25	; 0x16
    2114:	8d 8b       	std	Y+21, r24	; 0x15
    2116:	eb 89       	ldd	r30, Y+19	; 0x13
    2118:	fc 89       	ldd	r31, Y+20	; 0x14
    211a:	00 82       	st	Z, r0
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	9f 89       	ldd	r25, Y+23	; 0x17
    2128:	91 50       	subi	r25, 0x01	; 1
    212a:	9f 8b       	std	Y+23, r25	; 0x17
    212c:	ef 89       	ldd	r30, Y+23	; 0x17
    212e:	ee 23       	and	r30, r30
    2130:	51 f7       	brne	.-44     	; 0x2106 <main+0x78>
	Timer1_init(&Configuration2);/*Initializing Timer 1*/
    2132:	ce 01       	movw	r24, r28
    2134:	08 96       	adiw	r24, 0x08	; 8
    2136:	0e 94 11 11 	call	0x2222	; 0x2222 <Timer1_init>
	Timer1_setCallBack(TIMER1_ticks); /*setting the call back function to increment the g_tick*/
    213a:	82 ee       	ldi	r24, 0xE2	; 226
    213c:	98 e0       	ldi	r25, 0x08	; 8
    213e:	0e 94 8b 11 	call	0x2316	; 0x2316 <Timer1_setCallBack>
	SREG |= (1<<7); /*Setting I_bit*/
    2142:	af e5       	ldi	r26, 0x5F	; 95
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	ef e5       	ldi	r30, 0x5F	; 95
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 68       	ori	r24, 0x80	; 128
    214e:	8c 93       	st	X, r24

	while (1)
	{
		Motor_Change_operations();
    2150:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Motor_Change_operations>
    2154:	fd cf       	rjmp	.-6      	; 0x2150 <main+0xc2>

00002156 <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_COMPA_vect)
{
    2156:	1f 92       	push	r1
    2158:	0f 92       	push	r0
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	0f 92       	push	r0
    215e:	11 24       	eor	r1, r1
    2160:	2f 93       	push	r18
    2162:	3f 93       	push	r19
    2164:	4f 93       	push	r20
    2166:	5f 93       	push	r21
    2168:	6f 93       	push	r22
    216a:	7f 93       	push	r23
    216c:	8f 93       	push	r24
    216e:	9f 93       	push	r25
    2170:	af 93       	push	r26
    2172:	bf 93       	push	r27
    2174:	ef 93       	push	r30
    2176:	ff 93       	push	r31
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2180:	80 91 f9 00 	lds	r24, 0x00F9
    2184:	90 91 fa 00 	lds	r25, 0x00FA
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	29 f0       	breq	.+10     	; 0x2196 <__vector_7+0x40>
		{
	/* Call the Call Back function in the application */
			(*g_callBackPtr)();
    218c:	e0 91 f9 00 	lds	r30, 0x00F9
    2190:	f0 91 fa 00 	lds	r31, 0x00FA
    2194:	09 95       	icall
		}
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	bf 91       	pop	r27
    21a0:	af 91       	pop	r26
    21a2:	9f 91       	pop	r25
    21a4:	8f 91       	pop	r24
    21a6:	7f 91       	pop	r23
    21a8:	6f 91       	pop	r22
    21aa:	5f 91       	pop	r21
    21ac:	4f 91       	pop	r20
    21ae:	3f 91       	pop	r19
    21b0:	2f 91       	pop	r18
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0
    21b8:	1f 90       	pop	r1
    21ba:	18 95       	reti

000021bc <__vector_9>:

/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_OVF_vect)
{
    21bc:	1f 92       	push	r1
    21be:	0f 92       	push	r0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	0f 92       	push	r0
    21c4:	11 24       	eor	r1, r1
    21c6:	2f 93       	push	r18
    21c8:	3f 93       	push	r19
    21ca:	4f 93       	push	r20
    21cc:	5f 93       	push	r21
    21ce:	6f 93       	push	r22
    21d0:	7f 93       	push	r23
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	af 93       	push	r26
    21d8:	bf 93       	push	r27
    21da:	ef 93       	push	r30
    21dc:	ff 93       	push	r31
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    21e6:	80 91 f9 00 	lds	r24, 0x00F9
    21ea:	90 91 fa 00 	lds	r25, 0x00FA
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	29 f0       	breq	.+10     	; 0x21fc <__vector_9+0x40>
		{
	/* Call the Call Back function in the application  */
			(*g_callBackPtr)();
    21f2:	e0 91 f9 00 	lds	r30, 0x00F9
    21f6:	f0 91 fa 00 	lds	r31, 0x00FA
    21fa:	09 95       	icall
		}
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	bf 91       	pop	r27
    2206:	af 91       	pop	r26
    2208:	9f 91       	pop	r25
    220a:	8f 91       	pop	r24
    220c:	7f 91       	pop	r23
    220e:	6f 91       	pop	r22
    2210:	5f 91       	pop	r21
    2212:	4f 91       	pop	r20
    2214:	3f 91       	pop	r19
    2216:	2f 91       	pop	r18
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <Timer1_init+0x6>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = (Config_Ptr->initial_value); /*Initializing The TCNT Register with the initial value*/
    2230:	ac e4       	ldi	r26, 0x4C	; 76
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e9 81       	ldd	r30, Y+1	; 0x01
    2236:	fa 81       	ldd	r31, Y+2	; 0x02
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	9c 93       	st	X, r25
    2240:	8e 93       	st	-X, r24

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler); /*setting the prescaler */
    2242:	ae e4       	ldi	r26, 0x4E	; 78
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ee e4       	ldi	r30, 0x4E	; 78
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	98 2f       	mov	r25, r24
    224e:	98 7f       	andi	r25, 0xF8	; 248
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	84 81       	ldd	r24, Z+4	; 0x04
    2256:	89 2b       	or	r24, r25
    2258:	8c 93       	st	X, r24
	if ((Config_Ptr->mode)== Normal_mode )
    225a:	e9 81       	ldd	r30, Y+1	; 0x01
    225c:	fa 81       	ldd	r31, Y+2	; 0x02
    225e:	85 81       	ldd	r24, Z+5	; 0x05
    2260:	88 23       	and	r24, r24
    2262:	61 f4       	brne	.+24     	; 0x227c <Timer1_init+0x5a>
	{
		TIMSK |= (1<<TOIE1);/*Enabling overflow interrupt*/
    2264:	a9 e5       	ldi	r26, 0x59	; 89
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e9 e5       	ldi	r30, 0x59	; 89
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	84 60       	ori	r24, 0x04	; 4
    2270:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A) | (1<<FOC1B)  ; /*setting two registers in case of no PWM*/
    2272:	ef e4       	ldi	r30, 0x4F	; 79
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8c e0       	ldi	r24, 0x0C	; 12
    2278:	80 83       	st	Z, r24
    227a:	25 c0       	rjmp	.+74     	; 0x22c6 <Timer1_init+0xa4>
	}
	else if ( (Config_Ptr->mode)== Compare_mode)
    227c:	e9 81       	ldd	r30, Y+1	; 0x01
    227e:	fa 81       	ldd	r31, Y+2	; 0x02
    2280:	85 81       	ldd	r24, Z+5	; 0x05
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	01 f5       	brne	.+64     	; 0x22c6 <Timer1_init+0xa4>
	{
		OCR1A = (Config_Ptr->compare_value); /* Set the compare value */
    2286:	aa e4       	ldi	r26, 0x4A	; 74
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e9 81       	ldd	r30, Y+1	; 0x01
    228c:	fa 81       	ldd	r31, Y+2	; 0x02
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	11 96       	adiw	r26, 0x01	; 1
    2294:	9c 93       	st	X, r25
    2296:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /*Enabling compare mode interrupt*/
    2298:	a9 e5       	ldi	r26, 0x59	; 89
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e9 e5       	ldi	r30, 0x59	; 89
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 61       	ori	r24, 0x10	; 16
    22a4:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A)| (1<<FOC1B) ;/*setting two registers in case of no PWM*/
    22a6:	ef e4       	ldi	r30, 0x4F	; 79
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	8c e0       	ldi	r24, 0x0C	; 12
    22ac:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
    22ae:	ae e4       	ldi	r26, 0x4E	; 78
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	ee e4       	ldi	r30, 0x4E	; 78
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 60       	ori	r24, 0x08	; 8
    22ba:	8c 93       	st	X, r24
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	65 e0       	ldi	r22, 0x05	; 5
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	}
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <Timer1_deInit>:
void Timer1_deInit(void){
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
	/*clearing all registers */
	TCCR1A = 0;
    22d8:	ef e4       	ldi	r30, 0x4F	; 79
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	10 82       	st	Z, r1
	TCCR1B = 0;
    22de:	ee e4       	ldi	r30, 0x4E	; 78
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	10 82       	st	Z, r1
	TCNT1 = 0;
    22e4:	ec e4       	ldi	r30, 0x4C	; 76
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	11 82       	std	Z+1, r1	; 0x01
    22ea:	10 82       	st	Z, r1
	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    22ec:	a9 e5       	ldi	r26, 0x59	; 89
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e9 e5       	ldi	r30, 0x59	; 89
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8f 7d       	andi	r24, 0xDF	; 223
    22f8:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
    22fa:	a9 e5       	ldi	r26, 0x59	; 89
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e9 e5       	ldi	r30, 0x59	; 89
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	8f 7e       	andi	r24, 0xEF	; 239
    2306:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2308:	10 92 fa 00 	sts	0x00FA, r1
    230c:	10 92 f9 00 	sts	0x00F9, r1
}
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <Timer1_setCallBack+0x6>
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	90 93 fa 00 	sts	0x00FA, r25
    232c:	80 93 f9 00 	sts	0x00F9, r24
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <UART_init+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <UART_init+0x8>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    234a:	1a 82       	std	Y+2, r1	; 0x02
    234c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    234e:	eb e2       	ldi	r30, 0x2B	; 43
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	80 83       	st	Z, r24
	/*putting parity , bit mode, stop bit in thier places in UCSRC register for bit-data =9*/
	if ((Config_Ptr->bit_data)== Nine_bit )
    2356:	eb 81       	ldd	r30, Y+3	; 0x03
    2358:	fc 81       	ldd	r31, Y+4	; 0x04
    235a:	80 81       	ld	r24, Z
    235c:	84 30       	cpi	r24, 0x04	; 4
    235e:	39 f5       	brne	.+78     	; 0x23ae <UART_init+0x74>
	{
		UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<UCSZ2) ;
    2360:	ea e2       	ldi	r30, 0x2A	; 42
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	8c e1       	ldi	r24, 0x1C	; 28
    2366:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1) | ((UCSRC & 0xF7)|(Config_Ptr->stop_bit) << 3)|((Config_Ptr->parity) << 4);
    2368:	a0 e4       	ldi	r26, 0x40	; 64
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e0 e4       	ldi	r30, 0x40	; 64
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	28 2f       	mov	r18, r24
    2374:	27 7f       	andi	r18, 0xF7	; 247
    2376:	eb 81       	ldd	r30, Y+3	; 0x03
    2378:	fc 81       	ldd	r31, Y+4	; 0x04
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	82 2b       	or	r24, r18
    238e:	28 2f       	mov	r18, r24
    2390:	26 68       	ori	r18, 0x86	; 134
    2392:	eb 81       	ldd	r30, Y+3	; 0x03
    2394:	fc 81       	ldd	r31, Y+4	; 0x04
    2396:	81 81       	ldd	r24, Z+1	; 0x01
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	82 95       	swap	r24
    239e:	92 95       	swap	r25
    23a0:	90 7f       	andi	r25, 0xF0	; 240
    23a2:	98 27       	eor	r25, r24
    23a4:	80 7f       	andi	r24, 0xF0	; 240
    23a6:	98 27       	eor	r25, r24
    23a8:	82 2b       	or	r24, r18
    23aa:	8c 93       	st	X, r24
    23ac:	3d c0       	rjmp	.+122    	; 0x2428 <UART_init+0xee>
	}
	/*putting parity , bit mode, stop bit in thier places in UCSRC register for bit-datas =5,6,7,8*/
	else
	{
		UCSRB = (1<<RXEN) | (1<<TXEN);
    23ae:	ea e2       	ldi	r30, 0x2A	; 42
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	88 e1       	ldi	r24, 0x18	; 24
    23b4:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL);
    23b6:	e0 e4       	ldi	r30, 0x40	; 64
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 e8       	ldi	r24, 0x80	; 128
    23bc:	80 83       	st	Z, r24
		UCSRC = ((UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1))|((UCSRC & 0xCF) | ((Config_Ptr->parity)<<4))|((UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3));
    23be:	a0 e4       	ldi	r26, 0x40	; 64
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e0 e4       	ldi	r30, 0x40	; 64
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	28 2f       	mov	r18, r24
    23ca:	29 7f       	andi	r18, 0xF9	; 249
    23cc:	eb 81       	ldd	r30, Y+3	; 0x03
    23ce:	fc 81       	ldd	r31, Y+4	; 0x04
    23d0:	80 81       	ld	r24, Z
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	32 2f       	mov	r19, r18
    23dc:	38 2b       	or	r19, r24
    23de:	e0 e4       	ldi	r30, 0x40	; 64
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	28 2f       	mov	r18, r24
    23e6:	2f 7c       	andi	r18, 0xCF	; 207
    23e8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ea:	fc 81       	ldd	r31, Y+4	; 0x04
    23ec:	81 81       	ldd	r24, Z+1	; 0x01
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	82 95       	swap	r24
    23f4:	92 95       	swap	r25
    23f6:	90 7f       	andi	r25, 0xF0	; 240
    23f8:	98 27       	eor	r25, r24
    23fa:	80 7f       	andi	r24, 0xF0	; 240
    23fc:	98 27       	eor	r25, r24
    23fe:	82 2b       	or	r24, r18
    2400:	38 2b       	or	r19, r24
    2402:	e0 e4       	ldi	r30, 0x40	; 64
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	28 2f       	mov	r18, r24
    240a:	27 7f       	andi	r18, 0xF7	; 247
    240c:	eb 81       	ldd	r30, Y+3	; 0x03
    240e:	fc 81       	ldd	r31, Y+4	; 0x04
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	82 2b       	or	r24, r18
    2424:	83 2b       	or	r24, r19
    2426:	8c 93       	st	X, r24
	}



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2428:	eb 81       	ldd	r30, Y+3	; 0x03
    242a:	fc 81       	ldd	r31, Y+4	; 0x04
    242c:	83 81       	ldd	r24, Z+3	; 0x03
    242e:	94 81       	ldd	r25, Z+4	; 0x04
    2430:	a5 81       	ldd	r26, Z+5	; 0x05
    2432:	b6 81       	ldd	r27, Z+6	; 0x06
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	aa 1f       	adc	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	aa 1f       	adc	r26, r26
    2442:	bb 1f       	adc	r27, r27
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	aa 1f       	adc	r26, r26
    244a:	bb 1f       	adc	r27, r27
    244c:	9c 01       	movw	r18, r24
    244e:	ad 01       	movw	r20, r26
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	92 e1       	ldi	r25, 0x12	; 18
    2454:	aa e7       	ldi	r26, 0x7A	; 122
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 04 22 	call	0x4408	; 0x4408 <__udivmodsi4>
    2460:	da 01       	movw	r26, r20
    2462:	c9 01       	movw	r24, r18
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    246a:	e0 e4       	ldi	r30, 0x40	; 64
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	89 2f       	mov	r24, r25
    2474:	99 27       	eor	r25, r25
    2476:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2478:	e9 e2       	ldi	r30, 0x29	; 41
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	80 83       	st	Z, r24
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	0f 92       	push	r0
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    249a:	eb e2       	ldi	r30, 0x2B	; 43
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	80 72       	andi	r24, 0x20	; 32
    24a6:	90 70       	andi	r25, 0x00	; 0
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	b9 f3       	breq	.-18     	; 0x249a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24ac:	ec e2       	ldi	r30, 0x2C	; 44
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24c4:	eb e2       	ldi	r30, 0x2B	; 43
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	88 23       	and	r24, r24
    24cc:	dc f7       	brge	.-10     	; 0x24c4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    24ce:	ec e2       	ldi	r30, 0x2C	; 44
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <UART_sendString+0x6>
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9b 83       	std	Y+3, r25	; 0x03
    24e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24ea:	19 82       	std	Y+1, r1	; 0x01
    24ec:	0e c0       	rjmp	.+28     	; 0x250a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	80 81       	ld	r24, Z
    2500:	0e 94 47 12 	call	0x248e	; 0x248e <UART_sendByte>
		i++;
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	fc 01       	movw	r30, r24
    2516:	e2 0f       	add	r30, r18
    2518:	f3 1f       	adc	r31, r19
    251a:	80 81       	ld	r24, Z
    251c:	88 23       	and	r24, r24
    251e:	39 f7       	brne	.-50     	; 0x24ee <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <UART_receiveString+0xa>
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9b 83       	std	Y+3, r25	; 0x03
    253e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2540:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	8c 01       	movw	r16, r24
    254e:	02 0f       	add	r16, r18
    2550:	13 1f       	adc	r17, r19
    2552:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    2556:	f8 01       	movw	r30, r16
    2558:	80 83       	st	Z, r24
    255a:	0f c0       	rjmp	.+30     	; 0x257a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	8f 5f       	subi	r24, 0xFF	; 255
    2560:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	8c 01       	movw	r16, r24
    256e:	02 0f       	add	r16, r18
    2570:	13 1f       	adc	r17, r19
    2572:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_recieveByte>
    2576:	f8 01       	movw	r30, r16
    2578:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	9b 81       	ldd	r25, Y+3	; 0x03
    2584:	fc 01       	movw	r30, r24
    2586:	e2 0f       	add	r30, r18
    2588:	f3 1f       	adc	r31, r19
    258a:	80 81       	ld	r24, Z
    258c:	83 32       	cpi	r24, 0x23	; 35
    258e:	31 f7       	brne	.-52     	; 0x255c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	9b 81       	ldd	r25, Y+3	; 0x03
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	10 82       	st	Z, r1
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	08 95       	ret

000025b2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <GPIO_setupPinDirection+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <GPIO_setupPinDirection+0x8>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	6a 83       	std	Y+2, r22	; 0x02
    25c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	88 30       	cpi	r24, 0x08	; 8
    25ca:	08 f0       	brcs	.+2      	; 0x25ce <GPIO_setupPinDirection+0x1c>
    25cc:	d5 c0       	rjmp	.+426    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	84 30       	cpi	r24, 0x04	; 4
    25d2:	08 f0       	brcs	.+2      	; 0x25d6 <GPIO_setupPinDirection+0x24>
    25d4:	d1 c0       	rjmp	.+418    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	3d 83       	std	Y+5, r19	; 0x05
    25de:	2c 83       	std	Y+4, r18	; 0x04
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	9d 81       	ldd	r25, Y+5	; 0x05
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	91 05       	cpc	r25, r1
    25e8:	09 f4       	brne	.+2      	; 0x25ec <GPIO_setupPinDirection+0x3a>
    25ea:	43 c0       	rjmp	.+134    	; 0x2672 <GPIO_setupPinDirection+0xc0>
    25ec:	2c 81       	ldd	r18, Y+4	; 0x04
    25ee:	3d 81       	ldd	r19, Y+5	; 0x05
    25f0:	22 30       	cpi	r18, 0x02	; 2
    25f2:	31 05       	cpc	r19, r1
    25f4:	2c f4       	brge	.+10     	; 0x2600 <GPIO_setupPinDirection+0x4e>
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	9d 81       	ldd	r25, Y+5	; 0x05
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	71 f0       	breq	.+28     	; 0x261a <GPIO_setupPinDirection+0x68>
    25fe:	bc c0       	rjmp	.+376    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
    2600:	2c 81       	ldd	r18, Y+4	; 0x04
    2602:	3d 81       	ldd	r19, Y+5	; 0x05
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	09 f4       	brne	.+2      	; 0x260c <GPIO_setupPinDirection+0x5a>
    260a:	5f c0       	rjmp	.+190    	; 0x26ca <GPIO_setupPinDirection+0x118>
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	83 30       	cpi	r24, 0x03	; 3
    2612:	91 05       	cpc	r25, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <GPIO_setupPinDirection+0x66>
    2616:	85 c0       	rjmp	.+266    	; 0x2722 <GPIO_setupPinDirection+0x170>
    2618:	af c0       	rjmp	.+350    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	a1 f4       	brne	.+40     	; 0x2648 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2620:	aa e3       	ldi	r26, 0x3A	; 58
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	ea e3       	ldi	r30, 0x3A	; 58
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	48 2f       	mov	r20, r24
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	02 2e       	mov	r0, r18
    2638:	02 c0       	rjmp	.+4      	; 0x263e <GPIO_setupPinDirection+0x8c>
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	0a 94       	dec	r0
    2640:	e2 f7       	brpl	.-8      	; 0x263a <GPIO_setupPinDirection+0x88>
    2642:	84 2b       	or	r24, r20
    2644:	8c 93       	st	X, r24
    2646:	98 c0       	rjmp	.+304    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2648:	aa e3       	ldi	r26, 0x3A	; 58
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ea e3       	ldi	r30, 0x3A	; 58
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	48 2f       	mov	r20, r24
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 2e       	mov	r0, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <GPIO_setupPinDirection+0xb4>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <GPIO_setupPinDirection+0xb0>
    266a:	80 95       	com	r24
    266c:	84 23       	and	r24, r20
    266e:	8c 93       	st	X, r24
    2670:	83 c0       	rjmp	.+262    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	a1 f4       	brne	.+40     	; 0x26a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2678:	a7 e3       	ldi	r26, 0x37	; 55
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e7 e3       	ldi	r30, 0x37	; 55
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	48 2f       	mov	r20, r24
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	02 2e       	mov	r0, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <GPIO_setupPinDirection+0xe4>
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	0a 94       	dec	r0
    2698:	e2 f7       	brpl	.-8      	; 0x2692 <GPIO_setupPinDirection+0xe0>
    269a:	84 2b       	or	r24, r20
    269c:	8c 93       	st	X, r24
    269e:	6c c0       	rjmp	.+216    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    26a0:	a7 e3       	ldi	r26, 0x37	; 55
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e7 e3       	ldi	r30, 0x37	; 55
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	48 2f       	mov	r20, r24
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	02 2e       	mov	r0, r18
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <GPIO_setupPinDirection+0x10c>
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	0a 94       	dec	r0
    26c0:	e2 f7       	brpl	.-8      	; 0x26ba <GPIO_setupPinDirection+0x108>
    26c2:	80 95       	com	r24
    26c4:	84 23       	and	r24, r20
    26c6:	8c 93       	st	X, r24
    26c8:	57 c0       	rjmp	.+174    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	a1 f4       	brne	.+40     	; 0x26f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    26d0:	a4 e3       	ldi	r26, 0x34	; 52
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e4 e3       	ldi	r30, 0x34	; 52
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	48 2f       	mov	r20, r24
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 2e       	mov	r0, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <GPIO_setupPinDirection+0x13c>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <GPIO_setupPinDirection+0x138>
    26f2:	84 2b       	or	r24, r20
    26f4:	8c 93       	st	X, r24
    26f6:	40 c0       	rjmp	.+128    	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    26f8:	a4 e3       	ldi	r26, 0x34	; 52
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e4 e3       	ldi	r30, 0x34	; 52
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	48 2f       	mov	r20, r24
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <GPIO_setupPinDirection+0x164>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <GPIO_setupPinDirection+0x160>
    271a:	80 95       	com	r24
    271c:	84 23       	and	r24, r20
    271e:	8c 93       	st	X, r24
    2720:	2b c0       	rjmp	.+86     	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	a1 f4       	brne	.+40     	; 0x2750 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2728:	a1 e3       	ldi	r26, 0x31	; 49
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e1 e3       	ldi	r30, 0x31	; 49
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	48 2f       	mov	r20, r24
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	02 2e       	mov	r0, r18
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <GPIO_setupPinDirection+0x194>
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	0a 94       	dec	r0
    2748:	e2 f7       	brpl	.-8      	; 0x2742 <GPIO_setupPinDirection+0x190>
    274a:	84 2b       	or	r24, r20
    274c:	8c 93       	st	X, r24
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2750:	a1 e3       	ldi	r26, 0x31	; 49
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e1 e3       	ldi	r30, 0x31	; 49
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	48 2f       	mov	r20, r24
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	02 2e       	mov	r0, r18
    2768:	02 c0       	rjmp	.+4      	; 0x276e <GPIO_setupPinDirection+0x1bc>
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	0a 94       	dec	r0
    2770:	e2 f7       	brpl	.-8      	; 0x276a <GPIO_setupPinDirection+0x1b8>
    2772:	80 95       	com	r24
    2774:	84 23       	and	r24, r20
    2776:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <GPIO_writePin+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <GPIO_writePin+0x8>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	6a 83       	std	Y+2, r22	; 0x02
    279a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	88 30       	cpi	r24, 0x08	; 8
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <GPIO_writePin+0x1c>
    27a2:	d5 c0       	rjmp	.+426    	; 0x294e <GPIO_writePin+0x1c6>
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <GPIO_writePin+0x24>
    27aa:	d1 c0       	rjmp	.+418    	; 0x294e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3d 83       	std	Y+5, r19	; 0x05
    27b4:	2c 83       	std	Y+4, r18	; 0x04
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	91 05       	cpc	r25, r1
    27be:	09 f4       	brne	.+2      	; 0x27c2 <GPIO_writePin+0x3a>
    27c0:	43 c0       	rjmp	.+134    	; 0x2848 <GPIO_writePin+0xc0>
    27c2:	2c 81       	ldd	r18, Y+4	; 0x04
    27c4:	3d 81       	ldd	r19, Y+5	; 0x05
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <GPIO_writePin+0x4e>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	9d 81       	ldd	r25, Y+5	; 0x05
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	71 f0       	breq	.+28     	; 0x27f0 <GPIO_writePin+0x68>
    27d4:	bc c0       	rjmp	.+376    	; 0x294e <GPIO_writePin+0x1c6>
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	09 f4       	brne	.+2      	; 0x27e2 <GPIO_writePin+0x5a>
    27e0:	5f c0       	rjmp	.+190    	; 0x28a0 <GPIO_writePin+0x118>
    27e2:	8c 81       	ldd	r24, Y+4	; 0x04
    27e4:	9d 81       	ldd	r25, Y+5	; 0x05
    27e6:	83 30       	cpi	r24, 0x03	; 3
    27e8:	91 05       	cpc	r25, r1
    27ea:	09 f4       	brne	.+2      	; 0x27ee <GPIO_writePin+0x66>
    27ec:	85 c0       	rjmp	.+266    	; 0x28f8 <GPIO_writePin+0x170>
    27ee:	af c0       	rjmp	.+350    	; 0x294e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	a1 f4       	brne	.+40     	; 0x281e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    27f6:	ab e3       	ldi	r26, 0x3B	; 59
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	eb e3       	ldi	r30, 0x3B	; 59
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	48 2f       	mov	r20, r24
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	02 2e       	mov	r0, r18
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <GPIO_writePin+0x8c>
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	0a 94       	dec	r0
    2816:	e2 f7       	brpl	.-8      	; 0x2810 <GPIO_writePin+0x88>
    2818:	84 2b       	or	r24, r20
    281a:	8c 93       	st	X, r24
    281c:	98 c0       	rjmp	.+304    	; 0x294e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    281e:	ab e3       	ldi	r26, 0x3B	; 59
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	eb e3       	ldi	r30, 0x3B	; 59
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	48 2f       	mov	r20, r24
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	02 2e       	mov	r0, r18
    2836:	02 c0       	rjmp	.+4      	; 0x283c <GPIO_writePin+0xb4>
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	0a 94       	dec	r0
    283e:	e2 f7       	brpl	.-8      	; 0x2838 <GPIO_writePin+0xb0>
    2840:	80 95       	com	r24
    2842:	84 23       	and	r24, r20
    2844:	8c 93       	st	X, r24
    2846:	83 c0       	rjmp	.+262    	; 0x294e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	81 30       	cpi	r24, 0x01	; 1
    284c:	a1 f4       	brne	.+40     	; 0x2876 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    284e:	a8 e3       	ldi	r26, 0x38	; 56
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e8 e3       	ldi	r30, 0x38	; 56
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	48 2f       	mov	r20, r24
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	02 2e       	mov	r0, r18
    2866:	02 c0       	rjmp	.+4      	; 0x286c <GPIO_writePin+0xe4>
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	0a 94       	dec	r0
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <GPIO_writePin+0xe0>
    2870:	84 2b       	or	r24, r20
    2872:	8c 93       	st	X, r24
    2874:	6c c0       	rjmp	.+216    	; 0x294e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2876:	a8 e3       	ldi	r26, 0x38	; 56
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e8 e3       	ldi	r30, 0x38	; 56
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	48 2f       	mov	r20, r24
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	02 2e       	mov	r0, r18
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <GPIO_writePin+0x10c>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	0a 94       	dec	r0
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <GPIO_writePin+0x108>
    2898:	80 95       	com	r24
    289a:	84 23       	and	r24, r20
    289c:	8c 93       	st	X, r24
    289e:	57 c0       	rjmp	.+174    	; 0x294e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	a1 f4       	brne	.+40     	; 0x28ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    28a6:	a5 e3       	ldi	r26, 0x35	; 53
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e5 e3       	ldi	r30, 0x35	; 53
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <GPIO_writePin+0x13c>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <GPIO_writePin+0x138>
    28c8:	84 2b       	or	r24, r20
    28ca:	8c 93       	st	X, r24
    28cc:	40 c0       	rjmp	.+128    	; 0x294e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    28ce:	a5 e3       	ldi	r26, 0x35	; 53
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e5 e3       	ldi	r30, 0x35	; 53
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	48 2f       	mov	r20, r24
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	02 2e       	mov	r0, r18
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <GPIO_writePin+0x164>
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	0a 94       	dec	r0
    28ee:	e2 f7       	brpl	.-8      	; 0x28e8 <GPIO_writePin+0x160>
    28f0:	80 95       	com	r24
    28f2:	84 23       	and	r24, r20
    28f4:	8c 93       	st	X, r24
    28f6:	2b c0       	rjmp	.+86     	; 0x294e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	a1 f4       	brne	.+40     	; 0x2926 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    28fe:	a2 e3       	ldi	r26, 0x32	; 50
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e2 e3       	ldi	r30, 0x32	; 50
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	48 2f       	mov	r20, r24
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	02 2e       	mov	r0, r18
    2916:	02 c0       	rjmp	.+4      	; 0x291c <GPIO_writePin+0x194>
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	0a 94       	dec	r0
    291e:	e2 f7       	brpl	.-8      	; 0x2918 <GPIO_writePin+0x190>
    2920:	84 2b       	or	r24, r20
    2922:	8c 93       	st	X, r24
    2924:	14 c0       	rjmp	.+40     	; 0x294e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2926:	a2 e3       	ldi	r26, 0x32	; 50
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e2 e3       	ldi	r30, 0x32	; 50
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	48 2f       	mov	r20, r24
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	02 2e       	mov	r0, r18
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <GPIO_writePin+0x1bc>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	0a 94       	dec	r0
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <GPIO_writePin+0x1b8>
    2948:	80 95       	com	r24
    294a:	84 23       	and	r24, r20
    294c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	00 d0       	rcall	.+0      	; 0x2964 <GPIO_readPin+0x6>
    2964:	00 d0       	rcall	.+0      	; 0x2966 <GPIO_readPin+0x8>
    2966:	0f 92       	push	r0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	8a 83       	std	Y+2, r24	; 0x02
    296e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2970:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	88 30       	cpi	r24, 0x08	; 8
    2976:	08 f0       	brcs	.+2      	; 0x297a <GPIO_readPin+0x1c>
    2978:	84 c0       	rjmp	.+264    	; 0x2a82 <GPIO_readPin+0x124>
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	08 f0       	brcs	.+2      	; 0x2982 <GPIO_readPin+0x24>
    2980:	80 c0       	rjmp	.+256    	; 0x2a82 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	3d 83       	std	Y+5, r19	; 0x05
    298a:	2c 83       	std	Y+4, r18	; 0x04
    298c:	4c 81       	ldd	r20, Y+4	; 0x04
    298e:	5d 81       	ldd	r21, Y+5	; 0x05
    2990:	41 30       	cpi	r20, 0x01	; 1
    2992:	51 05       	cpc	r21, r1
    2994:	79 f1       	breq	.+94     	; 0x29f4 <GPIO_readPin+0x96>
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	82 30       	cpi	r24, 0x02	; 2
    299c:	91 05       	cpc	r25, r1
    299e:	34 f4       	brge	.+12     	; 0x29ac <GPIO_readPin+0x4e>
    29a0:	2c 81       	ldd	r18, Y+4	; 0x04
    29a2:	3d 81       	ldd	r19, Y+5	; 0x05
    29a4:	21 15       	cp	r18, r1
    29a6:	31 05       	cpc	r19, r1
    29a8:	69 f0       	breq	.+26     	; 0x29c4 <GPIO_readPin+0x66>
    29aa:	6b c0       	rjmp	.+214    	; 0x2a82 <GPIO_readPin+0x124>
    29ac:	4c 81       	ldd	r20, Y+4	; 0x04
    29ae:	5d 81       	ldd	r21, Y+5	; 0x05
    29b0:	42 30       	cpi	r20, 0x02	; 2
    29b2:	51 05       	cpc	r21, r1
    29b4:	b9 f1       	breq	.+110    	; 0x2a24 <GPIO_readPin+0xc6>
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	83 30       	cpi	r24, 0x03	; 3
    29bc:	91 05       	cpc	r25, r1
    29be:	09 f4       	brne	.+2      	; 0x29c2 <GPIO_readPin+0x64>
    29c0:	49 c0       	rjmp	.+146    	; 0x2a54 <GPIO_readPin+0xf6>
    29c2:	5f c0       	rjmp	.+190    	; 0x2a82 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    29c4:	e9 e3       	ldi	r30, 0x39	; 57
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	a9 01       	movw	r20, r18
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <GPIO_readPin+0x7e>
    29d8:	55 95       	asr	r21
    29da:	47 95       	ror	r20
    29dc:	8a 95       	dec	r24
    29de:	e2 f7       	brpl	.-8      	; 0x29d8 <GPIO_readPin+0x7a>
    29e0:	ca 01       	movw	r24, r20
    29e2:	81 70       	andi	r24, 0x01	; 1
    29e4:	90 70       	andi	r25, 0x00	; 0
    29e6:	88 23       	and	r24, r24
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	49 c0       	rjmp	.+146    	; 0x2a82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    29f0:	19 82       	std	Y+1, r1	; 0x01
    29f2:	47 c0       	rjmp	.+142    	; 0x2a82 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    29f4:	e6 e3       	ldi	r30, 0x36	; 54
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <GPIO_readPin+0xae>
    2a08:	55 95       	asr	r21
    2a0a:	47 95       	ror	r20
    2a0c:	8a 95       	dec	r24
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <GPIO_readPin+0xaa>
    2a10:	ca 01       	movw	r24, r20
    2a12:	81 70       	andi	r24, 0x01	; 1
    2a14:	90 70       	andi	r25, 0x00	; 0
    2a16:	88 23       	and	r24, r24
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	31 c0       	rjmp	.+98     	; 0x2a82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a20:	19 82       	std	Y+1, r1	; 0x01
    2a22:	2f c0       	rjmp	.+94     	; 0x2a82 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2a24:	e3 e3       	ldi	r30, 0x33	; 51
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	88 2f       	mov	r24, r24
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a9 01       	movw	r20, r18
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <GPIO_readPin+0xde>
    2a38:	55 95       	asr	r21
    2a3a:	47 95       	ror	r20
    2a3c:	8a 95       	dec	r24
    2a3e:	e2 f7       	brpl	.-8      	; 0x2a38 <GPIO_readPin+0xda>
    2a40:	ca 01       	movw	r24, r20
    2a42:	81 70       	andi	r24, 0x01	; 1
    2a44:	90 70       	andi	r25, 0x00	; 0
    2a46:	88 23       	and	r24, r24
    2a48:	19 f0       	breq	.+6      	; 0x2a50 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	19 c0       	rjmp	.+50     	; 0x2a82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	17 c0       	rjmp	.+46     	; 0x2a82 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2a54:	e0 e3       	ldi	r30, 0x30	; 48
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	a9 01       	movw	r20, r18
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <GPIO_readPin+0x10e>
    2a68:	55 95       	asr	r21
    2a6a:	47 95       	ror	r20
    2a6c:	8a 95       	dec	r24
    2a6e:	e2 f7       	brpl	.-8      	; 0x2a68 <GPIO_readPin+0x10a>
    2a70:	ca 01       	movw	r24, r20
    2a72:	81 70       	andi	r24, 0x01	; 1
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	88 23       	and	r24, r24
    2a78:	19 f0       	breq	.+6      	; 0x2a80 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a80:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <GPIO_setupPortDirection+0x6>
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <GPIO_setupPortDirection+0x8>
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	84 30       	cpi	r24, 0x04	; 4
    2aa8:	90 f5       	brcc	.+100    	; 0x2b0e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	28 2f       	mov	r18, r24
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	3c 83       	std	Y+4, r19	; 0x04
    2ab2:	2b 83       	std	Y+3, r18	; 0x03
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	91 05       	cpc	r25, r1
    2abc:	d1 f0       	breq	.+52     	; 0x2af2 <GPIO_setupPortDirection+0x5e>
    2abe:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac2:	22 30       	cpi	r18, 0x02	; 2
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	2c f4       	brge	.+10     	; 0x2ad2 <GPIO_setupPortDirection+0x3e>
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	61 f0       	breq	.+24     	; 0x2ae8 <GPIO_setupPortDirection+0x54>
    2ad0:	1e c0       	rjmp	.+60     	; 0x2b0e <GPIO_setupPortDirection+0x7a>
    2ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ad6:	22 30       	cpi	r18, 0x02	; 2
    2ad8:	31 05       	cpc	r19, r1
    2ada:	81 f0       	breq	.+32     	; 0x2afc <GPIO_setupPortDirection+0x68>
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae0:	83 30       	cpi	r24, 0x03	; 3
    2ae2:	91 05       	cpc	r25, r1
    2ae4:	81 f0       	breq	.+32     	; 0x2b06 <GPIO_setupPortDirection+0x72>
    2ae6:	13 c0       	rjmp	.+38     	; 0x2b0e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2ae8:	ea e3       	ldi	r30, 0x3A	; 58
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	80 83       	st	Z, r24
    2af0:	0e c0       	rjmp	.+28     	; 0x2b0e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2af2:	e7 e3       	ldi	r30, 0x37	; 55
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	80 83       	st	Z, r24
    2afa:	09 c0       	rjmp	.+18     	; 0x2b0e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2afc:	e4 e3       	ldi	r30, 0x34	; 52
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	80 83       	st	Z, r24
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2b06:	e1 e3       	ldi	r30, 0x31	; 49
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <GPIO_writePort+0x6>
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <GPIO_writePort+0x8>
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	84 30       	cpi	r24, 0x04	; 4
    2b30:	90 f5       	brcc	.+100    	; 0x2b96 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	3c 83       	std	Y+4, r19	; 0x04
    2b3a:	2b 83       	std	Y+3, r18	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	91 05       	cpc	r25, r1
    2b44:	d1 f0       	breq	.+52     	; 0x2b7a <GPIO_writePort+0x5e>
    2b46:	2b 81       	ldd	r18, Y+3	; 0x03
    2b48:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4a:	22 30       	cpi	r18, 0x02	; 2
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <GPIO_writePort+0x3e>
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	61 f0       	breq	.+24     	; 0x2b70 <GPIO_writePort+0x54>
    2b58:	1e c0       	rjmp	.+60     	; 0x2b96 <GPIO_writePort+0x7a>
    2b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	31 05       	cpc	r19, r1
    2b62:	81 f0       	breq	.+32     	; 0x2b84 <GPIO_writePort+0x68>
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	83 30       	cpi	r24, 0x03	; 3
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	81 f0       	breq	.+32     	; 0x2b8e <GPIO_writePort+0x72>
    2b6e:	13 c0       	rjmp	.+38     	; 0x2b96 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2b70:	eb e3       	ldi	r30, 0x3B	; 59
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	80 83       	st	Z, r24
    2b78:	0e c0       	rjmp	.+28     	; 0x2b96 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2b7a:	e8 e3       	ldi	r30, 0x38	; 56
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	80 83       	st	Z, r24
    2b82:	09 c0       	rjmp	.+18     	; 0x2b96 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2b84:	e5 e3       	ldi	r30, 0x35	; 53
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	80 83       	st	Z, r24
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2b8e:	e2 e3       	ldi	r30, 0x32	; 50
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	80 83       	st	Z, r24
			break;
		}
	}
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <GPIO_readPort+0x6>
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <GPIO_readPort+0x8>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2bb2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	84 30       	cpi	r24, 0x04	; 4
    2bb8:	90 f5       	brcc	.+100    	; 0x2c1e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	3c 83       	std	Y+4, r19	; 0x04
    2bc2:	2b 83       	std	Y+3, r18	; 0x03
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	91 05       	cpc	r25, r1
    2bcc:	d1 f0       	breq	.+52     	; 0x2c02 <GPIO_readPort+0x5e>
    2bce:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd2:	22 30       	cpi	r18, 0x02	; 2
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	2c f4       	brge	.+10     	; 0x2be2 <GPIO_readPort+0x3e>
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	61 f0       	breq	.+24     	; 0x2bf8 <GPIO_readPort+0x54>
    2be0:	1e c0       	rjmp	.+60     	; 0x2c1e <GPIO_readPort+0x7a>
    2be2:	2b 81       	ldd	r18, Y+3	; 0x03
    2be4:	3c 81       	ldd	r19, Y+4	; 0x04
    2be6:	22 30       	cpi	r18, 0x02	; 2
    2be8:	31 05       	cpc	r19, r1
    2bea:	81 f0       	breq	.+32     	; 0x2c0c <GPIO_readPort+0x68>
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf0:	83 30       	cpi	r24, 0x03	; 3
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	81 f0       	breq	.+32     	; 0x2c16 <GPIO_readPort+0x72>
    2bf6:	13 c0       	rjmp	.+38     	; 0x2c1e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2bf8:	e9 e3       	ldi	r30, 0x39	; 57
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	0e c0       	rjmp	.+28     	; 0x2c1e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2c02:	e6 e3       	ldi	r30, 0x36	; 54
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	09 c0       	rjmp	.+18     	; 0x2c1e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2c0c:	e3 e3       	ldi	r30, 0x33	; 51
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	04 c0       	rjmp	.+8      	; 0x2c1e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2c16:	e0 e3       	ldi	r30, 0x30	; 48
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	60 97       	sbiw	r28, 0x10	; 16
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	64 e0       	ldi	r22, 0x04	; 4
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	65 e0       	ldi	r22, 0x05	; 5
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	66 e0       	ldi	r22, 0x06	; 6
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	67 e0       	ldi	r22, 0x07	; 7
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2c6a:	83 e0       	ldi	r24, 0x03	; 3
    2c6c:	62 e0       	ldi	r22, 0x02	; 2
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	63 e0       	ldi	r22, 0x03	; 3
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2c7e:	83 e0       	ldi	r24, 0x03	; 3
    2c80:	64 e0       	ldi	r22, 0x04	; 4
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	65 e0       	ldi	r22, 0x05	; 5
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2c92:	1f 86       	std	Y+15, r1	; 0x0f
    2c94:	b4 c0       	rjmp	.+360    	; 0x2dfe <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2c96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c98:	98 2f       	mov	r25, r24
    2c9a:	9c 5f       	subi	r25, 0xFC	; 252
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	69 2f       	mov	r22, r25
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca8:	98 2f       	mov	r25, r24
    2caa:	9c 5f       	subi	r25, 0xFC	; 252
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	69 2f       	mov	r22, r25
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2cb6:	18 8a       	std	Y+16, r1	; 0x10
    2cb8:	22 c0       	rjmp	.+68     	; 0x2cfe <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2cba:	88 89       	ldd	r24, Y+16	; 0x10
    2cbc:	98 2f       	mov	r25, r24
    2cbe:	9e 5f       	subi	r25, 0xFE	; 254
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	69 2f       	mov	r22, r25
    2cc4:	0e 94 af 14 	call	0x295e	; 0x295e <GPIO_readPin>
    2cc8:	88 23       	and	r24, r24
    2cca:	b1 f4       	brne	.+44     	; 0x2cf8 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	98 2f       	mov	r25, r24
    2cdc:	88 89       	ldd	r24, Y+16	; 0x10
    2cde:	89 0f       	add	r24, r25
    2ce0:	8f 5f       	subi	r24, 0xFF	; 255
    2ce2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2ce6:	60 96       	adiw	r28, 0x10	; 16
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2cf8:	88 89       	ldd	r24, Y+16	; 0x10
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	88 8b       	std	Y+16, r24	; 0x10
    2cfe:	88 89       	ldd	r24, Y+16	; 0x10
    2d00:	84 30       	cpi	r24, 0x04	; 4
    2d02:	d8 f2       	brcs	.-74     	; 0x2cba <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d06:	98 2f       	mov	r25, r24
    2d08:	9c 5f       	subi	r25, 0xFC	; 252
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	69 2f       	mov	r22, r25
    2d0e:	40 e0       	ldi	r20, 0x00	; 0
    2d10:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a0 ea       	ldi	r26, 0xA0	; 160
    2d1a:	b0 e4       	ldi	r27, 0x40	; 64
    2d1c:	8b 87       	std	Y+11, r24	; 0x0b
    2d1e:	9c 87       	std	Y+12, r25	; 0x0c
    2d20:	ad 87       	std	Y+13, r26	; 0x0d
    2d22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	4a ef       	ldi	r20, 0xFA	; 250
    2d32:	54 e4       	ldi	r21, 0x44	; 68
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8f 83       	std	Y+7, r24	; 0x07
    2d3e:	98 87       	std	Y+8, r25	; 0x08
    2d40:	a9 87       	std	Y+9, r26	; 0x09
    2d42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d44:	6f 81       	ldd	r22, Y+7	; 0x07
    2d46:	78 85       	ldd	r23, Y+8	; 0x08
    2d48:	89 85       	ldd	r24, Y+9	; 0x09
    2d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	3f c0       	rjmp	.+126    	; 0x2de4 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	3f ef       	ldi	r19, 0xFF	; 255
    2d72:	4f e7       	ldi	r20, 0x7F	; 127
    2d74:	57 e4       	ldi	r21, 0x47	; 71
    2d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7a:	18 16       	cp	r1, r24
    2d7c:	4c f5       	brge	.+82     	; 0x2dd0 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e2       	ldi	r20, 0x20	; 32
    2d8c:	51 e4       	ldi	r21, 0x41	; 65
    2d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <KEYPAD_getPressedKey+0x198>
    2da8:	88 ec       	ldi	r24, 0xC8	; 200
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <KEYPAD_getPressedKey+0x186>
    2db8:	9c 83       	std	Y+4, r25	; 0x04
    2dba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9e 83       	std	Y+6, r25	; 0x06
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <KEYPAD_getPressedKey+0x17a>
    2dce:	14 c0       	rjmp	.+40     	; 0x2df8 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd2:	78 85       	ldd	r23, Y+8	; 0x08
    2dd4:	89 85       	ldd	r24, Y+9	; 0x09
    2dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <KEYPAD_getPressedKey+0x1c2>
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	8f 87       	std	Y+15, r24	; 0x0f
    2dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e00:	84 30       	cpi	r24, 0x04	; 4
    2e02:	08 f4       	brcc	.+2      	; 0x2e06 <KEYPAD_getPressedKey+0x1d8>
    2e04:	48 cf       	rjmp	.-368    	; 0x2c96 <KEYPAD_getPressedKey+0x68>
    2e06:	45 cf       	rjmp	.-374    	; 0x2c92 <KEYPAD_getPressedKey+0x64>

00002e08 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <KEYPAD_4x4_adjustKeyNumber+0x6>
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2e16:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	3c 83       	std	Y+4, r19	; 0x04
    2e20:	2b 83       	std	Y+3, r18	; 0x03
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	88 30       	cpi	r24, 0x08	; 8
    2e28:	91 05       	cpc	r25, r1
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <KEYPAD_4x4_adjustKeyNumber+0x26>
    2e2c:	70 c0       	rjmp	.+224    	; 0x2f0e <KEYPAD_4x4_adjustKeyNumber+0x106>
    2e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e30:	3c 81       	ldd	r19, Y+4	; 0x04
    2e32:	29 30       	cpi	r18, 0x09	; 9
    2e34:	31 05       	cpc	r19, r1
    2e36:	5c f5       	brge	.+86     	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	84 30       	cpi	r24, 0x04	; 4
    2e3e:	91 05       	cpc	r25, r1
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2e42:	59 c0       	rjmp	.+178    	; 0x2ef6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2e44:	2b 81       	ldd	r18, Y+3	; 0x03
    2e46:	3c 81       	ldd	r19, Y+4	; 0x04
    2e48:	25 30       	cpi	r18, 0x05	; 5
    2e4a:	31 05       	cpc	r19, r1
    2e4c:	9c f4       	brge	.+38     	; 0x2e74 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	9c 81       	ldd	r25, Y+4	; 0x04
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	91 05       	cpc	r25, r1
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2e58:	48 c0       	rjmp	.+144    	; 0x2eea <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5e:	23 30       	cpi	r18, 0x03	; 3
    2e60:	31 05       	cpc	r19, r1
    2e62:	0c f0       	brlt	.+2      	; 0x2e66 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2e64:	45 c0       	rjmp	.+138    	; 0x2ef0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2e70:	39 c0       	rjmp	.+114    	; 0x2ee4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2e72:	67 c0       	rjmp	.+206    	; 0x2f42 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2e74:	2b 81       	ldd	r18, Y+3	; 0x03
    2e76:	3c 81       	ldd	r19, Y+4	; 0x04
    2e78:	26 30       	cpi	r18, 0x06	; 6
    2e7a:	31 05       	cpc	r19, r1
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2e7e:	41 c0       	rjmp	.+130    	; 0x2f02 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	87 30       	cpi	r24, 0x07	; 7
    2e86:	91 05       	cpc	r25, r1
    2e88:	0c f0       	brlt	.+2      	; 0x2e8c <KEYPAD_4x4_adjustKeyNumber+0x84>
    2e8a:	3e c0       	rjmp	.+124    	; 0x2f08 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2e8c:	37 c0       	rjmp	.+110    	; 0x2efc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e90:	3c 81       	ldd	r19, Y+4	; 0x04
    2e92:	2c 30       	cpi	r18, 0x0C	; 12
    2e94:	31 05       	cpc	r19, r1
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2e98:	46 c0       	rjmp	.+140    	; 0x2f26 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	8d 30       	cpi	r24, 0x0D	; 13
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	5c f4       	brge	.+22     	; 0x2eba <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2ea4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea8:	2a 30       	cpi	r18, 0x0A	; 10
    2eaa:	31 05       	cpc	r19, r1
    2eac:	b1 f1       	breq	.+108    	; 0x2f1a <KEYPAD_4x4_adjustKeyNumber+0x112>
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	8b 30       	cpi	r24, 0x0B	; 11
    2eb4:	91 05       	cpc	r25, r1
    2eb6:	a4 f5       	brge	.+104    	; 0x2f20 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2eb8:	2d c0       	rjmp	.+90     	; 0x2f14 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebe:	2e 30       	cpi	r18, 0x0E	; 14
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	b9 f1       	breq	.+110    	; 0x2f32 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	8e 30       	cpi	r24, 0x0E	; 14
    2eca:	91 05       	cpc	r25, r1
    2ecc:	7c f1       	brlt	.+94     	; 0x2f2c <KEYPAD_4x4_adjustKeyNumber+0x124>
    2ece:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed2:	2f 30       	cpi	r18, 0x0F	; 15
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	79 f1       	breq	.+94     	; 0x2f36 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	80 31       	cpi	r24, 0x10	; 16
    2ede:	91 05       	cpc	r25, r1
    2ee0:	69 f1       	breq	.+90     	; 0x2f3c <KEYPAD_4x4_adjustKeyNumber+0x134>
    2ee2:	2f c0       	rjmp	.+94     	; 0x2f42 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2ee4:	87 e0       	ldi	r24, 0x07	; 7
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	2e c0       	rjmp	.+92     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2eea:	88 e0       	ldi	r24, 0x08	; 8
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	2b c0       	rjmp	.+86     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2ef0:	89 e0       	ldi	r24, 0x09	; 9
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	28 c0       	rjmp	.+80     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2ef6:	85 e2       	ldi	r24, 0x25	; 37
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	25 c0       	rjmp	.+74     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2efc:	84 e0       	ldi	r24, 0x04	; 4
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	22 c0       	rjmp	.+68     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2f02:	85 e0       	ldi	r24, 0x05	; 5
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	1f c0       	rjmp	.+62     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2f08:	86 e0       	ldi	r24, 0x06	; 6
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	1c c0       	rjmp	.+56     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2f0e:	8a e2       	ldi	r24, 0x2A	; 42
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	19 c0       	rjmp	.+50     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	16 c0       	rjmp	.+44     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	13 c0       	rjmp	.+38     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2f20:	83 e0       	ldi	r24, 0x03	; 3
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	10 c0       	rjmp	.+32     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2f26:	8d e2       	ldi	r24, 0x2D	; 45
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	0d c0       	rjmp	.+26     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2f2c:	8d e0       	ldi	r24, 0x0D	; 13
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	0a c0       	rjmp	.+20     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2f32:	19 82       	std	Y+1, r1	; 0x01
    2f34:	08 c0       	rjmp	.+16     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2f36:	8d e3       	ldi	r24, 0x3D	; 61
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	05 c0       	rjmp	.+10     	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2f3c:	8b e2       	ldi	r24, 0x2B	; 43
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	2e 97       	sbiw	r28, 0x0e	; 14
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	61 e0       	ldi	r22, 0x01	; 1
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	62 e0       	ldi	r22, 0x02	; 2
    2f78:	41 e0       	ldi	r20, 0x01	; 1
    2f7a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a0 ea       	ldi	r26, 0xA0	; 160
    2f84:	b1 e4       	ldi	r27, 0x41	; 65
    2f86:	8b 87       	std	Y+11, r24	; 0x0b
    2f88:	9c 87       	std	Y+12, r25	; 0x0c
    2f8a:	ad 87       	std	Y+13, r26	; 0x0d
    2f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a ef       	ldi	r20, 0xFA	; 250
    2f9c:	54 e4       	ldi	r21, 0x44	; 68
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8f 83       	std	Y+7, r24	; 0x07
    2fa8:	98 87       	std	Y+8, r25	; 0x08
    2faa:	a9 87       	std	Y+9, r26	; 0x09
    2fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fae:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb0:	78 85       	ldd	r23, Y+8	; 0x08
    2fb2:	89 85       	ldd	r24, Y+9	; 0x09
    2fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	2c f4       	brge	.+10     	; 0x2fd0 <LCD_init+0x7a>
		__ticks = 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
    2fce:	3f c0       	rjmp	.+126    	; 0x304e <LCD_init+0xf8>
	else if (__tmp > 65535)
    2fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd2:	78 85       	ldd	r23, Y+8	; 0x08
    2fd4:	89 85       	ldd	r24, Y+9	; 0x09
    2fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	3f ef       	ldi	r19, 0xFF	; 255
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	57 e4       	ldi	r21, 0x47	; 71
    2fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	4c f5       	brge	.+82     	; 0x303a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <LCD_init+0xda>
    3012:	88 ec       	ldi	r24, 0xC8	; 200
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9c 83       	std	Y+4, r25	; 0x04
    3018:	8b 83       	std	Y+3, r24	; 0x03
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <LCD_init+0xc8>
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	8d 81       	ldd	r24, Y+5	; 0x05
    3028:	9e 81       	ldd	r25, Y+6	; 0x06
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	69 f7       	brne	.-38     	; 0x3012 <LCD_init+0xbc>
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	9a 81       	ldd	r25, Y+2	; 0x02
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <LCD_init+0x104>
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	63 e0       	ldi	r22, 0x03	; 3
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	64 e0       	ldi	r22, 0x04	; 4
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	65 e0       	ldi	r22, 0x05	; 5
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	66 e0       	ldi	r22, 0x06	; 6
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    308a:	83 e3       	ldi	r24, 0x33	; 51
    308c:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3090:	82 e3       	ldi	r24, 0x32	; 50
    3092:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3096:	88 e2       	ldi	r24, 0x28	; 40
    3098:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    309c:	8c e0       	ldi	r24, 0x0C	; 12
    309e:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>
}
    30a8:	2e 96       	adiw	r28, 0x0e	; 14
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	df 93       	push	r29
    30c0:	cf 93       	push	r28
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	c3 56       	subi	r28, 0x63	; 99
    30c8:	d0 40       	sbci	r29, 0x00	; 0
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	fe 01       	movw	r30, r28
    30d6:	ed 59       	subi	r30, 0x9D	; 157
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	40 e0       	ldi	r20, 0x00	; 0
    30e2:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e1 5a       	subi	r30, 0xA1	; 161
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	a0 e8       	ldi	r26, 0x80	; 128
    30f2:	bf e3       	ldi	r27, 0x3F	; 63
    30f4:	80 83       	st	Z, r24
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	a2 83       	std	Z+2, r26	; 0x02
    30fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	8e 01       	movw	r16, r28
    30fe:	05 5a       	subi	r16, 0xA5	; 165
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	e1 5a       	subi	r30, 0xA1	; 161
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	4a ef       	ldi	r20, 0xFA	; 250
    3116:	54 e4       	ldi	r21, 0x44	; 68
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	f8 01       	movw	r30, r16
    3122:	80 83       	st	Z, r24
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	a2 83       	std	Z+2, r26	; 0x02
    3128:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    312a:	fe 01       	movw	r30, r28
    312c:	e5 5a       	subi	r30, 0xA5	; 165
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e8       	ldi	r20, 0x80	; 128
    313e:	5f e3       	ldi	r21, 0x3F	; 63
    3140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3144:	88 23       	and	r24, r24
    3146:	44 f4       	brge	.+16     	; 0x3158 <LCD_sendCommand+0x9e>
		__ticks = 1;
    3148:	fe 01       	movw	r30, r28
    314a:	e7 5a       	subi	r30, 0xA7	; 167
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	80 83       	st	Z, r24
    3156:	64 c0       	rjmp	.+200    	; 0x3220 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    3158:	fe 01       	movw	r30, r28
    315a:	e5 5a       	subi	r30, 0xA5	; 165
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	60 81       	ld	r22, Z
    3160:	71 81       	ldd	r23, Z+1	; 0x01
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	3f ef       	ldi	r19, 0xFF	; 255
    316a:	4f e7       	ldi	r20, 0x7F	; 127
    316c:	57 e4       	ldi	r21, 0x47	; 71
    316e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3172:	18 16       	cp	r1, r24
    3174:	0c f0       	brlt	.+2      	; 0x3178 <LCD_sendCommand+0xbe>
    3176:	43 c0       	rjmp	.+134    	; 0x31fe <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	fe 01       	movw	r30, r28
    317a:	e1 5a       	subi	r30, 0xA1	; 161
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e2       	ldi	r20, 0x20	; 32
    318c:	51 e4       	ldi	r21, 0x41	; 65
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8e 01       	movw	r16, r28
    3198:	07 5a       	subi	r16, 0xA7	; 167
    319a:	1f 4f       	sbci	r17, 0xFF	; 255
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	f8 01       	movw	r30, r16
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
    31ae:	1f c0       	rjmp	.+62     	; 0x31ee <LCD_sendCommand+0x134>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e9 5a       	subi	r30, 0xA9	; 169
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	88 ec       	ldi	r24, 0xC8	; 200
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	80 83       	st	Z, r24
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 5a       	subi	r30, 0xA9	; 169
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_sendCommand+0x10e>
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 5a       	subi	r30, 0xA9	; 169
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d6:	de 01       	movw	r26, r28
    31d8:	a7 5a       	subi	r26, 0xA7	; 167
    31da:	bf 4f       	sbci	r27, 0xFF	; 255
    31dc:	fe 01       	movw	r30, r28
    31de:	e7 5a       	subi	r30, 0xA7	; 167
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	11 96       	adiw	r26, 0x01	; 1
    31ea:	9c 93       	st	X, r25
    31ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	fe 01       	movw	r30, r28
    31f0:	e7 5a       	subi	r30, 0xA7	; 167
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	d1 f6       	brne	.-76     	; 0x31b0 <LCD_sendCommand+0xf6>
    31fc:	27 c0       	rjmp	.+78     	; 0x324c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	8e 01       	movw	r16, r28
    3200:	07 5a       	subi	r16, 0xA7	; 167
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	fe 01       	movw	r30, r28
    3206:	e5 5a       	subi	r30, 0xA5	; 165
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	f8 01       	movw	r30, r16
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	de 01       	movw	r26, r28
    3222:	ab 5a       	subi	r26, 0xAB	; 171
    3224:	bf 4f       	sbci	r27, 0xFF	; 255
    3226:	fe 01       	movw	r30, r28
    3228:	e7 5a       	subi	r30, 0xA7	; 167
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	8d 93       	st	X+, r24
    3232:	9c 93       	st	X, r25
    3234:	fe 01       	movw	r30, r28
    3236:	eb 5a       	subi	r30, 0xAB	; 171
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <LCD_sendCommand+0x184>
    3242:	fe 01       	movw	r30, r28
    3244:	eb 5a       	subi	r30, 0xAB	; 171
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	62 e0       	ldi	r22, 0x02	; 2
    3250:	41 e0       	ldi	r20, 0x01	; 1
    3252:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3256:	fe 01       	movw	r30, r28
    3258:	ef 5a       	subi	r30, 0xAF	; 175
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a0 e8       	ldi	r26, 0x80	; 128
    3262:	bf e3       	ldi	r27, 0x3F	; 63
    3264:	80 83       	st	Z, r24
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	a2 83       	std	Z+2, r26	; 0x02
    326a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	8e 01       	movw	r16, r28
    326e:	03 5b       	subi	r16, 0xB3	; 179
    3270:	1f 4f       	sbci	r17, 0xFF	; 255
    3272:	fe 01       	movw	r30, r28
    3274:	ef 5a       	subi	r30, 0xAF	; 175
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	60 81       	ld	r22, Z
    327a:	71 81       	ldd	r23, Z+1	; 0x01
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	93 81       	ldd	r25, Z+3	; 0x03
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	4a ef       	ldi	r20, 0xFA	; 250
    3286:	54 e4       	ldi	r21, 0x44	; 68
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	f8 01       	movw	r30, r16
    3292:	80 83       	st	Z, r24
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	a2 83       	std	Z+2, r26	; 0x02
    3298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    329a:	fe 01       	movw	r30, r28
    329c:	e3 5b       	subi	r30, 0xB3	; 179
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	60 81       	ld	r22, Z
    32a2:	71 81       	ldd	r23, Z+1	; 0x01
    32a4:	82 81       	ldd	r24, Z+2	; 0x02
    32a6:	93 81       	ldd	r25, Z+3	; 0x03
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e8       	ldi	r20, 0x80	; 128
    32ae:	5f e3       	ldi	r21, 0x3F	; 63
    32b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b4:	88 23       	and	r24, r24
    32b6:	44 f4       	brge	.+16     	; 0x32c8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    32b8:	fe 01       	movw	r30, r28
    32ba:	e5 5b       	subi	r30, 0xB5	; 181
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	80 83       	st	Z, r24
    32c6:	64 c0       	rjmp	.+200    	; 0x3390 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    32c8:	fe 01       	movw	r30, r28
    32ca:	e3 5b       	subi	r30, 0xB3	; 179
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	3f ef       	ldi	r19, 0xFF	; 255
    32da:	4f e7       	ldi	r20, 0x7F	; 127
    32dc:	57 e4       	ldi	r21, 0x47	; 71
    32de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e2:	18 16       	cp	r1, r24
    32e4:	0c f0       	brlt	.+2      	; 0x32e8 <LCD_sendCommand+0x22e>
    32e6:	43 c0       	rjmp	.+134    	; 0x336e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e8:	fe 01       	movw	r30, r28
    32ea:	ef 5a       	subi	r30, 0xAF	; 175
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	8e 01       	movw	r16, r28
    3308:	05 5b       	subi	r16, 0xB5	; 181
    330a:	1f 4f       	sbci	r17, 0xFF	; 255
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	f8 01       	movw	r30, r16
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	80 83       	st	Z, r24
    331e:	1f c0       	rjmp	.+62     	; 0x335e <LCD_sendCommand+0x2a4>
    3320:	fe 01       	movw	r30, r28
    3322:	e7 5b       	subi	r30, 0xB7	; 183
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	88 ec       	ldi	r24, 0xC8	; 200
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	80 83       	st	Z, r24
    332e:	fe 01       	movw	r30, r28
    3330:	e7 5b       	subi	r30, 0xB7	; 183
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 81       	ld	r24, Z
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_sendCommand+0x27e>
    333c:	fe 01       	movw	r30, r28
    333e:	e7 5b       	subi	r30, 0xB7	; 183
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	91 83       	std	Z+1, r25	; 0x01
    3344:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3346:	de 01       	movw	r26, r28
    3348:	a5 5b       	subi	r26, 0xB5	; 181
    334a:	bf 4f       	sbci	r27, 0xFF	; 255
    334c:	fe 01       	movw	r30, r28
    334e:	e5 5b       	subi	r30, 0xB5	; 181
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	11 96       	adiw	r26, 0x01	; 1
    335a:	9c 93       	st	X, r25
    335c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335e:	fe 01       	movw	r30, r28
    3360:	e5 5b       	subi	r30, 0xB5	; 181
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	d1 f6       	brne	.-76     	; 0x3320 <LCD_sendCommand+0x266>
    336c:	27 c0       	rjmp	.+78     	; 0x33bc <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336e:	8e 01       	movw	r16, r28
    3370:	05 5b       	subi	r16, 0xB5	; 181
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	fe 01       	movw	r30, r28
    3376:	e3 5b       	subi	r30, 0xB3	; 179
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	f8 01       	movw	r30, r16
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	80 83       	st	Z, r24
    3390:	de 01       	movw	r26, r28
    3392:	a9 5b       	subi	r26, 0xB9	; 185
    3394:	bf 4f       	sbci	r27, 0xFF	; 255
    3396:	fe 01       	movw	r30, r28
    3398:	e5 5b       	subi	r30, 0xB5	; 181
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	91 81       	ldd	r25, Z+1	; 0x01
    33a0:	8d 93       	st	X+, r24
    33a2:	9c 93       	st	X, r25
    33a4:	fe 01       	movw	r30, r28
    33a6:	e9 5b       	subi	r30, 0xB9	; 185
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <LCD_sendCommand+0x2f4>
    33b2:	fe 01       	movw	r30, r28
    33b4:	e9 5b       	subi	r30, 0xB9	; 185
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    33bc:	fe 01       	movw	r30, r28
    33be:	ed 59       	subi	r30, 0x9D	; 157
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	80 81       	ld	r24, Z
    33c4:	88 2f       	mov	r24, r24
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	80 71       	andi	r24, 0x10	; 16
    33ca:	90 70       	andi	r25, 0x00	; 0
    33cc:	95 95       	asr	r25
    33ce:	87 95       	ror	r24
    33d0:	95 95       	asr	r25
    33d2:	87 95       	ror	r24
    33d4:	95 95       	asr	r25
    33d6:	87 95       	ror	r24
    33d8:	95 95       	asr	r25
    33da:	87 95       	ror	r24
    33dc:	98 2f       	mov	r25, r24
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	63 e0       	ldi	r22, 0x03	; 3
    33e2:	49 2f       	mov	r20, r25
    33e4:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    33e8:	fe 01       	movw	r30, r28
    33ea:	ed 59       	subi	r30, 0x9D	; 157
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	88 2f       	mov	r24, r24
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	80 72       	andi	r24, 0x20	; 32
    33f6:	90 70       	andi	r25, 0x00	; 0
    33f8:	95 95       	asr	r25
    33fa:	87 95       	ror	r24
    33fc:	95 95       	asr	r25
    33fe:	87 95       	ror	r24
    3400:	95 95       	asr	r25
    3402:	87 95       	ror	r24
    3404:	95 95       	asr	r25
    3406:	87 95       	ror	r24
    3408:	95 95       	asr	r25
    340a:	87 95       	ror	r24
    340c:	98 2f       	mov	r25, r24
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	64 e0       	ldi	r22, 0x04	; 4
    3412:	49 2f       	mov	r20, r25
    3414:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    3418:	fe 01       	movw	r30, r28
    341a:	ed 59       	subi	r30, 0x9D	; 157
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	88 2f       	mov	r24, r24
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	80 74       	andi	r24, 0x40	; 64
    3426:	90 70       	andi	r25, 0x00	; 0
    3428:	08 2e       	mov	r0, r24
    342a:	89 2f       	mov	r24, r25
    342c:	00 0c       	add	r0, r0
    342e:	88 1f       	adc	r24, r24
    3430:	99 0b       	sbc	r25, r25
    3432:	00 0c       	add	r0, r0
    3434:	88 1f       	adc	r24, r24
    3436:	99 1f       	adc	r25, r25
    3438:	98 2f       	mov	r25, r24
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	65 e0       	ldi	r22, 0x05	; 5
    343e:	49 2f       	mov	r20, r25
    3440:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    3444:	fe 01       	movw	r30, r28
    3446:	ed 59       	subi	r30, 0x9D	; 157
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	98 2f       	mov	r25, r24
    344e:	99 1f       	adc	r25, r25
    3450:	99 27       	eor	r25, r25
    3452:	99 1f       	adc	r25, r25
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	66 e0       	ldi	r22, 0x06	; 6
    3458:	49 2f       	mov	r20, r25
    345a:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    345e:	fe 01       	movw	r30, r28
    3460:	ed 5b       	subi	r30, 0xBD	; 189
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	a0 e8       	ldi	r26, 0x80	; 128
    346a:	bf e3       	ldi	r27, 0x3F	; 63
    346c:	80 83       	st	Z, r24
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	a2 83       	std	Z+2, r26	; 0x02
    3472:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3474:	8e 01       	movw	r16, r28
    3476:	01 5c       	subi	r16, 0xC1	; 193
    3478:	1f 4f       	sbci	r17, 0xFF	; 255
    347a:	fe 01       	movw	r30, r28
    347c:	ed 5b       	subi	r30, 0xBD	; 189
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	60 81       	ld	r22, Z
    3482:	71 81       	ldd	r23, Z+1	; 0x01
    3484:	82 81       	ldd	r24, Z+2	; 0x02
    3486:	93 81       	ldd	r25, Z+3	; 0x03
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	4a ef       	ldi	r20, 0xFA	; 250
    348e:	54 e4       	ldi	r21, 0x44	; 68
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	f8 01       	movw	r30, r16
    349a:	80 83       	st	Z, r24
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	a2 83       	std	Z+2, r26	; 0x02
    34a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34a2:	fe 01       	movw	r30, r28
    34a4:	ff 96       	adiw	r30, 0x3f	; 63
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9e af       	std	Y+62, r25	; 0x3e
    34c4:	8d af       	std	Y+61, r24	; 0x3d
    34c6:	46 c0       	rjmp	.+140    	; 0x3554 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    34c8:	fe 01       	movw	r30, r28
    34ca:	ff 96       	adiw	r30, 0x3f	; 63
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	3f ef       	ldi	r19, 0xFF	; 255
    34d8:	4f e7       	ldi	r20, 0x7F	; 127
    34da:	57 e4       	ldi	r21, 0x47	; 71
    34dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e0:	18 16       	cp	r1, r24
    34e2:	64 f5       	brge	.+88     	; 0x353c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e4:	fe 01       	movw	r30, r28
    34e6:	ed 5b       	subi	r30, 0xBD	; 189
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e2       	ldi	r20, 0x20	; 32
    34f8:	51 e4       	ldi	r21, 0x41	; 65
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9e af       	std	Y+62, r25	; 0x3e
    3510:	8d af       	std	Y+61, r24	; 0x3d
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <LCD_sendCommand+0x478>
    3514:	88 ec       	ldi	r24, 0xC8	; 200
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9c af       	std	Y+60, r25	; 0x3c
    351a:	8b af       	std	Y+59, r24	; 0x3b
    351c:	8b ad       	ldd	r24, Y+59	; 0x3b
    351e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <LCD_sendCommand+0x466>
    3524:	9c af       	std	Y+60, r25	; 0x3c
    3526:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3528:	8d ad       	ldd	r24, Y+61	; 0x3d
    352a:	9e ad       	ldd	r25, Y+62	; 0x3e
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	9e af       	std	Y+62, r25	; 0x3e
    3530:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	8d ad       	ldd	r24, Y+61	; 0x3d
    3534:	9e ad       	ldd	r25, Y+62	; 0x3e
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	69 f7       	brne	.-38     	; 0x3514 <LCD_sendCommand+0x45a>
    353a:	16 c0       	rjmp	.+44     	; 0x3568 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353c:	fe 01       	movw	r30, r28
    353e:	ff 96       	adiw	r30, 0x3f	; 63
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e af       	std	Y+62, r25	; 0x3e
    3552:	8d af       	std	Y+61, r24	; 0x3d
    3554:	8d ad       	ldd	r24, Y+61	; 0x3d
    3556:	9e ad       	ldd	r25, Y+62	; 0x3e
    3558:	9a af       	std	Y+58, r25	; 0x3a
    355a:	89 af       	std	Y+57, r24	; 0x39
    355c:	89 ad       	ldd	r24, Y+57	; 0x39
    355e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <LCD_sendCommand+0x4a6>
    3564:	9a af       	std	Y+58, r25	; 0x3a
    3566:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	62 e0       	ldi	r22, 0x02	; 2
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	a0 e8       	ldi	r26, 0x80	; 128
    3578:	bf e3       	ldi	r27, 0x3F	; 63
    357a:	8d ab       	std	Y+53, r24	; 0x35
    357c:	9e ab       	std	Y+54, r25	; 0x36
    357e:	af ab       	std	Y+55, r26	; 0x37
    3580:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3582:	6d a9       	ldd	r22, Y+53	; 0x35
    3584:	7e a9       	ldd	r23, Y+54	; 0x36
    3586:	8f a9       	ldd	r24, Y+55	; 0x37
    3588:	98 ad       	ldd	r25, Y+56	; 0x38
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	4a ef       	ldi	r20, 0xFA	; 250
    3590:	54 e4       	ldi	r21, 0x44	; 68
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	89 ab       	std	Y+49, r24	; 0x31
    359c:	9a ab       	std	Y+50, r25	; 0x32
    359e:	ab ab       	std	Y+51, r26	; 0x33
    35a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35a2:	69 a9       	ldd	r22, Y+49	; 0x31
    35a4:	7a a9       	ldd	r23, Y+50	; 0x32
    35a6:	8b a9       	ldd	r24, Y+51	; 0x33
    35a8:	9c a9       	ldd	r25, Y+52	; 0x34
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e8       	ldi	r20, 0x80	; 128
    35b0:	5f e3       	ldi	r21, 0x3F	; 63
    35b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b6:	88 23       	and	r24, r24
    35b8:	2c f4       	brge	.+10     	; 0x35c4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	98 ab       	std	Y+48, r25	; 0x30
    35c0:	8f a7       	std	Y+47, r24	; 0x2f
    35c2:	3f c0       	rjmp	.+126    	; 0x3642 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    35c4:	69 a9       	ldd	r22, Y+49	; 0x31
    35c6:	7a a9       	ldd	r23, Y+50	; 0x32
    35c8:	8b a9       	ldd	r24, Y+51	; 0x33
    35ca:	9c a9       	ldd	r25, Y+52	; 0x34
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	3f ef       	ldi	r19, 0xFF	; 255
    35d0:	4f e7       	ldi	r20, 0x7F	; 127
    35d2:	57 e4       	ldi	r21, 0x47	; 71
    35d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d8:	18 16       	cp	r1, r24
    35da:	4c f5       	brge	.+82     	; 0x362e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	6d a9       	ldd	r22, Y+53	; 0x35
    35de:	7e a9       	ldd	r23, Y+54	; 0x36
    35e0:	8f a9       	ldd	r24, Y+55	; 0x37
    35e2:	98 ad       	ldd	r25, Y+56	; 0x38
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e2       	ldi	r20, 0x20	; 32
    35ea:	51 e4       	ldi	r21, 0x41	; 65
    35ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	98 ab       	std	Y+48, r25	; 0x30
    3602:	8f a7       	std	Y+47, r24	; 0x2f
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <LCD_sendCommand+0x56a>
    3606:	88 ec       	ldi	r24, 0xC8	; 200
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9e a7       	std	Y+46, r25	; 0x2e
    360c:	8d a7       	std	Y+45, r24	; 0x2d
    360e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3610:	9e a5       	ldd	r25, Y+46	; 0x2e
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <LCD_sendCommand+0x558>
    3616:	9e a7       	std	Y+46, r25	; 0x2e
    3618:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	8f a5       	ldd	r24, Y+47	; 0x2f
    361c:	98 a9       	ldd	r25, Y+48	; 0x30
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	98 ab       	std	Y+48, r25	; 0x30
    3622:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3624:	8f a5       	ldd	r24, Y+47	; 0x2f
    3626:	98 a9       	ldd	r25, Y+48	; 0x30
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	69 f7       	brne	.-38     	; 0x3606 <LCD_sendCommand+0x54c>
    362c:	14 c0       	rjmp	.+40     	; 0x3656 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362e:	69 a9       	ldd	r22, Y+49	; 0x31
    3630:	7a a9       	ldd	r23, Y+50	; 0x32
    3632:	8b a9       	ldd	r24, Y+51	; 0x33
    3634:	9c a9       	ldd	r25, Y+52	; 0x34
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	98 ab       	std	Y+48, r25	; 0x30
    3640:	8f a7       	std	Y+47, r24	; 0x2f
    3642:	8f a5       	ldd	r24, Y+47	; 0x2f
    3644:	98 a9       	ldd	r25, Y+48	; 0x30
    3646:	9c a7       	std	Y+44, r25	; 0x2c
    3648:	8b a7       	std	Y+43, r24	; 0x2b
    364a:	8b a5       	ldd	r24, Y+43	; 0x2b
    364c:	9c a5       	ldd	r25, Y+44	; 0x2c
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <LCD_sendCommand+0x594>
    3652:	9c a7       	std	Y+44, r25	; 0x2c
    3654:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	62 e0       	ldi	r22, 0x02	; 2
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	a0 e8       	ldi	r26, 0x80	; 128
    3666:	bf e3       	ldi	r27, 0x3F	; 63
    3668:	8f a3       	std	Y+39, r24	; 0x27
    366a:	98 a7       	std	Y+40, r25	; 0x28
    366c:	a9 a7       	std	Y+41, r26	; 0x29
    366e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3670:	6f a1       	ldd	r22, Y+39	; 0x27
    3672:	78 a5       	ldd	r23, Y+40	; 0x28
    3674:	89 a5       	ldd	r24, Y+41	; 0x29
    3676:	9a a5       	ldd	r25, Y+42	; 0x2a
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	4a ef       	ldi	r20, 0xFA	; 250
    367e:	54 e4       	ldi	r21, 0x44	; 68
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	8b a3       	std	Y+35, r24	; 0x23
    368a:	9c a3       	std	Y+36, r25	; 0x24
    368c:	ad a3       	std	Y+37, r26	; 0x25
    368e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3690:	6b a1       	ldd	r22, Y+35	; 0x23
    3692:	7c a1       	ldd	r23, Y+36	; 0x24
    3694:	8d a1       	ldd	r24, Y+37	; 0x25
    3696:	9e a1       	ldd	r25, Y+38	; 0x26
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e8       	ldi	r20, 0x80	; 128
    369e:	5f e3       	ldi	r21, 0x3F	; 63
    36a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36a4:	88 23       	and	r24, r24
    36a6:	2c f4       	brge	.+10     	; 0x36b2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	9a a3       	std	Y+34, r25	; 0x22
    36ae:	89 a3       	std	Y+33, r24	; 0x21
    36b0:	3f c0       	rjmp	.+126    	; 0x3730 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    36b2:	6b a1       	ldd	r22, Y+35	; 0x23
    36b4:	7c a1       	ldd	r23, Y+36	; 0x24
    36b6:	8d a1       	ldd	r24, Y+37	; 0x25
    36b8:	9e a1       	ldd	r25, Y+38	; 0x26
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	3f ef       	ldi	r19, 0xFF	; 255
    36be:	4f e7       	ldi	r20, 0x7F	; 127
    36c0:	57 e4       	ldi	r21, 0x47	; 71
    36c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c6:	18 16       	cp	r1, r24
    36c8:	4c f5       	brge	.+82     	; 0x371c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ca:	6f a1       	ldd	r22, Y+39	; 0x27
    36cc:	78 a5       	ldd	r23, Y+40	; 0x28
    36ce:	89 a5       	ldd	r24, Y+41	; 0x29
    36d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	40 e2       	ldi	r20, 0x20	; 32
    36d8:	51 e4       	ldi	r21, 0x41	; 65
    36da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	9a a3       	std	Y+34, r25	; 0x22
    36f0:	89 a3       	std	Y+33, r24	; 0x21
    36f2:	0f c0       	rjmp	.+30     	; 0x3712 <LCD_sendCommand+0x658>
    36f4:	88 ec       	ldi	r24, 0xC8	; 200
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	98 a3       	std	Y+32, r25	; 0x20
    36fa:	8f 8f       	std	Y+31, r24	; 0x1f
    36fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36fe:	98 a1       	ldd	r25, Y+32	; 0x20
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	f1 f7       	brne	.-4      	; 0x3700 <LCD_sendCommand+0x646>
    3704:	98 a3       	std	Y+32, r25	; 0x20
    3706:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3708:	89 a1       	ldd	r24, Y+33	; 0x21
    370a:	9a a1       	ldd	r25, Y+34	; 0x22
    370c:	01 97       	sbiw	r24, 0x01	; 1
    370e:	9a a3       	std	Y+34, r25	; 0x22
    3710:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3712:	89 a1       	ldd	r24, Y+33	; 0x21
    3714:	9a a1       	ldd	r25, Y+34	; 0x22
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	69 f7       	brne	.-38     	; 0x36f4 <LCD_sendCommand+0x63a>
    371a:	14 c0       	rjmp	.+40     	; 0x3744 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    371c:	6b a1       	ldd	r22, Y+35	; 0x23
    371e:	7c a1       	ldd	r23, Y+36	; 0x24
    3720:	8d a1       	ldd	r24, Y+37	; 0x25
    3722:	9e a1       	ldd	r25, Y+38	; 0x26
    3724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	9a a3       	std	Y+34, r25	; 0x22
    372e:	89 a3       	std	Y+33, r24	; 0x21
    3730:	89 a1       	ldd	r24, Y+33	; 0x21
    3732:	9a a1       	ldd	r25, Y+34	; 0x22
    3734:	9e 8f       	std	Y+30, r25	; 0x1e
    3736:	8d 8f       	std	Y+29, r24	; 0x1d
    3738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    373a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <LCD_sendCommand+0x682>
    3740:	9e 8f       	std	Y+30, r25	; 0x1e
    3742:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3744:	fe 01       	movw	r30, r28
    3746:	ed 59       	subi	r30, 0x9D	; 157
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	80 81       	ld	r24, Z
    374c:	98 2f       	mov	r25, r24
    374e:	91 70       	andi	r25, 0x01	; 1
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	63 e0       	ldi	r22, 0x03	; 3
    3754:	49 2f       	mov	r20, r25
    3756:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    375a:	fe 01       	movw	r30, r28
    375c:	ed 59       	subi	r30, 0x9D	; 157
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	88 2f       	mov	r24, r24
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	82 70       	andi	r24, 0x02	; 2
    3768:	90 70       	andi	r25, 0x00	; 0
    376a:	95 95       	asr	r25
    376c:	87 95       	ror	r24
    376e:	98 2f       	mov	r25, r24
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	64 e0       	ldi	r22, 0x04	; 4
    3774:	49 2f       	mov	r20, r25
    3776:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    377a:	fe 01       	movw	r30, r28
    377c:	ed 59       	subi	r30, 0x9D	; 157
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	84 70       	andi	r24, 0x04	; 4
    3788:	90 70       	andi	r25, 0x00	; 0
    378a:	95 95       	asr	r25
    378c:	87 95       	ror	r24
    378e:	95 95       	asr	r25
    3790:	87 95       	ror	r24
    3792:	98 2f       	mov	r25, r24
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	65 e0       	ldi	r22, 0x05	; 5
    3798:	49 2f       	mov	r20, r25
    379a:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    379e:	fe 01       	movw	r30, r28
    37a0:	ed 59       	subi	r30, 0x9D	; 157
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 81       	ld	r24, Z
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	88 70       	andi	r24, 0x08	; 8
    37ac:	90 70       	andi	r25, 0x00	; 0
    37ae:	95 95       	asr	r25
    37b0:	87 95       	ror	r24
    37b2:	95 95       	asr	r25
    37b4:	87 95       	ror	r24
    37b6:	95 95       	asr	r25
    37b8:	87 95       	ror	r24
    37ba:	98 2f       	mov	r25, r24
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	66 e0       	ldi	r22, 0x06	; 6
    37c0:	49 2f       	mov	r20, r25
    37c2:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e8       	ldi	r26, 0x80	; 128
    37cc:	bf e3       	ldi	r27, 0x3F	; 63
    37ce:	89 8f       	std	Y+25, r24	; 0x19
    37d0:	9a 8f       	std	Y+26, r25	; 0x1a
    37d2:	ab 8f       	std	Y+27, r26	; 0x1b
    37d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	69 8d       	ldd	r22, Y+25	; 0x19
    37d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8d 8b       	std	Y+21, r24	; 0x15
    37f0:	9e 8b       	std	Y+22, r25	; 0x16
    37f2:	af 8b       	std	Y+23, r26	; 0x17
    37f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37f6:	6d 89       	ldd	r22, Y+21	; 0x15
    37f8:	7e 89       	ldd	r23, Y+22	; 0x16
    37fa:	8f 89       	ldd	r24, Y+23	; 0x17
    37fc:	98 8d       	ldd	r25, Y+24	; 0x18
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <LCD_sendCommand+0x75e>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9c 8b       	std	Y+20, r25	; 0x14
    3814:	8b 8b       	std	Y+19, r24	; 0x13
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3818:	6d 89       	ldd	r22, Y+21	; 0x15
    381a:	7e 89       	ldd	r23, Y+22	; 0x16
    381c:	8f 89       	ldd	r24, Y+23	; 0x17
    381e:	98 8d       	ldd	r25, Y+24	; 0x18
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	69 8d       	ldd	r22, Y+25	; 0x19
    3832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9c 8b       	std	Y+20, r25	; 0x14
    3856:	8b 8b       	std	Y+19, r24	; 0x13
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <LCD_sendCommand+0x7be>
    385a:	88 ec       	ldi	r24, 0xC8	; 200
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9a 8b       	std	Y+18, r25	; 0x12
    3860:	89 8b       	std	Y+17, r24	; 0x11
    3862:	89 89       	ldd	r24, Y+17	; 0x11
    3864:	9a 89       	ldd	r25, Y+18	; 0x12
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <LCD_sendCommand+0x7ac>
    386a:	9a 8b       	std	Y+18, r25	; 0x12
    386c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8b 89       	ldd	r24, Y+19	; 0x13
    3870:	9c 89       	ldd	r25, Y+20	; 0x14
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9c 8b       	std	Y+20, r25	; 0x14
    3876:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8b 89       	ldd	r24, Y+19	; 0x13
    387a:	9c 89       	ldd	r25, Y+20	; 0x14
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <LCD_sendCommand+0x7a0>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6d 89       	ldd	r22, Y+21	; 0x15
    3884:	7e 89       	ldd	r23, Y+22	; 0x16
    3886:	8f 89       	ldd	r24, Y+23	; 0x17
    3888:	98 8d       	ldd	r25, Y+24	; 0x18
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9c 8b       	std	Y+20, r25	; 0x14
    3894:	8b 8b       	std	Y+19, r24	; 0x13
    3896:	8b 89       	ldd	r24, Y+19	; 0x13
    3898:	9c 89       	ldd	r25, Y+20	; 0x14
    389a:	98 8b       	std	Y+16, r25	; 0x10
    389c:	8f 87       	std	Y+15, r24	; 0x0f
    389e:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a0:	98 89       	ldd	r25, Y+16	; 0x10
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <LCD_sendCommand+0x7e8>
    38a6:	98 8b       	std	Y+16, r25	; 0x10
    38a8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	62 e0       	ldi	r22, 0x02	; 2
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	a0 e8       	ldi	r26, 0x80	; 128
    38ba:	bf e3       	ldi	r27, 0x3F	; 63
    38bc:	8b 87       	std	Y+11, r24	; 0x0b
    38be:	9c 87       	std	Y+12, r25	; 0x0c
    38c0:	ad 87       	std	Y+13, r26	; 0x0d
    38c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	4a ef       	ldi	r20, 0xFA	; 250
    38d2:	54 e4       	ldi	r21, 0x44	; 68
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	8f 83       	std	Y+7, r24	; 0x07
    38de:	98 87       	std	Y+8, r25	; 0x08
    38e0:	a9 87       	std	Y+9, r26	; 0x09
    38e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38e4:	6f 81       	ldd	r22, Y+7	; 0x07
    38e6:	78 85       	ldd	r23, Y+8	; 0x08
    38e8:	89 85       	ldd	r24, Y+9	; 0x09
    38ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	40 e8       	ldi	r20, 0x80	; 128
    38f2:	5f e3       	ldi	r21, 0x3F	; 63
    38f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38f8:	88 23       	and	r24, r24
    38fa:	2c f4       	brge	.+10     	; 0x3906 <LCD_sendCommand+0x84c>
		__ticks = 1;
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	9e 83       	std	Y+6, r25	; 0x06
    3902:	8d 83       	std	Y+5, r24	; 0x05
    3904:	3f c0       	rjmp	.+126    	; 0x3984 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3906:	6f 81       	ldd	r22, Y+7	; 0x07
    3908:	78 85       	ldd	r23, Y+8	; 0x08
    390a:	89 85       	ldd	r24, Y+9	; 0x09
    390c:	9a 85       	ldd	r25, Y+10	; 0x0a
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	3f ef       	ldi	r19, 0xFF	; 255
    3912:	4f e7       	ldi	r20, 0x7F	; 127
    3914:	57 e4       	ldi	r21, 0x47	; 71
    3916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    391a:	18 16       	cp	r1, r24
    391c:	4c f5       	brge	.+82     	; 0x3970 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3920:	7c 85       	ldd	r23, Y+12	; 0x0c
    3922:	8d 85       	ldd	r24, Y+13	; 0x0d
    3924:	9e 85       	ldd	r25, Y+14	; 0x0e
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e2       	ldi	r20, 0x20	; 32
    392c:	51 e4       	ldi	r21, 0x41	; 65
    392e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	bc 01       	movw	r22, r24
    3938:	cd 01       	movw	r24, r26
    393a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	9e 83       	std	Y+6, r25	; 0x06
    3944:	8d 83       	std	Y+5, r24	; 0x05
    3946:	0f c0       	rjmp	.+30     	; 0x3966 <LCD_sendCommand+0x8ac>
    3948:	88 ec       	ldi	r24, 0xC8	; 200
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9c 83       	std	Y+4, r25	; 0x04
    394e:	8b 83       	std	Y+3, r24	; 0x03
    3950:	8b 81       	ldd	r24, Y+3	; 0x03
    3952:	9c 81       	ldd	r25, Y+4	; 0x04
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	f1 f7       	brne	.-4      	; 0x3954 <LCD_sendCommand+0x89a>
    3958:	9c 83       	std	Y+4, r25	; 0x04
    395a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	9e 83       	std	Y+6, r25	; 0x06
    3964:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3966:	8d 81       	ldd	r24, Y+5	; 0x05
    3968:	9e 81       	ldd	r25, Y+6	; 0x06
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	69 f7       	brne	.-38     	; 0x3948 <LCD_sendCommand+0x88e>
    396e:	14 c0       	rjmp	.+40     	; 0x3998 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3970:	6f 81       	ldd	r22, Y+7	; 0x07
    3972:	78 85       	ldd	r23, Y+8	; 0x08
    3974:	89 85       	ldd	r24, Y+9	; 0x09
    3976:	9a 85       	ldd	r25, Y+10	; 0x0a
    3978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	9e 83       	std	Y+6, r25	; 0x06
    3982:	8d 83       	std	Y+5, r24	; 0x05
    3984:	8d 81       	ldd	r24, Y+5	; 0x05
    3986:	9e 81       	ldd	r25, Y+6	; 0x06
    3988:	9a 83       	std	Y+2, r25	; 0x02
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	9a 81       	ldd	r25, Y+2	; 0x02
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	f1 f7       	brne	.-4      	; 0x3990 <LCD_sendCommand+0x8d6>
    3994:	9a 83       	std	Y+2, r25	; 0x02
    3996:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3998:	cd 59       	subi	r28, 0x9D	; 157
    399a:	df 4f       	sbci	r29, 0xFF	; 255
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	de bf       	out	0x3e, r29	; 62
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	08 95       	ret

000039b0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	df 93       	push	r29
    39b6:	cf 93       	push	r28
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	c3 56       	subi	r28, 0x63	; 99
    39be:	d0 40       	sbci	r29, 0x00	; 0
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	fe 01       	movw	r30, r28
    39cc:	ed 59       	subi	r30, 0x9D	; 157
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	41 e0       	ldi	r20, 0x01	; 1
    39d8:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    39dc:	fe 01       	movw	r30, r28
    39de:	e1 5a       	subi	r30, 0xA1	; 161
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	a0 e8       	ldi	r26, 0x80	; 128
    39e8:	bf e3       	ldi	r27, 0x3F	; 63
    39ea:	80 83       	st	Z, r24
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	a2 83       	std	Z+2, r26	; 0x02
    39f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f2:	8e 01       	movw	r16, r28
    39f4:	05 5a       	subi	r16, 0xA5	; 165
    39f6:	1f 4f       	sbci	r17, 0xFF	; 255
    39f8:	fe 01       	movw	r30, r28
    39fa:	e1 5a       	subi	r30, 0xA1	; 161
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	60 81       	ld	r22, Z
    3a00:	71 81       	ldd	r23, Z+1	; 0x01
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	93 81       	ldd	r25, Z+3	; 0x03
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	4a ef       	ldi	r20, 0xFA	; 250
    3a0c:	54 e4       	ldi	r21, 0x44	; 68
    3a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	f8 01       	movw	r30, r16
    3a18:	80 83       	st	Z, r24
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	a2 83       	std	Z+2, r26	; 0x02
    3a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a20:	fe 01       	movw	r30, r28
    3a22:	e5 5a       	subi	r30, 0xA5	; 165
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	60 81       	ld	r22, Z
    3a28:	71 81       	ldd	r23, Z+1	; 0x01
    3a2a:	82 81       	ldd	r24, Z+2	; 0x02
    3a2c:	93 81       	ldd	r25, Z+3	; 0x03
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e8       	ldi	r20, 0x80	; 128
    3a34:	5f e3       	ldi	r21, 0x3F	; 63
    3a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a3a:	88 23       	and	r24, r24
    3a3c:	44 f4       	brge	.+16     	; 0x3a4e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e7 5a       	subi	r30, 0xA7	; 167
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	91 83       	std	Z+1, r25	; 0x01
    3a4a:	80 83       	st	Z, r24
    3a4c:	64 c0       	rjmp	.+200    	; 0x3b16 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e5 5a       	subi	r30, 0xA5	; 165
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	60 81       	ld	r22, Z
    3a56:	71 81       	ldd	r23, Z+1	; 0x01
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	93 81       	ldd	r25, Z+3	; 0x03
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	3f ef       	ldi	r19, 0xFF	; 255
    3a60:	4f e7       	ldi	r20, 0x7F	; 127
    3a62:	57 e4       	ldi	r21, 0x47	; 71
    3a64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a68:	18 16       	cp	r1, r24
    3a6a:	0c f0       	brlt	.+2      	; 0x3a6e <LCD_displayCharacter+0xbe>
    3a6c:	43 c0       	rjmp	.+134    	; 0x3af4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e1 5a       	subi	r30, 0xA1	; 161
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	60 81       	ld	r22, Z
    3a76:	71 81       	ldd	r23, Z+1	; 0x01
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e2       	ldi	r20, 0x20	; 32
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	8e 01       	movw	r16, r28
    3a8e:	07 5a       	subi	r16, 0xA7	; 167
    3a90:	1f 4f       	sbci	r17, 0xFF	; 255
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	f8 01       	movw	r30, r16
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	80 83       	st	Z, r24
    3aa4:	1f c0       	rjmp	.+62     	; 0x3ae4 <LCD_displayCharacter+0x134>
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e9 5a       	subi	r30, 0xA9	; 169
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	88 ec       	ldi	r24, 0xC8	; 200
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	91 83       	std	Z+1, r25	; 0x01
    3ab2:	80 83       	st	Z, r24
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e9 5a       	subi	r30, 0xA9	; 169
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	80 81       	ld	r24, Z
    3abc:	91 81       	ldd	r25, Z+1	; 0x01
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <LCD_displayCharacter+0x10e>
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e9 5a       	subi	r30, 0xA9	; 169
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3acc:	de 01       	movw	r26, r28
    3ace:	a7 5a       	subi	r26, 0xA7	; 167
    3ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e7 5a       	subi	r30, 0xA7	; 167
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	80 81       	ld	r24, Z
    3ada:	91 81       	ldd	r25, Z+1	; 0x01
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	11 96       	adiw	r26, 0x01	; 1
    3ae0:	9c 93       	st	X, r25
    3ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e7 5a       	subi	r30, 0xA7	; 167
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	00 97       	sbiw	r24, 0x00	; 0
    3af0:	d1 f6       	brne	.-76     	; 0x3aa6 <LCD_displayCharacter+0xf6>
    3af2:	27 c0       	rjmp	.+78     	; 0x3b42 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af4:	8e 01       	movw	r16, r28
    3af6:	07 5a       	subi	r16, 0xA7	; 167
    3af8:	1f 4f       	sbci	r17, 0xFF	; 255
    3afa:	fe 01       	movw	r30, r28
    3afc:	e5 5a       	subi	r30, 0xA5	; 165
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	f8 01       	movw	r30, r16
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	de 01       	movw	r26, r28
    3b18:	ab 5a       	subi	r26, 0xAB	; 171
    3b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e7 5a       	subi	r30, 0xA7	; 167
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	80 81       	ld	r24, Z
    3b24:	91 81       	ldd	r25, Z+1	; 0x01
    3b26:	8d 93       	st	X+, r24
    3b28:	9c 93       	st	X, r25
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	eb 5a       	subi	r30, 0xAB	; 171
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	f1 f7       	brne	.-4      	; 0x3b34 <LCD_displayCharacter+0x184>
    3b38:	fe 01       	movw	r30, r28
    3b3a:	eb 5a       	subi	r30, 0xAB	; 171
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	91 83       	std	Z+1, r25	; 0x01
    3b40:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	62 e0       	ldi	r22, 0x02	; 2
    3b46:	41 e0       	ldi	r20, 0x01	; 1
    3b48:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ef 5a       	subi	r30, 0xAF	; 175
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	a0 e8       	ldi	r26, 0x80	; 128
    3b58:	bf e3       	ldi	r27, 0x3F	; 63
    3b5a:	80 83       	st	Z, r24
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	a2 83       	std	Z+2, r26	; 0x02
    3b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b62:	8e 01       	movw	r16, r28
    3b64:	03 5b       	subi	r16, 0xB3	; 179
    3b66:	1f 4f       	sbci	r17, 0xFF	; 255
    3b68:	fe 01       	movw	r30, r28
    3b6a:	ef 5a       	subi	r30, 0xAF	; 175
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	60 81       	ld	r22, Z
    3b70:	71 81       	ldd	r23, Z+1	; 0x01
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	93 81       	ldd	r25, Z+3	; 0x03
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	4a ef       	ldi	r20, 0xFA	; 250
    3b7c:	54 e4       	ldi	r21, 0x44	; 68
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	f8 01       	movw	r30, r16
    3b88:	80 83       	st	Z, r24
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	a2 83       	std	Z+2, r26	; 0x02
    3b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b90:	fe 01       	movw	r30, r28
    3b92:	e3 5b       	subi	r30, 0xB3	; 179
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	5f e3       	ldi	r21, 0x3F	; 63
    3ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3baa:	88 23       	and	r24, r24
    3bac:	44 f4       	brge	.+16     	; 0x3bbe <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e5 5b       	subi	r30, 0xB5	; 181
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    3bbc:	64 c0       	rjmp	.+200    	; 0x3c86 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e3 5b       	subi	r30, 0xB3	; 179
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	60 81       	ld	r22, Z
    3bc6:	71 81       	ldd	r23, Z+1	; 0x01
    3bc8:	82 81       	ldd	r24, Z+2	; 0x02
    3bca:	93 81       	ldd	r25, Z+3	; 0x03
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	3f ef       	ldi	r19, 0xFF	; 255
    3bd0:	4f e7       	ldi	r20, 0x7F	; 127
    3bd2:	57 e4       	ldi	r21, 0x47	; 71
    3bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bd8:	18 16       	cp	r1, r24
    3bda:	0c f0       	brlt	.+2      	; 0x3bde <LCD_displayCharacter+0x22e>
    3bdc:	43 c0       	rjmp	.+134    	; 0x3c64 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bde:	fe 01       	movw	r30, r28
    3be0:	ef 5a       	subi	r30, 0xAF	; 175
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e2       	ldi	r20, 0x20	; 32
    3bf2:	51 e4       	ldi	r21, 0x41	; 65
    3bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	8e 01       	movw	r16, r28
    3bfe:	05 5b       	subi	r16, 0xB5	; 181
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	f8 01       	movw	r30, r16
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	80 83       	st	Z, r24
    3c14:	1f c0       	rjmp	.+62     	; 0x3c54 <LCD_displayCharacter+0x2a4>
    3c16:	fe 01       	movw	r30, r28
    3c18:	e7 5b       	subi	r30, 0xB7	; 183
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	88 ec       	ldi	r24, 0xC8	; 200
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	80 83       	st	Z, r24
    3c24:	fe 01       	movw	r30, r28
    3c26:	e7 5b       	subi	r30, 0xB7	; 183
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <LCD_displayCharacter+0x27e>
    3c32:	fe 01       	movw	r30, r28
    3c34:	e7 5b       	subi	r30, 0xB7	; 183
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3c:	de 01       	movw	r26, r28
    3c3e:	a5 5b       	subi	r26, 0xB5	; 181
    3c40:	bf 4f       	sbci	r27, 0xFF	; 255
    3c42:	fe 01       	movw	r30, r28
    3c44:	e5 5b       	subi	r30, 0xB5	; 181
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	11 96       	adiw	r26, 0x01	; 1
    3c50:	9c 93       	st	X, r25
    3c52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c54:	fe 01       	movw	r30, r28
    3c56:	e5 5b       	subi	r30, 0xB5	; 181
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	00 97       	sbiw	r24, 0x00	; 0
    3c60:	d1 f6       	brne	.-76     	; 0x3c16 <LCD_displayCharacter+0x266>
    3c62:	27 c0       	rjmp	.+78     	; 0x3cb2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c64:	8e 01       	movw	r16, r28
    3c66:	05 5b       	subi	r16, 0xB5	; 181
    3c68:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e3 5b       	subi	r30, 0xB3	; 179
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	60 81       	ld	r22, Z
    3c72:	71 81       	ldd	r23, Z+1	; 0x01
    3c74:	82 81       	ldd	r24, Z+2	; 0x02
    3c76:	93 81       	ldd	r25, Z+3	; 0x03
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	f8 01       	movw	r30, r16
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
    3c86:	de 01       	movw	r26, r28
    3c88:	a9 5b       	subi	r26, 0xB9	; 185
    3c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e5 5b       	subi	r30, 0xB5	; 181
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	8d 93       	st	X+, r24
    3c98:	9c 93       	st	X, r25
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e9 5b       	subi	r30, 0xB9	; 185
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	80 81       	ld	r24, Z
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <LCD_displayCharacter+0x2f4>
    3ca8:	fe 01       	movw	r30, r28
    3caa:	e9 5b       	subi	r30, 0xB9	; 185
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	91 83       	std	Z+1, r25	; 0x01
    3cb0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	ed 59       	subi	r30, 0x9D	; 157
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	80 81       	ld	r24, Z
    3cba:	88 2f       	mov	r24, r24
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	80 71       	andi	r24, 0x10	; 16
    3cc0:	90 70       	andi	r25, 0x00	; 0
    3cc2:	95 95       	asr	r25
    3cc4:	87 95       	ror	r24
    3cc6:	95 95       	asr	r25
    3cc8:	87 95       	ror	r24
    3cca:	95 95       	asr	r25
    3ccc:	87 95       	ror	r24
    3cce:	95 95       	asr	r25
    3cd0:	87 95       	ror	r24
    3cd2:	98 2f       	mov	r25, r24
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	63 e0       	ldi	r22, 0x03	; 3
    3cd8:	49 2f       	mov	r20, r25
    3cda:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3cde:	fe 01       	movw	r30, r28
    3ce0:	ed 59       	subi	r30, 0x9D	; 157
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	80 81       	ld	r24, Z
    3ce6:	88 2f       	mov	r24, r24
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	80 72       	andi	r24, 0x20	; 32
    3cec:	90 70       	andi	r25, 0x00	; 0
    3cee:	95 95       	asr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	95 95       	asr	r25
    3cf4:	87 95       	ror	r24
    3cf6:	95 95       	asr	r25
    3cf8:	87 95       	ror	r24
    3cfa:	95 95       	asr	r25
    3cfc:	87 95       	ror	r24
    3cfe:	95 95       	asr	r25
    3d00:	87 95       	ror	r24
    3d02:	98 2f       	mov	r25, r24
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	64 e0       	ldi	r22, 0x04	; 4
    3d08:	49 2f       	mov	r20, r25
    3d0a:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3d0e:	fe 01       	movw	r30, r28
    3d10:	ed 59       	subi	r30, 0x9D	; 157
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	80 81       	ld	r24, Z
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	80 74       	andi	r24, 0x40	; 64
    3d1c:	90 70       	andi	r25, 0x00	; 0
    3d1e:	08 2e       	mov	r0, r24
    3d20:	89 2f       	mov	r24, r25
    3d22:	00 0c       	add	r0, r0
    3d24:	88 1f       	adc	r24, r24
    3d26:	99 0b       	sbc	r25, r25
    3d28:	00 0c       	add	r0, r0
    3d2a:	88 1f       	adc	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	98 2f       	mov	r25, r24
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	65 e0       	ldi	r22, 0x05	; 5
    3d34:	49 2f       	mov	r20, r25
    3d36:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ed 59       	subi	r30, 0x9D	; 157
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	80 81       	ld	r24, Z
    3d42:	98 2f       	mov	r25, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	99 27       	eor	r25, r25
    3d48:	99 1f       	adc	r25, r25
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	66 e0       	ldi	r22, 0x06	; 6
    3d4e:	49 2f       	mov	r20, r25
    3d50:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3d54:	fe 01       	movw	r30, r28
    3d56:	ed 5b       	subi	r30, 0xBD	; 189
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	a0 e8       	ldi	r26, 0x80	; 128
    3d60:	bf e3       	ldi	r27, 0x3F	; 63
    3d62:	80 83       	st	Z, r24
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	a2 83       	std	Z+2, r26	; 0x02
    3d68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d6a:	8e 01       	movw	r16, r28
    3d6c:	01 5c       	subi	r16, 0xC1	; 193
    3d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d70:	fe 01       	movw	r30, r28
    3d72:	ed 5b       	subi	r30, 0xBD	; 189
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	4a ef       	ldi	r20, 0xFA	; 250
    3d84:	54 e4       	ldi	r21, 0x44	; 68
    3d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	f8 01       	movw	r30, r16
    3d90:	80 83       	st	Z, r24
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	a2 83       	std	Z+2, r26	; 0x02
    3d96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d98:	fe 01       	movw	r30, r28
    3d9a:	ff 96       	adiw	r30, 0x3f	; 63
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e8       	ldi	r20, 0x80	; 128
    3daa:	5f e3       	ldi	r21, 0x3F	; 63
    3dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3db0:	88 23       	and	r24, r24
    3db2:	2c f4       	brge	.+10     	; 0x3dbe <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	9e af       	std	Y+62, r25	; 0x3e
    3dba:	8d af       	std	Y+61, r24	; 0x3d
    3dbc:	46 c0       	rjmp	.+140    	; 0x3e4a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ff 96       	adiw	r30, 0x3f	; 63
    3dc2:	60 81       	ld	r22, Z
    3dc4:	71 81       	ldd	r23, Z+1	; 0x01
    3dc6:	82 81       	ldd	r24, Z+2	; 0x02
    3dc8:	93 81       	ldd	r25, Z+3	; 0x03
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	3f ef       	ldi	r19, 0xFF	; 255
    3dce:	4f e7       	ldi	r20, 0x7F	; 127
    3dd0:	57 e4       	ldi	r21, 0x47	; 71
    3dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dd6:	18 16       	cp	r1, r24
    3dd8:	64 f5       	brge	.+88     	; 0x3e32 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dda:	fe 01       	movw	r30, r28
    3ddc:	ed 5b       	subi	r30, 0xBD	; 189
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	60 81       	ld	r22, Z
    3de2:	71 81       	ldd	r23, Z+1	; 0x01
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	93 81       	ldd	r25, Z+3	; 0x03
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	40 e2       	ldi	r20, 0x20	; 32
    3dee:	51 e4       	ldi	r21, 0x41	; 65
    3df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	9e af       	std	Y+62, r25	; 0x3e
    3e06:	8d af       	std	Y+61, r24	; 0x3d
    3e08:	0f c0       	rjmp	.+30     	; 0x3e28 <LCD_displayCharacter+0x478>
    3e0a:	88 ec       	ldi	r24, 0xC8	; 200
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	9c af       	std	Y+60, r25	; 0x3c
    3e10:	8b af       	std	Y+59, r24	; 0x3b
    3e12:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e14:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	f1 f7       	brne	.-4      	; 0x3e16 <LCD_displayCharacter+0x466>
    3e1a:	9c af       	std	Y+60, r25	; 0x3c
    3e1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e20:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e22:	01 97       	sbiw	r24, 0x01	; 1
    3e24:	9e af       	std	Y+62, r25	; 0x3e
    3e26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e28:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	69 f7       	brne	.-38     	; 0x3e0a <LCD_displayCharacter+0x45a>
    3e30:	16 c0       	rjmp	.+44     	; 0x3e5e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e32:	fe 01       	movw	r30, r28
    3e34:	ff 96       	adiw	r30, 0x3f	; 63
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	93 81       	ldd	r25, Z+3	; 0x03
    3e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	9e af       	std	Y+62, r25	; 0x3e
    3e48:	8d af       	std	Y+61, r24	; 0x3d
    3e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e4e:	9a af       	std	Y+58, r25	; 0x3a
    3e50:	89 af       	std	Y+57, r24	; 0x39
    3e52:	89 ad       	ldd	r24, Y+57	; 0x39
    3e54:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <LCD_displayCharacter+0x4a6>
    3e5a:	9a af       	std	Y+58, r25	; 0x3a
    3e5c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	62 e0       	ldi	r22, 0x02	; 2
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	a0 e8       	ldi	r26, 0x80	; 128
    3e6e:	bf e3       	ldi	r27, 0x3F	; 63
    3e70:	8d ab       	std	Y+53, r24	; 0x35
    3e72:	9e ab       	std	Y+54, r25	; 0x36
    3e74:	af ab       	std	Y+55, r26	; 0x37
    3e76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e78:	6d a9       	ldd	r22, Y+53	; 0x35
    3e7a:	7e a9       	ldd	r23, Y+54	; 0x36
    3e7c:	8f a9       	ldd	r24, Y+55	; 0x37
    3e7e:	98 ad       	ldd	r25, Y+56	; 0x38
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	4a ef       	ldi	r20, 0xFA	; 250
    3e86:	54 e4       	ldi	r21, 0x44	; 68
    3e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8c:	dc 01       	movw	r26, r24
    3e8e:	cb 01       	movw	r24, r22
    3e90:	89 ab       	std	Y+49, r24	; 0x31
    3e92:	9a ab       	std	Y+50, r25	; 0x32
    3e94:	ab ab       	std	Y+51, r26	; 0x33
    3e96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e98:	69 a9       	ldd	r22, Y+49	; 0x31
    3e9a:	7a a9       	ldd	r23, Y+50	; 0x32
    3e9c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e9e:	9c a9       	ldd	r25, Y+52	; 0x34
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	40 e8       	ldi	r20, 0x80	; 128
    3ea6:	5f e3       	ldi	r21, 0x3F	; 63
    3ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3eac:	88 23       	and	r24, r24
    3eae:	2c f4       	brge	.+10     	; 0x3eba <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	98 ab       	std	Y+48, r25	; 0x30
    3eb6:	8f a7       	std	Y+47, r24	; 0x2f
    3eb8:	3f c0       	rjmp	.+126    	; 0x3f38 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3eba:	69 a9       	ldd	r22, Y+49	; 0x31
    3ebc:	7a a9       	ldd	r23, Y+50	; 0x32
    3ebe:	8b a9       	ldd	r24, Y+51	; 0x33
    3ec0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	3f ef       	ldi	r19, 0xFF	; 255
    3ec6:	4f e7       	ldi	r20, 0x7F	; 127
    3ec8:	57 e4       	ldi	r21, 0x47	; 71
    3eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ece:	18 16       	cp	r1, r24
    3ed0:	4c f5       	brge	.+82     	; 0x3f24 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ed4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ed6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ed8:	98 ad       	ldd	r25, Y+56	; 0x38
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e2       	ldi	r20, 0x20	; 32
    3ee0:	51 e4       	ldi	r21, 0x41	; 65
    3ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	bc 01       	movw	r22, r24
    3eec:	cd 01       	movw	r24, r26
    3eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	98 ab       	std	Y+48, r25	; 0x30
    3ef8:	8f a7       	std	Y+47, r24	; 0x2f
    3efa:	0f c0       	rjmp	.+30     	; 0x3f1a <LCD_displayCharacter+0x56a>
    3efc:	88 ec       	ldi	r24, 0xC8	; 200
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9e a7       	std	Y+46, r25	; 0x2e
    3f02:	8d a7       	std	Y+45, r24	; 0x2d
    3f04:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f06:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	f1 f7       	brne	.-4      	; 0x3f08 <LCD_displayCharacter+0x558>
    3f0c:	9e a7       	std	Y+46, r25	; 0x2e
    3f0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f10:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f12:	98 a9       	ldd	r25, Y+48	; 0x30
    3f14:	01 97       	sbiw	r24, 0x01	; 1
    3f16:	98 ab       	std	Y+48, r25	; 0x30
    3f18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f1c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f1e:	00 97       	sbiw	r24, 0x00	; 0
    3f20:	69 f7       	brne	.-38     	; 0x3efc <LCD_displayCharacter+0x54c>
    3f22:	14 c0       	rjmp	.+40     	; 0x3f4c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f24:	69 a9       	ldd	r22, Y+49	; 0x31
    3f26:	7a a9       	ldd	r23, Y+50	; 0x32
    3f28:	8b a9       	ldd	r24, Y+51	; 0x33
    3f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	98 ab       	std	Y+48, r25	; 0x30
    3f36:	8f a7       	std	Y+47, r24	; 0x2f
    3f38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f3c:	9c a7       	std	Y+44, r25	; 0x2c
    3f3e:	8b a7       	std	Y+43, r24	; 0x2b
    3f40:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f42:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <LCD_displayCharacter+0x594>
    3f48:	9c a7       	std	Y+44, r25	; 0x2c
    3f4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	62 e0       	ldi	r22, 0x02	; 2
    3f50:	41 e0       	ldi	r20, 0x01	; 1
    3f52:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	a0 e8       	ldi	r26, 0x80	; 128
    3f5c:	bf e3       	ldi	r27, 0x3F	; 63
    3f5e:	8f a3       	std	Y+39, r24	; 0x27
    3f60:	98 a7       	std	Y+40, r25	; 0x28
    3f62:	a9 a7       	std	Y+41, r26	; 0x29
    3f64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f66:	6f a1       	ldd	r22, Y+39	; 0x27
    3f68:	78 a5       	ldd	r23, Y+40	; 0x28
    3f6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3f6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	4a ef       	ldi	r20, 0xFA	; 250
    3f74:	54 e4       	ldi	r21, 0x44	; 68
    3f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	8b a3       	std	Y+35, r24	; 0x23
    3f80:	9c a3       	std	Y+36, r25	; 0x24
    3f82:	ad a3       	std	Y+37, r26	; 0x25
    3f84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f86:	6b a1       	ldd	r22, Y+35	; 0x23
    3f88:	7c a1       	ldd	r23, Y+36	; 0x24
    3f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	40 e8       	ldi	r20, 0x80	; 128
    3f94:	5f e3       	ldi	r21, 0x3F	; 63
    3f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f9a:	88 23       	and	r24, r24
    3f9c:	2c f4       	brge	.+10     	; 0x3fa8 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	9a a3       	std	Y+34, r25	; 0x22
    3fa4:	89 a3       	std	Y+33, r24	; 0x21
    3fa6:	3f c0       	rjmp	.+126    	; 0x4026 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    3faa:	7c a1       	ldd	r23, Y+36	; 0x24
    3fac:	8d a1       	ldd	r24, Y+37	; 0x25
    3fae:	9e a1       	ldd	r25, Y+38	; 0x26
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	3f ef       	ldi	r19, 0xFF	; 255
    3fb4:	4f e7       	ldi	r20, 0x7F	; 127
    3fb6:	57 e4       	ldi	r21, 0x47	; 71
    3fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fbc:	18 16       	cp	r1, r24
    3fbe:	4c f5       	brge	.+82     	; 0x4012 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc0:	6f a1       	ldd	r22, Y+39	; 0x27
    3fc2:	78 a5       	ldd	r23, Y+40	; 0x28
    3fc4:	89 a5       	ldd	r24, Y+41	; 0x29
    3fc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	40 e2       	ldi	r20, 0x20	; 32
    3fce:	51 e4       	ldi	r21, 0x41	; 65
    3fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	bc 01       	movw	r22, r24
    3fda:	cd 01       	movw	r24, r26
    3fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	9a a3       	std	Y+34, r25	; 0x22
    3fe6:	89 a3       	std	Y+33, r24	; 0x21
    3fe8:	0f c0       	rjmp	.+30     	; 0x4008 <LCD_displayCharacter+0x658>
    3fea:	88 ec       	ldi	r24, 0xC8	; 200
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	98 a3       	std	Y+32, r25	; 0x20
    3ff0:	8f 8f       	std	Y+31, r24	; 0x1f
    3ff2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ff4:	98 a1       	ldd	r25, Y+32	; 0x20
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <LCD_displayCharacter+0x646>
    3ffa:	98 a3       	std	Y+32, r25	; 0x20
    3ffc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    4000:	9a a1       	ldd	r25, Y+34	; 0x22
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	9a a3       	std	Y+34, r25	; 0x22
    4006:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4008:	89 a1       	ldd	r24, Y+33	; 0x21
    400a:	9a a1       	ldd	r25, Y+34	; 0x22
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	69 f7       	brne	.-38     	; 0x3fea <LCD_displayCharacter+0x63a>
    4010:	14 c0       	rjmp	.+40     	; 0x403a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4012:	6b a1       	ldd	r22, Y+35	; 0x23
    4014:	7c a1       	ldd	r23, Y+36	; 0x24
    4016:	8d a1       	ldd	r24, Y+37	; 0x25
    4018:	9e a1       	ldd	r25, Y+38	; 0x26
    401a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	9a a3       	std	Y+34, r25	; 0x22
    4024:	89 a3       	std	Y+33, r24	; 0x21
    4026:	89 a1       	ldd	r24, Y+33	; 0x21
    4028:	9a a1       	ldd	r25, Y+34	; 0x22
    402a:	9e 8f       	std	Y+30, r25	; 0x1e
    402c:	8d 8f       	std	Y+29, r24	; 0x1d
    402e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4030:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	f1 f7       	brne	.-4      	; 0x4032 <LCD_displayCharacter+0x682>
    4036:	9e 8f       	std	Y+30, r25	; 0x1e
    4038:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    403a:	fe 01       	movw	r30, r28
    403c:	ed 59       	subi	r30, 0x9D	; 157
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	80 81       	ld	r24, Z
    4042:	98 2f       	mov	r25, r24
    4044:	91 70       	andi	r25, 0x01	; 1
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	63 e0       	ldi	r22, 0x03	; 3
    404a:	49 2f       	mov	r20, r25
    404c:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    4050:	fe 01       	movw	r30, r28
    4052:	ed 59       	subi	r30, 0x9D	; 157
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	80 81       	ld	r24, Z
    4058:	88 2f       	mov	r24, r24
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	82 70       	andi	r24, 0x02	; 2
    405e:	90 70       	andi	r25, 0x00	; 0
    4060:	95 95       	asr	r25
    4062:	87 95       	ror	r24
    4064:	98 2f       	mov	r25, r24
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	64 e0       	ldi	r22, 0x04	; 4
    406a:	49 2f       	mov	r20, r25
    406c:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    4070:	fe 01       	movw	r30, r28
    4072:	ed 59       	subi	r30, 0x9D	; 157
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	80 81       	ld	r24, Z
    4078:	88 2f       	mov	r24, r24
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	84 70       	andi	r24, 0x04	; 4
    407e:	90 70       	andi	r25, 0x00	; 0
    4080:	95 95       	asr	r25
    4082:	87 95       	ror	r24
    4084:	95 95       	asr	r25
    4086:	87 95       	ror	r24
    4088:	98 2f       	mov	r25, r24
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	65 e0       	ldi	r22, 0x05	; 5
    408e:	49 2f       	mov	r20, r25
    4090:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    4094:	fe 01       	movw	r30, r28
    4096:	ed 59       	subi	r30, 0x9D	; 157
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 81       	ld	r24, Z
    409c:	88 2f       	mov	r24, r24
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	88 70       	andi	r24, 0x08	; 8
    40a2:	90 70       	andi	r25, 0x00	; 0
    40a4:	95 95       	asr	r25
    40a6:	87 95       	ror	r24
    40a8:	95 95       	asr	r25
    40aa:	87 95       	ror	r24
    40ac:	95 95       	asr	r25
    40ae:	87 95       	ror	r24
    40b0:	98 2f       	mov	r25, r24
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	66 e0       	ldi	r22, 0x06	; 6
    40b6:	49 2f       	mov	r20, r25
    40b8:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	a0 e8       	ldi	r26, 0x80	; 128
    40c2:	bf e3       	ldi	r27, 0x3F	; 63
    40c4:	89 8f       	std	Y+25, r24	; 0x19
    40c6:	9a 8f       	std	Y+26, r25	; 0x1a
    40c8:	ab 8f       	std	Y+27, r26	; 0x1b
    40ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40cc:	69 8d       	ldd	r22, Y+25	; 0x19
    40ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	4a ef       	ldi	r20, 0xFA	; 250
    40da:	54 e4       	ldi	r21, 0x44	; 68
    40dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	8d 8b       	std	Y+21, r24	; 0x15
    40e6:	9e 8b       	std	Y+22, r25	; 0x16
    40e8:	af 8b       	std	Y+23, r26	; 0x17
    40ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40ec:	6d 89       	ldd	r22, Y+21	; 0x15
    40ee:	7e 89       	ldd	r23, Y+22	; 0x16
    40f0:	8f 89       	ldd	r24, Y+23	; 0x17
    40f2:	98 8d       	ldd	r25, Y+24	; 0x18
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e8       	ldi	r20, 0x80	; 128
    40fa:	5f e3       	ldi	r21, 0x3F	; 63
    40fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4100:	88 23       	and	r24, r24
    4102:	2c f4       	brge	.+10     	; 0x410e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	9c 8b       	std	Y+20, r25	; 0x14
    410a:	8b 8b       	std	Y+19, r24	; 0x13
    410c:	3f c0       	rjmp	.+126    	; 0x418c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    410e:	6d 89       	ldd	r22, Y+21	; 0x15
    4110:	7e 89       	ldd	r23, Y+22	; 0x16
    4112:	8f 89       	ldd	r24, Y+23	; 0x17
    4114:	98 8d       	ldd	r25, Y+24	; 0x18
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	3f ef       	ldi	r19, 0xFF	; 255
    411a:	4f e7       	ldi	r20, 0x7F	; 127
    411c:	57 e4       	ldi	r21, 0x47	; 71
    411e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4122:	18 16       	cp	r1, r24
    4124:	4c f5       	brge	.+82     	; 0x4178 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4126:	69 8d       	ldd	r22, Y+25	; 0x19
    4128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    412a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    412c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 e2       	ldi	r20, 0x20	; 32
    4134:	51 e4       	ldi	r21, 0x41	; 65
    4136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	bc 01       	movw	r22, r24
    4140:	cd 01       	movw	r24, r26
    4142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	9c 8b       	std	Y+20, r25	; 0x14
    414c:	8b 8b       	std	Y+19, r24	; 0x13
    414e:	0f c0       	rjmp	.+30     	; 0x416e <LCD_displayCharacter+0x7be>
    4150:	88 ec       	ldi	r24, 0xC8	; 200
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	9a 8b       	std	Y+18, r25	; 0x12
    4156:	89 8b       	std	Y+17, r24	; 0x11
    4158:	89 89       	ldd	r24, Y+17	; 0x11
    415a:	9a 89       	ldd	r25, Y+18	; 0x12
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	f1 f7       	brne	.-4      	; 0x415c <LCD_displayCharacter+0x7ac>
    4160:	9a 8b       	std	Y+18, r25	; 0x12
    4162:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4164:	8b 89       	ldd	r24, Y+19	; 0x13
    4166:	9c 89       	ldd	r25, Y+20	; 0x14
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	9c 8b       	std	Y+20, r25	; 0x14
    416c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416e:	8b 89       	ldd	r24, Y+19	; 0x13
    4170:	9c 89       	ldd	r25, Y+20	; 0x14
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	69 f7       	brne	.-38     	; 0x4150 <LCD_displayCharacter+0x7a0>
    4176:	14 c0       	rjmp	.+40     	; 0x41a0 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4178:	6d 89       	ldd	r22, Y+21	; 0x15
    417a:	7e 89       	ldd	r23, Y+22	; 0x16
    417c:	8f 89       	ldd	r24, Y+23	; 0x17
    417e:	98 8d       	ldd	r25, Y+24	; 0x18
    4180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	9c 8b       	std	Y+20, r25	; 0x14
    418a:	8b 8b       	std	Y+19, r24	; 0x13
    418c:	8b 89       	ldd	r24, Y+19	; 0x13
    418e:	9c 89       	ldd	r25, Y+20	; 0x14
    4190:	98 8b       	std	Y+16, r25	; 0x10
    4192:	8f 87       	std	Y+15, r24	; 0x0f
    4194:	8f 85       	ldd	r24, Y+15	; 0x0f
    4196:	98 89       	ldd	r25, Y+16	; 0x10
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	f1 f7       	brne	.-4      	; 0x4198 <LCD_displayCharacter+0x7e8>
    419c:	98 8b       	std	Y+16, r25	; 0x10
    419e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	62 e0       	ldi	r22, 0x02	; 2
    41a4:	40 e0       	ldi	r20, 0x00	; 0
    41a6:	0e 94 c4 13 	call	0x2788	; 0x2788 <GPIO_writePin>
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	a0 e8       	ldi	r26, 0x80	; 128
    41b0:	bf e3       	ldi	r27, 0x3F	; 63
    41b2:	8b 87       	std	Y+11, r24	; 0x0b
    41b4:	9c 87       	std	Y+12, r25	; 0x0c
    41b6:	ad 87       	std	Y+13, r26	; 0x0d
    41b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    41bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41be:	8d 85       	ldd	r24, Y+13	; 0x0d
    41c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	4a ef       	ldi	r20, 0xFA	; 250
    41c8:	54 e4       	ldi	r21, 0x44	; 68
    41ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	8f 83       	std	Y+7, r24	; 0x07
    41d4:	98 87       	std	Y+8, r25	; 0x08
    41d6:	a9 87       	std	Y+9, r26	; 0x09
    41d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41da:	6f 81       	ldd	r22, Y+7	; 0x07
    41dc:	78 85       	ldd	r23, Y+8	; 0x08
    41de:	89 85       	ldd	r24, Y+9	; 0x09
    41e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e8       	ldi	r20, 0x80	; 128
    41e8:	5f e3       	ldi	r21, 0x3F	; 63
    41ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41ee:	88 23       	and	r24, r24
    41f0:	2c f4       	brge	.+10     	; 0x41fc <LCD_displayCharacter+0x84c>
		__ticks = 1;
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	9e 83       	std	Y+6, r25	; 0x06
    41f8:	8d 83       	std	Y+5, r24	; 0x05
    41fa:	3f c0       	rjmp	.+126    	; 0x427a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    41fc:	6f 81       	ldd	r22, Y+7	; 0x07
    41fe:	78 85       	ldd	r23, Y+8	; 0x08
    4200:	89 85       	ldd	r24, Y+9	; 0x09
    4202:	9a 85       	ldd	r25, Y+10	; 0x0a
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	3f ef       	ldi	r19, 0xFF	; 255
    4208:	4f e7       	ldi	r20, 0x7F	; 127
    420a:	57 e4       	ldi	r21, 0x47	; 71
    420c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4210:	18 16       	cp	r1, r24
    4212:	4c f5       	brge	.+82     	; 0x4266 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4214:	6b 85       	ldd	r22, Y+11	; 0x0b
    4216:	7c 85       	ldd	r23, Y+12	; 0x0c
    4218:	8d 85       	ldd	r24, Y+13	; 0x0d
    421a:	9e 85       	ldd	r25, Y+14	; 0x0e
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	40 e2       	ldi	r20, 0x20	; 32
    4222:	51 e4       	ldi	r21, 0x41	; 65
    4224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	bc 01       	movw	r22, r24
    422e:	cd 01       	movw	r24, r26
    4230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	9e 83       	std	Y+6, r25	; 0x06
    423a:	8d 83       	std	Y+5, r24	; 0x05
    423c:	0f c0       	rjmp	.+30     	; 0x425c <LCD_displayCharacter+0x8ac>
    423e:	88 ec       	ldi	r24, 0xC8	; 200
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	9c 83       	std	Y+4, r25	; 0x04
    4244:	8b 83       	std	Y+3, r24	; 0x03
    4246:	8b 81       	ldd	r24, Y+3	; 0x03
    4248:	9c 81       	ldd	r25, Y+4	; 0x04
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <LCD_displayCharacter+0x89a>
    424e:	9c 83       	std	Y+4, r25	; 0x04
    4250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4252:	8d 81       	ldd	r24, Y+5	; 0x05
    4254:	9e 81       	ldd	r25, Y+6	; 0x06
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	9e 83       	std	Y+6, r25	; 0x06
    425a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425c:	8d 81       	ldd	r24, Y+5	; 0x05
    425e:	9e 81       	ldd	r25, Y+6	; 0x06
    4260:	00 97       	sbiw	r24, 0x00	; 0
    4262:	69 f7       	brne	.-38     	; 0x423e <LCD_displayCharacter+0x88e>
    4264:	14 c0       	rjmp	.+40     	; 0x428e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4266:	6f 81       	ldd	r22, Y+7	; 0x07
    4268:	78 85       	ldd	r23, Y+8	; 0x08
    426a:	89 85       	ldd	r24, Y+9	; 0x09
    426c:	9a 85       	ldd	r25, Y+10	; 0x0a
    426e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	9e 83       	std	Y+6, r25	; 0x06
    4278:	8d 83       	std	Y+5, r24	; 0x05
    427a:	8d 81       	ldd	r24, Y+5	; 0x05
    427c:	9e 81       	ldd	r25, Y+6	; 0x06
    427e:	9a 83       	std	Y+2, r25	; 0x02
    4280:	89 83       	std	Y+1, r24	; 0x01
    4282:	89 81       	ldd	r24, Y+1	; 0x01
    4284:	9a 81       	ldd	r25, Y+2	; 0x02
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <LCD_displayCharacter+0x8d6>
    428a:	9a 83       	std	Y+2, r25	; 0x02
    428c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    428e:	cd 59       	subi	r28, 0x9D	; 157
    4290:	df 4f       	sbci	r29, 0xFF	; 255
    4292:	0f b6       	in	r0, 0x3f	; 63
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	cf 91       	pop	r28
    429e:	df 91       	pop	r29
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	08 95       	ret

000042a6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	00 d0       	rcall	.+0      	; 0x42ac <LCD_displayString+0x6>
    42ac:	0f 92       	push	r0
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	9b 83       	std	Y+3, r25	; 0x03
    42b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    42b6:	19 82       	std	Y+1, r1	; 0x01
    42b8:	0e c0       	rjmp	.+28     	; 0x42d6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	28 2f       	mov	r18, r24
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	8a 81       	ldd	r24, Y+2	; 0x02
    42c2:	9b 81       	ldd	r25, Y+3	; 0x03
    42c4:	fc 01       	movw	r30, r24
    42c6:	e2 0f       	add	r30, r18
    42c8:	f3 1f       	adc	r31, r19
    42ca:	80 81       	ld	r24, Z
    42cc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_displayCharacter>
		i++;
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	28 2f       	mov	r18, r24
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	8a 81       	ldd	r24, Y+2	; 0x02
    42de:	9b 81       	ldd	r25, Y+3	; 0x03
    42e0:	fc 01       	movw	r30, r24
    42e2:	e2 0f       	add	r30, r18
    42e4:	f3 1f       	adc	r31, r19
    42e6:	80 81       	ld	r24, Z
    42e8:	88 23       	and	r24, r24
    42ea:	39 f7       	brne	.-50     	; 0x42ba <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    42ec:	0f 90       	pop	r0
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	cf 91       	pop	r28
    42f4:	df 91       	pop	r29
    42f6:	08 95       	ret

000042f8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    42f8:	df 93       	push	r29
    42fa:	cf 93       	push	r28
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <LCD_moveCursor+0x6>
    42fe:	00 d0       	rcall	.+0      	; 0x4300 <LCD_moveCursor+0x8>
    4300:	0f 92       	push	r0
    4302:	cd b7       	in	r28, 0x3d	; 61
    4304:	de b7       	in	r29, 0x3e	; 62
    4306:	8a 83       	std	Y+2, r24	; 0x02
    4308:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    430a:	8a 81       	ldd	r24, Y+2	; 0x02
    430c:	28 2f       	mov	r18, r24
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	3d 83       	std	Y+5, r19	; 0x05
    4312:	2c 83       	std	Y+4, r18	; 0x04
    4314:	8c 81       	ldd	r24, Y+4	; 0x04
    4316:	9d 81       	ldd	r25, Y+5	; 0x05
    4318:	81 30       	cpi	r24, 0x01	; 1
    431a:	91 05       	cpc	r25, r1
    431c:	c1 f0       	breq	.+48     	; 0x434e <LCD_moveCursor+0x56>
    431e:	2c 81       	ldd	r18, Y+4	; 0x04
    4320:	3d 81       	ldd	r19, Y+5	; 0x05
    4322:	22 30       	cpi	r18, 0x02	; 2
    4324:	31 05       	cpc	r19, r1
    4326:	2c f4       	brge	.+10     	; 0x4332 <LCD_moveCursor+0x3a>
    4328:	8c 81       	ldd	r24, Y+4	; 0x04
    432a:	9d 81       	ldd	r25, Y+5	; 0x05
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	61 f0       	breq	.+24     	; 0x4348 <LCD_moveCursor+0x50>
    4330:	19 c0       	rjmp	.+50     	; 0x4364 <LCD_moveCursor+0x6c>
    4332:	2c 81       	ldd	r18, Y+4	; 0x04
    4334:	3d 81       	ldd	r19, Y+5	; 0x05
    4336:	22 30       	cpi	r18, 0x02	; 2
    4338:	31 05       	cpc	r19, r1
    433a:	69 f0       	breq	.+26     	; 0x4356 <LCD_moveCursor+0x5e>
    433c:	8c 81       	ldd	r24, Y+4	; 0x04
    433e:	9d 81       	ldd	r25, Y+5	; 0x05
    4340:	83 30       	cpi	r24, 0x03	; 3
    4342:	91 05       	cpc	r25, r1
    4344:	61 f0       	breq	.+24     	; 0x435e <LCD_moveCursor+0x66>
    4346:	0e c0       	rjmp	.+28     	; 0x4364 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    4348:	8b 81       	ldd	r24, Y+3	; 0x03
    434a:	89 83       	std	Y+1, r24	; 0x01
    434c:	0b c0       	rjmp	.+22     	; 0x4364 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    434e:	8b 81       	ldd	r24, Y+3	; 0x03
    4350:	80 5c       	subi	r24, 0xC0	; 192
    4352:	89 83       	std	Y+1, r24	; 0x01
    4354:	07 c0       	rjmp	.+14     	; 0x4364 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    4356:	8b 81       	ldd	r24, Y+3	; 0x03
    4358:	80 5f       	subi	r24, 0xF0	; 240
    435a:	89 83       	std	Y+1, r24	; 0x01
    435c:	03 c0       	rjmp	.+6      	; 0x4364 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    435e:	8b 81       	ldd	r24, Y+3	; 0x03
    4360:	80 5b       	subi	r24, 0xB0	; 176
    4362:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4364:	89 81       	ldd	r24, Y+1	; 0x01
    4366:	80 68       	ori	r24, 0x80	; 128
    4368:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>
}
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	00 d0       	rcall	.+0      	; 0x4382 <LCD_displayStringRowColumn+0x6>
    4382:	00 d0       	rcall	.+0      	; 0x4384 <LCD_displayStringRowColumn+0x8>
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	6a 83       	std	Y+2, r22	; 0x02
    438c:	5c 83       	std	Y+4, r21	; 0x04
    438e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	6a 81       	ldd	r22, Y+2	; 0x02
    4394:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	9c 81       	ldd	r25, Y+4	; 0x04
    439c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <LCD_displayString>
}
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	cf 91       	pop	r28
    43aa:	df 91       	pop	r29
    43ac:	08 95       	ret

000043ae <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    43ae:	df 93       	push	r29
    43b0:	cf 93       	push	r28
    43b2:	cd b7       	in	r28, 0x3d	; 61
    43b4:	de b7       	in	r29, 0x3e	; 62
    43b6:	62 97       	sbiw	r28, 0x12	; 18
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	9a 8b       	std	Y+18, r25	; 0x12
    43c4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    43c6:	89 89       	ldd	r24, Y+17	; 0x11
    43c8:	9a 89       	ldd	r25, Y+18	; 0x12
    43ca:	9e 01       	movw	r18, r28
    43cc:	2f 5f       	subi	r18, 0xFF	; 255
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	b9 01       	movw	r22, r18
    43d2:	4a e0       	ldi	r20, 0x0A	; 10
    43d4:	50 e0       	ldi	r21, 0x00	; 0
    43d6:	0e 94 5d 22 	call	0x44ba	; 0x44ba <itoa>
   LCD_displayString(buff); /* Display the string */
    43da:	ce 01       	movw	r24, r28
    43dc:	01 96       	adiw	r24, 0x01	; 1
    43de:	0e 94 53 21 	call	0x42a6	; 0x42a6 <LCD_displayString>
}
    43e2:	62 96       	adiw	r28, 0x12	; 18
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
    43ee:	cf 91       	pop	r28
    43f0:	df 91       	pop	r29
    43f2:	08 95       	ret

000043f4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    43f4:	df 93       	push	r29
    43f6:	cf 93       	push	r28
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_sendCommand>
}
    4402:	cf 91       	pop	r28
    4404:	df 91       	pop	r29
    4406:	08 95       	ret

00004408 <__udivmodsi4>:
    4408:	a1 e2       	ldi	r26, 0x21	; 33
    440a:	1a 2e       	mov	r1, r26
    440c:	aa 1b       	sub	r26, r26
    440e:	bb 1b       	sub	r27, r27
    4410:	fd 01       	movw	r30, r26
    4412:	0d c0       	rjmp	.+26     	; 0x442e <__udivmodsi4_ep>

00004414 <__udivmodsi4_loop>:
    4414:	aa 1f       	adc	r26, r26
    4416:	bb 1f       	adc	r27, r27
    4418:	ee 1f       	adc	r30, r30
    441a:	ff 1f       	adc	r31, r31
    441c:	a2 17       	cp	r26, r18
    441e:	b3 07       	cpc	r27, r19
    4420:	e4 07       	cpc	r30, r20
    4422:	f5 07       	cpc	r31, r21
    4424:	20 f0       	brcs	.+8      	; 0x442e <__udivmodsi4_ep>
    4426:	a2 1b       	sub	r26, r18
    4428:	b3 0b       	sbc	r27, r19
    442a:	e4 0b       	sbc	r30, r20
    442c:	f5 0b       	sbc	r31, r21

0000442e <__udivmodsi4_ep>:
    442e:	66 1f       	adc	r22, r22
    4430:	77 1f       	adc	r23, r23
    4432:	88 1f       	adc	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	1a 94       	dec	r1
    4438:	69 f7       	brne	.-38     	; 0x4414 <__udivmodsi4_loop>
    443a:	60 95       	com	r22
    443c:	70 95       	com	r23
    443e:	80 95       	com	r24
    4440:	90 95       	com	r25
    4442:	9b 01       	movw	r18, r22
    4444:	ac 01       	movw	r20, r24
    4446:	bd 01       	movw	r22, r26
    4448:	cf 01       	movw	r24, r30
    444a:	08 95       	ret

0000444c <__prologue_saves__>:
    444c:	2f 92       	push	r2
    444e:	3f 92       	push	r3
    4450:	4f 92       	push	r4
    4452:	5f 92       	push	r5
    4454:	6f 92       	push	r6
    4456:	7f 92       	push	r7
    4458:	8f 92       	push	r8
    445a:	9f 92       	push	r9
    445c:	af 92       	push	r10
    445e:	bf 92       	push	r11
    4460:	cf 92       	push	r12
    4462:	df 92       	push	r13
    4464:	ef 92       	push	r14
    4466:	ff 92       	push	r15
    4468:	0f 93       	push	r16
    446a:	1f 93       	push	r17
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	ca 1b       	sub	r28, r26
    4476:	db 0b       	sbc	r29, r27
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	cd bf       	out	0x3d, r28	; 61
    4482:	09 94       	ijmp

00004484 <__epilogue_restores__>:
    4484:	2a 88       	ldd	r2, Y+18	; 0x12
    4486:	39 88       	ldd	r3, Y+17	; 0x11
    4488:	48 88       	ldd	r4, Y+16	; 0x10
    448a:	5f 84       	ldd	r5, Y+15	; 0x0f
    448c:	6e 84       	ldd	r6, Y+14	; 0x0e
    448e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4490:	8c 84       	ldd	r8, Y+12	; 0x0c
    4492:	9b 84       	ldd	r9, Y+11	; 0x0b
    4494:	aa 84       	ldd	r10, Y+10	; 0x0a
    4496:	b9 84       	ldd	r11, Y+9	; 0x09
    4498:	c8 84       	ldd	r12, Y+8	; 0x08
    449a:	df 80       	ldd	r13, Y+7	; 0x07
    449c:	ee 80       	ldd	r14, Y+6	; 0x06
    449e:	fd 80       	ldd	r15, Y+5	; 0x05
    44a0:	0c 81       	ldd	r16, Y+4	; 0x04
    44a2:	1b 81       	ldd	r17, Y+3	; 0x03
    44a4:	aa 81       	ldd	r26, Y+2	; 0x02
    44a6:	b9 81       	ldd	r27, Y+1	; 0x01
    44a8:	ce 0f       	add	r28, r30
    44aa:	d1 1d       	adc	r29, r1
    44ac:	0f b6       	in	r0, 0x3f	; 63
    44ae:	f8 94       	cli
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	cd bf       	out	0x3d, r28	; 61
    44b6:	ed 01       	movw	r28, r26
    44b8:	08 95       	ret

000044ba <itoa>:
    44ba:	fb 01       	movw	r30, r22
    44bc:	9f 01       	movw	r18, r30
    44be:	e8 94       	clt
    44c0:	42 30       	cpi	r20, 0x02	; 2
    44c2:	c4 f0       	brlt	.+48     	; 0x44f4 <itoa+0x3a>
    44c4:	45 32       	cpi	r20, 0x25	; 37
    44c6:	b4 f4       	brge	.+44     	; 0x44f4 <itoa+0x3a>
    44c8:	4a 30       	cpi	r20, 0x0A	; 10
    44ca:	29 f4       	brne	.+10     	; 0x44d6 <itoa+0x1c>
    44cc:	97 fb       	bst	r25, 7
    44ce:	1e f4       	brtc	.+6      	; 0x44d6 <itoa+0x1c>
    44d0:	90 95       	com	r25
    44d2:	81 95       	neg	r24
    44d4:	9f 4f       	sbci	r25, 0xFF	; 255
    44d6:	64 2f       	mov	r22, r20
    44d8:	77 27       	eor	r23, r23
    44da:	0e 94 8e 22 	call	0x451c	; 0x451c <__udivmodhi4>
    44de:	80 5d       	subi	r24, 0xD0	; 208
    44e0:	8a 33       	cpi	r24, 0x3A	; 58
    44e2:	0c f0       	brlt	.+2      	; 0x44e6 <itoa+0x2c>
    44e4:	89 5d       	subi	r24, 0xD9	; 217
    44e6:	81 93       	st	Z+, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	00 97       	sbiw	r24, 0x00	; 0
    44ec:	a1 f7       	brne	.-24     	; 0x44d6 <itoa+0x1c>
    44ee:	16 f4       	brtc	.+4      	; 0x44f4 <itoa+0x3a>
    44f0:	5d e2       	ldi	r21, 0x2D	; 45
    44f2:	51 93       	st	Z+, r21
    44f4:	10 82       	st	Z, r1
    44f6:	c9 01       	movw	r24, r18
    44f8:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <strrev>

000044fc <strrev>:
    44fc:	dc 01       	movw	r26, r24
    44fe:	fc 01       	movw	r30, r24
    4500:	67 2f       	mov	r22, r23
    4502:	71 91       	ld	r23, Z+
    4504:	77 23       	and	r23, r23
    4506:	e1 f7       	brne	.-8      	; 0x4500 <strrev+0x4>
    4508:	32 97       	sbiw	r30, 0x02	; 2
    450a:	04 c0       	rjmp	.+8      	; 0x4514 <strrev+0x18>
    450c:	7c 91       	ld	r23, X
    450e:	6d 93       	st	X+, r22
    4510:	70 83       	st	Z, r23
    4512:	62 91       	ld	r22, -Z
    4514:	ae 17       	cp	r26, r30
    4516:	bf 07       	cpc	r27, r31
    4518:	c8 f3       	brcs	.-14     	; 0x450c <strrev+0x10>
    451a:	08 95       	ret

0000451c <__udivmodhi4>:
    451c:	aa 1b       	sub	r26, r26
    451e:	bb 1b       	sub	r27, r27
    4520:	51 e1       	ldi	r21, 0x11	; 17
    4522:	07 c0       	rjmp	.+14     	; 0x4532 <__udivmodhi4_ep>

00004524 <__udivmodhi4_loop>:
    4524:	aa 1f       	adc	r26, r26
    4526:	bb 1f       	adc	r27, r27
    4528:	a6 17       	cp	r26, r22
    452a:	b7 07       	cpc	r27, r23
    452c:	10 f0       	brcs	.+4      	; 0x4532 <__udivmodhi4_ep>
    452e:	a6 1b       	sub	r26, r22
    4530:	b7 0b       	sbc	r27, r23

00004532 <__udivmodhi4_ep>:
    4532:	88 1f       	adc	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	5a 95       	dec	r21
    4538:	a9 f7       	brne	.-22     	; 0x4524 <__udivmodhi4_loop>
    453a:	80 95       	com	r24
    453c:	90 95       	com	r25
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	08 95       	ret

00004544 <_exit>:
    4544:	f8 94       	cli

00004546 <__stop_program>:
    4546:	ff cf       	rjmp	.-2      	; 0x4546 <__stop_program>
