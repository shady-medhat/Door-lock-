
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000038fe  00003992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007c  0080007c  000039ae  2**0
                  ALLOC
  3 .stab         00003330  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127a  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000820a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000baec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 14 	call	0x2906	; 0x2906 <main>
      8a:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 */

#include "gpio.h"
#include "Buzzer.h"
// function for initiating the buzzer
void Buzzer_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID, PIN_OUTPUT); /*setting PC5 as an output*/
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 4f 18 	call	0x309e	; 0x309e <GPIO_setupPinDirection>
	 GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID, LOGIC_LOW );/*putting 0 initially on Buzzer pin*/
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	65 e0       	ldi	r22, 0x05	; 5
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 3a 19 	call	0x3274	; 0x3274 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID, LOGIC_HIGH );/*setting buzzer*/
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 3a 19 	call	0x3274	; 0x3274 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID, LOGIC_LOW ); /*clearing buzzer*/
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	65 e0       	ldi	r22, 0x05	; 5
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 3a 19 	call	0x3274	; 0x3274 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <check_Identical>:
uint8 g_tick; /*incrementing variable used to use Timer 1 as a delay*/
uint8 pass[PASSWORD_LENGTH],pass_2[PASSWORD_LENGTH];/*2 arrays to hold passwords all over the Module*/
uint8_t receive; /*variable used to recieve Needed operation from the other MCU*/

/*Function used to check if 2 password given equal or not*/
uint8 check_Identical(uint8_t* array1, uint8_t* array2, uint8_t length) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	27 97       	sbiw	r28, 0x07	; 7
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	9b 83       	std	Y+3, r25	; 0x03
     bae:	8a 83       	std	Y+2, r24	; 0x02
     bb0:	7d 83       	std	Y+5, r23	; 0x05
     bb2:	6c 83       	std	Y+4, r22	; 0x04
     bb4:	4e 83       	std	Y+6, r20	; 0x06
    for (uint8_t i = 0; i < length; i++) {
     bb6:	19 82       	std	Y+1, r1	; 0x01
     bb8:	19 c0       	rjmp	.+50     	; 0xbec <check_Identical+0x54>
        if (array1[i] != array2[i]) {
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	9b 81       	ldd	r25, Y+3	; 0x03
     bc4:	fc 01       	movw	r30, r24
     bc6:	e2 0f       	add	r30, r18
     bc8:	f3 1f       	adc	r31, r19
     bca:	40 81       	ld	r20, Z
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	8c 81       	ldd	r24, Y+4	; 0x04
     bd4:	9d 81       	ldd	r25, Y+5	; 0x05
     bd6:	fc 01       	movw	r30, r24
     bd8:	e2 0f       	add	r30, r18
     bda:	f3 1f       	adc	r31, r19
     bdc:	80 81       	ld	r24, Z
     bde:	48 17       	cp	r20, r24
     be0:	11 f0       	breq	.+4      	; 0xbe6 <check_Identical+0x4e>
            return 0; // Arrays are not identical
     be2:	1f 82       	std	Y+7, r1	; 0x07
     be4:	09 c0       	rjmp	.+18     	; 0xbf8 <check_Identical+0x60>
uint8 pass[PASSWORD_LENGTH],pass_2[PASSWORD_LENGTH];/*2 arrays to hold passwords all over the Module*/
uint8_t receive; /*variable used to recieve Needed operation from the other MCU*/

/*Function used to check if 2 password given equal or not*/
uint8 check_Identical(uint8_t* array1, uint8_t* array2, uint8_t length) {
    for (uint8_t i = 0; i < length; i++) {
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	98 17       	cp	r25, r24
     bf2:	18 f3       	brcs	.-58     	; 0xbba <check_Identical+0x22>
        if (array1[i] != array2[i]) {
            return 0; // Arrays are not identical
        }
    }
    return 1; // Arrays are identical
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	8f 83       	std	Y+7, r24	; 0x07
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
}
     bfa:	27 96       	adiw	r28, 0x07	; 7
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <Initiating_Passwords>:
/*Function used to initialize the password and save in EEPROM*/
void Initiating_Passwords()
{
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	ca 54       	subi	r28, 0x4A	; 74
     c1a:	d0 40       	sbci	r29, 0x00	; 0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
	uint8 Identical;/* variable to hold value after checking identicality*/


	for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
     c26:	fe 01       	movw	r30, r28
     c28:	e7 5b       	subi	r30, 0xB7	; 183
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	10 82       	st	Z, r1
     c2e:	0f c1       	rjmp	.+542    	; 0xe4e <Initiating_Passwords+0x242>
        UART_sendByte(MC2_READY);
     c30:	80 e1       	ldi	r24, 0x10	; 16
     c32:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
     c36:	fe 01       	movw	r30, r28
     c38:	ed 5b       	subi	r30, 0xBD	; 189
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	a8 e4       	ldi	r26, 0x48	; 72
     c42:	b3 e4       	ldi	r27, 0x43	; 67
     c44:	80 83       	st	Z, r24
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	a2 83       	std	Z+2, r26	; 0x02
     c4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4c:	8e 01       	movw	r16, r28
     c4e:	01 5c       	subi	r16, 0xC1	; 193
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
     c52:	fe 01       	movw	r30, r28
     c54:	ed 5b       	subi	r30, 0xBD	; 189
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	60 81       	ld	r22, Z
     c5a:	71 81       	ldd	r23, Z+1	; 0x01
     c5c:	82 81       	ldd	r24, Z+2	; 0x02
     c5e:	93 81       	ldd	r25, Z+3	; 0x03
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a ef       	ldi	r20, 0xFA	; 250
     c66:	54 e4       	ldi	r21, 0x44	; 68
     c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	f8 01       	movw	r30, r16
     c72:	80 83       	st	Z, r24
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	a2 83       	std	Z+2, r26	; 0x02
     c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c7a:	fe 01       	movw	r30, r28
     c7c:	ff 96       	adiw	r30, 0x3f	; 63
     c7e:	60 81       	ld	r22, Z
     c80:	71 81       	ldd	r23, Z+1	; 0x01
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c92:	88 23       	and	r24, r24
     c94:	2c f4       	brge	.+10     	; 0xca0 <Initiating_Passwords+0x94>
		__ticks = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9e af       	std	Y+62, r25	; 0x3e
     c9c:	8d af       	std	Y+61, r24	; 0x3d
     c9e:	46 c0       	rjmp	.+140    	; 0xd2c <Initiating_Passwords+0x120>
	else if (__tmp > 65535)
     ca0:	fe 01       	movw	r30, r28
     ca2:	ff 96       	adiw	r30, 0x3f	; 63
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	4f e7       	ldi	r20, 0x7F	; 127
     cb2:	57 e4       	ldi	r21, 0x47	; 71
     cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cb8:	18 16       	cp	r1, r24
     cba:	64 f5       	brge	.+88     	; 0xd14 <Initiating_Passwords+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbc:	fe 01       	movw	r30, r28
     cbe:	ed 5b       	subi	r30, 0xBD	; 189
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	60 81       	ld	r22, Z
     cc4:	71 81       	ldd	r23, Z+1	; 0x01
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	93 81       	ldd	r25, Z+3	; 0x03
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e2       	ldi	r20, 0x20	; 32
     cd0:	51 e4       	ldi	r21, 0x41	; 65
     cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	bc 01       	movw	r22, r24
     cdc:	cd 01       	movw	r24, r26
     cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	9e af       	std	Y+62, r25	; 0x3e
     ce8:	8d af       	std	Y+61, r24	; 0x3d
     cea:	0f c0       	rjmp	.+30     	; 0xd0a <Initiating_Passwords+0xfe>
     cec:	88 ec       	ldi	r24, 0xC8	; 200
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9c af       	std	Y+60, r25	; 0x3c
     cf2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf4:	8b ad       	ldd	r24, Y+59	; 0x3b
     cf6:	9c ad       	ldd	r25, Y+60	; 0x3c
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <Initiating_Passwords+0xec>
     cfc:	9c af       	std	Y+60, r25	; 0x3c
     cfe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d00:	8d ad       	ldd	r24, Y+61	; 0x3d
     d02:	9e ad       	ldd	r25, Y+62	; 0x3e
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	9e af       	std	Y+62, r25	; 0x3e
     d08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0a:	8d ad       	ldd	r24, Y+61	; 0x3d
     d0c:	9e ad       	ldd	r25, Y+62	; 0x3e
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	69 f7       	brne	.-38     	; 0xcec <Initiating_Passwords+0xe0>
     d12:	16 c0       	rjmp	.+44     	; 0xd40 <Initiating_Passwords+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d14:	fe 01       	movw	r30, r28
     d16:	ff 96       	adiw	r30, 0x3f	; 63
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9e af       	std	Y+62, r25	; 0x3e
     d2a:	8d af       	std	Y+61, r24	; 0x3d
     d2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     d30:	9a af       	std	Y+58, r25	; 0x3a
     d32:	89 af       	std	Y+57, r24	; 0x39
     d34:	89 ad       	ldd	r24, Y+57	; 0x39
     d36:	9a ad       	ldd	r25, Y+58	; 0x3a
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <Initiating_Passwords+0x12c>
     d3c:	9a af       	std	Y+58, r25	; 0x3a
     d3e:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(200); /*delay for communication to be done effiecently*/
		pass[i]=UART_recieveByte();
     d40:	fe 01       	movw	r30, r28
     d42:	e7 5b       	subi	r30, 0xB7	; 183
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 81       	ld	r24, Z
     d48:	08 2f       	mov	r16, r24
     d4a:	10 e0       	ldi	r17, 0x00	; 0
     d4c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
     d50:	f8 01       	movw	r30, r16
     d52:	e2 58       	subi	r30, 0x82	; 130
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	80 83       	st	Z, r24
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a8 e4       	ldi	r26, 0x48	; 72
     d5e:	b3 e4       	ldi	r27, 0x43	; 67
     d60:	8d ab       	std	Y+53, r24	; 0x35
     d62:	9e ab       	std	Y+54, r25	; 0x36
     d64:	af ab       	std	Y+55, r26	; 0x37
     d66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6d a9       	ldd	r22, Y+53	; 0x35
     d6a:	7e a9       	ldd	r23, Y+54	; 0x36
     d6c:	8f a9       	ldd	r24, Y+55	; 0x37
     d6e:	98 ad       	ldd	r25, Y+56	; 0x38
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	89 ab       	std	Y+49, r24	; 0x31
     d82:	9a ab       	std	Y+50, r25	; 0x32
     d84:	ab ab       	std	Y+51, r26	; 0x33
     d86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d88:	69 a9       	ldd	r22, Y+49	; 0x31
     d8a:	7a a9       	ldd	r23, Y+50	; 0x32
     d8c:	8b a9       	ldd	r24, Y+51	; 0x33
     d8e:	9c a9       	ldd	r25, Y+52	; 0x34
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <Initiating_Passwords+0x19e>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	98 ab       	std	Y+48, r25	; 0x30
     da6:	8f a7       	std	Y+47, r24	; 0x2f
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <Initiating_Passwords+0x21c>
	else if (__tmp > 65535)
     daa:	69 a9       	ldd	r22, Y+49	; 0x31
     dac:	7a a9       	ldd	r23, Y+50	; 0x32
     dae:	8b a9       	ldd	r24, Y+51	; 0x33
     db0:	9c a9       	ldd	r25, Y+52	; 0x34
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <Initiating_Passwords+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6d a9       	ldd	r22, Y+53	; 0x35
     dc4:	7e a9       	ldd	r23, Y+54	; 0x36
     dc6:	8f a9       	ldd	r24, Y+55	; 0x37
     dc8:	98 ad       	ldd	r25, Y+56	; 0x38
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	98 ab       	std	Y+48, r25	; 0x30
     de8:	8f a7       	std	Y+47, r24	; 0x2f
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <Initiating_Passwords+0x1fe>
     dec:	88 ec       	ldi	r24, 0xC8	; 200
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9e a7       	std	Y+46, r25	; 0x2e
     df2:	8d a7       	std	Y+45, r24	; 0x2d
     df4:	8d a5       	ldd	r24, Y+45	; 0x2d
     df6:	9e a5       	ldd	r25, Y+46	; 0x2e
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <Initiating_Passwords+0x1ec>
     dfc:	9e a7       	std	Y+46, r25	; 0x2e
     dfe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8f a5       	ldd	r24, Y+47	; 0x2f
     e02:	98 a9       	ldd	r25, Y+48	; 0x30
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	98 ab       	std	Y+48, r25	; 0x30
     e08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e0c:	98 a9       	ldd	r25, Y+48	; 0x30
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <Initiating_Passwords+0x1e0>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <Initiating_Passwords+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	69 a9       	ldd	r22, Y+49	; 0x31
     e16:	7a a9       	ldd	r23, Y+50	; 0x32
     e18:	8b a9       	ldd	r24, Y+51	; 0x33
     e1a:	9c a9       	ldd	r25, Y+52	; 0x34
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	98 ab       	std	Y+48, r25	; 0x30
     e26:	8f a7       	std	Y+47, r24	; 0x2f
     e28:	8f a5       	ldd	r24, Y+47	; 0x2f
     e2a:	98 a9       	ldd	r25, Y+48	; 0x30
     e2c:	9c a7       	std	Y+44, r25	; 0x2c
     e2e:	8b a7       	std	Y+43, r24	; 0x2b
     e30:	8b a5       	ldd	r24, Y+43	; 0x2b
     e32:	9c a5       	ldd	r25, Y+44	; 0x2c
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <Initiating_Passwords+0x228>
     e38:	9c a7       	std	Y+44, r25	; 0x2c
     e3a:	8b a7       	std	Y+43, r24	; 0x2b
void Initiating_Passwords()
{
	uint8 Identical;/* variable to hold value after checking identicality*/


	for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
     e3c:	de 01       	movw	r26, r28
     e3e:	a7 5b       	subi	r26, 0xB7	; 183
     e40:	bf 4f       	sbci	r27, 0xFF	; 255
     e42:	fe 01       	movw	r30, r28
     e44:	e7 5b       	subi	r30, 0xB7	; 183
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	80 81       	ld	r24, Z
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	8c 93       	st	X, r24
     e4e:	fe 01       	movw	r30, r28
     e50:	e7 5b       	subi	r30, 0xB7	; 183
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	80 81       	ld	r24, Z
     e56:	85 30       	cpi	r24, 0x05	; 5
     e58:	08 f4       	brcc	.+2      	; 0xe5c <Initiating_Passwords+0x250>
     e5a:	ea ce       	rjmp	.-556    	; 0xc30 <Initiating_Passwords+0x24>
        _delay_ms(200); /*delay for communication to be done effiecently*/
		pass[i]=UART_recieveByte();
		_delay_ms(200); /*delay to give time for recieving data*/
	} /*receiving the first password in an array*/

	for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
     e5c:	fe 01       	movw	r30, r28
     e5e:	e8 5b       	subi	r30, 0xB8	; 184
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	10 82       	st	Z, r1
     e64:	fc c0       	rjmp	.+504    	; 0x105e <Initiating_Passwords+0x452>
         UART_sendByte(MC2_READY);
     e66:	80 e1       	ldi	r24, 0x10	; 16
     e68:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a8 e4       	ldi	r26, 0x48	; 72
     e72:	b3 e4       	ldi	r27, 0x43	; 67
     e74:	8f a3       	std	Y+39, r24	; 0x27
     e76:	98 a7       	std	Y+40, r25	; 0x28
     e78:	a9 a7       	std	Y+41, r26	; 0x29
     e7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7c:	6f a1       	ldd	r22, Y+39	; 0x27
     e7e:	78 a5       	ldd	r23, Y+40	; 0x28
     e80:	89 a5       	ldd	r24, Y+41	; 0x29
     e82:	9a a5       	ldd	r25, Y+42	; 0x2a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a ef       	ldi	r20, 0xFA	; 250
     e8a:	54 e4       	ldi	r21, 0x44	; 68
     e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8b a3       	std	Y+35, r24	; 0x23
     e96:	9c a3       	std	Y+36, r25	; 0x24
     e98:	ad a3       	std	Y+37, r26	; 0x25
     e9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e9c:	6b a1       	ldd	r22, Y+35	; 0x23
     e9e:	7c a1       	ldd	r23, Y+36	; 0x24
     ea0:	8d a1       	ldd	r24, Y+37	; 0x25
     ea2:	9e a1       	ldd	r25, Y+38	; 0x26
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <Initiating_Passwords+0x2b2>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9a a3       	std	Y+34, r25	; 0x22
     eba:	89 a3       	std	Y+33, r24	; 0x21
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <Initiating_Passwords+0x330>
	else if (__tmp > 65535)
     ebe:	6b a1       	ldd	r22, Y+35	; 0x23
     ec0:	7c a1       	ldd	r23, Y+36	; 0x24
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	9e a1       	ldd	r25, Y+38	; 0x26
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	4c f5       	brge	.+82     	; 0xf28 <Initiating_Passwords+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	6f a1       	ldd	r22, Y+39	; 0x27
     ed8:	78 a5       	ldd	r23, Y+40	; 0x28
     eda:	89 a5       	ldd	r24, Y+41	; 0x29
     edc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9a a3       	std	Y+34, r25	; 0x22
     efc:	89 a3       	std	Y+33, r24	; 0x21
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <Initiating_Passwords+0x312>
     f00:	88 ec       	ldi	r24, 0xC8	; 200
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	98 a3       	std	Y+32, r25	; 0x20
     f06:	8f 8f       	std	Y+31, r24	; 0x1f
     f08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f0a:	98 a1       	ldd	r25, Y+32	; 0x20
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <Initiating_Passwords+0x300>
     f10:	98 a3       	std	Y+32, r25	; 0x20
     f12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	89 a1       	ldd	r24, Y+33	; 0x21
     f16:	9a a1       	ldd	r25, Y+34	; 0x22
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	9a a3       	std	Y+34, r25	; 0x22
     f1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1e:	89 a1       	ldd	r24, Y+33	; 0x21
     f20:	9a a1       	ldd	r25, Y+34	; 0x22
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f7       	brne	.-38     	; 0xf00 <Initiating_Passwords+0x2f4>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <Initiating_Passwords+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f28:	6b a1       	ldd	r22, Y+35	; 0x23
     f2a:	7c a1       	ldd	r23, Y+36	; 0x24
     f2c:	8d a1       	ldd	r24, Y+37	; 0x25
     f2e:	9e a1       	ldd	r25, Y+38	; 0x26
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9a a3       	std	Y+34, r25	; 0x22
     f3a:	89 a3       	std	Y+33, r24	; 0x21
     f3c:	89 a1       	ldd	r24, Y+33	; 0x21
     f3e:	9a a1       	ldd	r25, Y+34	; 0x22
     f40:	9e 8f       	std	Y+30, r25	; 0x1e
     f42:	8d 8f       	std	Y+29, r24	; 0x1d
     f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f46:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <Initiating_Passwords+0x33c>
     f4c:	9e 8f       	std	Y+30, r25	; 0x1e
     f4e:	8d 8f       	std	Y+29, r24	; 0x1d
         _delay_ms(200); /*delay for communication to be done effiecently*/
		 pass_2[i]=UART_recieveByte();
     f50:	fe 01       	movw	r30, r28
     f52:	e8 5b       	subi	r30, 0xB8	; 184
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	08 2f       	mov	r16, r24
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
     f60:	f8 01       	movw	r30, r16
     f62:	ed 57       	subi	r30, 0x7D	; 125
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 83       	st	Z, r24
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a8 e4       	ldi	r26, 0x48	; 72
     f6e:	b3 e4       	ldi	r27, 0x43	; 67
     f70:	89 8f       	std	Y+25, r24	; 0x19
     f72:	9a 8f       	std	Y+26, r25	; 0x1a
     f74:	ab 8f       	std	Y+27, r26	; 0x1b
     f76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f78:	69 8d       	ldd	r22, Y+25	; 0x19
     f7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8d 8b       	std	Y+21, r24	; 0x15
     f92:	9e 8b       	std	Y+22, r25	; 0x16
     f94:	af 8b       	std	Y+23, r26	; 0x17
     f96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f98:	6d 89       	ldd	r22, Y+21	; 0x15
     f9a:	7e 89       	ldd	r23, Y+22	; 0x16
     f9c:	8f 89       	ldd	r24, Y+23	; 0x17
     f9e:	98 8d       	ldd	r25, Y+24	; 0x18
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <Initiating_Passwords+0x3ae>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 8b       	std	Y+20, r25	; 0x14
     fb6:	8b 8b       	std	Y+19, r24	; 0x13
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <Initiating_Passwords+0x42c>
	else if (__tmp > 65535)
     fba:	6d 89       	ldd	r22, Y+21	; 0x15
     fbc:	7e 89       	ldd	r23, Y+22	; 0x16
     fbe:	8f 89       	ldd	r24, Y+23	; 0x17
     fc0:	98 8d       	ldd	r25, Y+24	; 0x18
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <Initiating_Passwords+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	69 8d       	ldd	r22, Y+25	; 0x19
     fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9c 8b       	std	Y+20, r25	; 0x14
     ff8:	8b 8b       	std	Y+19, r24	; 0x13
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <Initiating_Passwords+0x40e>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 8b       	std	Y+18, r25	; 0x12
    1002:	89 8b       	std	Y+17, r24	; 0x11
    1004:	89 89       	ldd	r24, Y+17	; 0x11
    1006:	9a 89       	ldd	r25, Y+18	; 0x12
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <Initiating_Passwords+0x3fc>
    100c:	9a 8b       	std	Y+18, r25	; 0x12
    100e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8b 89       	ldd	r24, Y+19	; 0x13
    101c:	9c 89       	ldd	r25, Y+20	; 0x14
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <Initiating_Passwords+0x3f0>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <Initiating_Passwords+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	8b 89       	ldd	r24, Y+19	; 0x13
    103a:	9c 89       	ldd	r25, Y+20	; 0x14
    103c:	98 8b       	std	Y+16, r25	; 0x10
    103e:	8f 87       	std	Y+15, r24	; 0x0f
    1040:	8f 85       	ldd	r24, Y+15	; 0x0f
    1042:	98 89       	ldd	r25, Y+16	; 0x10
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <Initiating_Passwords+0x438>
    1048:	98 8b       	std	Y+16, r25	; 0x10
    104a:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(200); /*delay for communication to be done effiecently*/
		pass[i]=UART_recieveByte();
		_delay_ms(200); /*delay to give time for recieving data*/
	} /*receiving the first password in an array*/

	for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    104c:	de 01       	movw	r26, r28
    104e:	a8 5b       	subi	r26, 0xB8	; 184
    1050:	bf 4f       	sbci	r27, 0xFF	; 255
    1052:	fe 01       	movw	r30, r28
    1054:	e8 5b       	subi	r30, 0xB8	; 184
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	8c 93       	st	X, r24
    105e:	fe 01       	movw	r30, r28
    1060:	e8 5b       	subi	r30, 0xB8	; 184
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	08 f4       	brcc	.+2      	; 0x106c <Initiating_Passwords+0x460>
    106a:	fd ce       	rjmp	.-518    	; 0xe66 <Initiating_Passwords+0x25a>
         UART_sendByte(MC2_READY);
         _delay_ms(200); /*delay for communication to be done effiecently*/
		 pass_2[i]=UART_recieveByte();
		 _delay_ms(200); /*delay to give time for receiving data*/
	}/*receiving the first password in an array*/
	Identical= check_Identical(pass,pass_2, PASSWORD_LENGTH);/* Checking if identical or not*/
    106c:	8e e7       	ldi	r24, 0x7E	; 126
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	23 e8       	ldi	r18, 0x83	; 131
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	b9 01       	movw	r22, r18
    1076:	45 e0       	ldi	r20, 0x05	; 5
    1078:	0e 94 cc 05 	call	0xb98	; 0xb98 <check_Identical>
    107c:	fe 01       	movw	r30, r28
    107e:	e6 5b       	subi	r30, 0xB6	; 182
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 83       	st	Z, r24
	if (Identical){
    1084:	fe 01       	movw	r30, r28
    1086:	e6 5b       	subi	r30, 0xB6	; 182
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <Initiating_Passwords+0x486>
    1090:	a1 c0       	rjmp	.+322    	; 0x11d4 <Initiating_Passwords+0x5c8>

		UART_sendByte(identical); /*send to other ECU that 2 passwords identical  */
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
		for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    1098:	fe 01       	movw	r30, r28
    109a:	e9 5b       	subi	r30, 0xB9	; 185
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	10 82       	st	Z, r1
    10a0:	91 c0       	rjmp	.+290    	; 0x11c4 <Initiating_Passwords+0x5b8>
			EEPROM_writeByte((0x01) + i, pass[i]);
    10a2:	fe 01       	movw	r30, r28
    10a4:	e9 5b       	subi	r30, 0xB9	; 185
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	ac 01       	movw	r20, r24
    10b2:	fe 01       	movw	r30, r28
    10b4:	e9 5b       	subi	r30, 0xB9	; 185
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	fc 01       	movw	r30, r24
    10c0:	e2 58       	subi	r30, 0x82	; 130
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	20 81       	ld	r18, Z
    10c6:	ca 01       	movw	r24, r20
    10c8:	62 2f       	mov	r22, r18
    10ca:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <EEPROM_writeByte>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a8 e4       	ldi	r26, 0x48	; 72
    10d4:	b3 e4       	ldi	r27, 0x43	; 67
    10d6:	8b 87       	std	Y+11, r24	; 0x0b
    10d8:	9c 87       	std	Y+12, r25	; 0x0c
    10da:	ad 87       	std	Y+13, r26	; 0x0d
    10dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10de:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a ef       	ldi	r20, 0xFA	; 250
    10ec:	54 e4       	ldi	r21, 0x44	; 68
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8f 83       	std	Y+7, r24	; 0x07
    10f8:	98 87       	std	Y+8, r25	; 0x08
    10fa:	a9 87       	std	Y+9, r26	; 0x09
    10fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1100:	78 85       	ldd	r23, Y+8	; 0x08
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1112:	88 23       	and	r24, r24
    1114:	2c f4       	brge	.+10     	; 0x1120 <Initiating_Passwords+0x514>
		__ticks = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	3f c0       	rjmp	.+126    	; 0x119e <Initiating_Passwords+0x592>
	else if (__tmp > 65535)
    1120:	6f 81       	ldd	r22, Y+7	; 0x07
    1122:	78 85       	ldd	r23, Y+8	; 0x08
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1134:	18 16       	cp	r1, r24
    1136:	4c f5       	brge	.+82     	; 0x118a <Initiating_Passwords+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1138:	6b 85       	ldd	r22, Y+11	; 0x0b
    113a:	7c 85       	ldd	r23, Y+12	; 0x0c
    113c:	8d 85       	ldd	r24, Y+13	; 0x0d
    113e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <Initiating_Passwords+0x574>
    1162:	88 ec       	ldi	r24, 0xC8	; 200
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <Initiating_Passwords+0x562>
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	69 f7       	brne	.-38     	; 0x1162 <Initiating_Passwords+0x556>
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <Initiating_Passwords+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118a:	6f 81       	ldd	r22, Y+7	; 0x07
    118c:	78 85       	ldd	r23, Y+8	; 0x08
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    1190:	9a 85       	ldd	r25, Y+10	; 0x0a
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <Initiating_Passwords+0x59e>
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
	}/*receiving the first password in an array*/
	Identical= check_Identical(pass,pass_2, PASSWORD_LENGTH);/* Checking if identical or not*/
	if (Identical){

		UART_sendByte(identical); /*send to other ECU that 2 passwords identical  */
		for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    11b2:	de 01       	movw	r26, r28
    11b4:	a9 5b       	subi	r26, 0xB9	; 185
    11b6:	bf 4f       	sbci	r27, 0xFF	; 255
    11b8:	fe 01       	movw	r30, r28
    11ba:	e9 5b       	subi	r30, 0xB9	; 185
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	8c 93       	st	X, r24
    11c4:	fe 01       	movw	r30, r28
    11c6:	e9 5b       	subi	r30, 0xB9	; 185
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	85 30       	cpi	r24, 0x05	; 5
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <Initiating_Passwords+0x5c6>
    11d0:	68 cf       	rjmp	.-304    	; 0x10a2 <Initiating_Passwords+0x496>
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <Initiating_Passwords+0x5ce>
			EEPROM_writeByte((0x01) + i, pass[i]);
			_delay_ms(200);
	} /*writing in the EEPRM The password*/
	}
	else{
		UART_sendByte(Not_identical);}/*send to other ECU that 2 passwords not identical  */
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
	}
    11da:	c6 5b       	subi	r28, 0xB6	; 182
    11dc:	df 4f       	sbci	r29, 0xFF	; 255
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	08 95       	ret

000011f2 <TIMER1_ticks>:
/*call back function that increments the g_tick every time the timer matches the compare value*/
void TIMER1_ticks()
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11fa:	80 91 88 00 	lds	r24, 0x0088
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	80 93 88 00 	sts	0x0088, r24
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <motor_operation>:
/*Function used to operate the motor */
void motor_operation(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    g_tick= 0; /*Initiallizing g tick value to start counting*/
    1212:	10 92 88 00 	sts	0x0088, r1




	if(g_tick == 5)  /* operating motor for 15 seconds CW*/
    1216:	80 91 88 00 	lds	r24, 0x0088
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	49 f4       	brne	.+18     	; 0x1230 <motor_operation+0x26>
	{

		DcMotor_Rotate(Stop,0); /* stop motor*/
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <DcMotor_Rotate>
		PWM_Timer0_Start(duty_cycle); /* operating PWM*/
    1226:	80 91 8c 00 	lds	r24, 0x008C
    122a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <PWM_Timer0_Start>
    122e:	17 c0       	rjmp	.+46     	; 0x125e <motor_operation+0x54>

	}
	else if(g_tick == 6)
    1230:	80 91 88 00 	lds	r24, 0x0088
    1234:	86 30       	cpi	r24, 0x06	; 6
    1236:	49 f4       	brne	.+18     	; 0x124a <motor_operation+0x40>
	{

		DcMotor_Rotate(Anti_Clockwise,100); /* operating motor ACW*/
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	64 e6       	ldi	r22, 0x64	; 100
    123c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <DcMotor_Rotate>
		PWM_Timer0_Start(duty_cycle); /* operating PWM*/
    1240:	80 91 8c 00 	lds	r24, 0x008C
    1244:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <PWM_Timer0_Start>
    1248:	0a c0       	rjmp	.+20     	; 0x125e <motor_operation+0x54>

	}
	else if(g_tick == 11) /* operating motor for 15 seconds ACW*/
    124a:	80 91 88 00 	lds	r24, 0x0088
    124e:	8b 30       	cpi	r24, 0x0B	; 11
    1250:	31 f4       	brne	.+12     	; 0x125e <motor_operation+0x54>
	{

		DcMotor_Rotate(Stop,0);  /* stop motor*/
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <DcMotor_Rotate>
		g_tick = 0; /*Initializing g_tick value to start counting*/
    125a:	10 92 88 00 	sts	0x0088, r1

	}
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <Open_Or_Change_operation>:
/*Function used to choose between the two options */
void Open_Or_Change_operation(uint8 receive){
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01

		if (receive == open_motor)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	59 f4       	brne	.+22     	; 0x128c <Open_Or_Change_operation+0x28>
			     {
				  DcMotor_Rotate(Clockwise,100);/*rotating motor full speed CW*/
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	64 e6       	ldi	r22, 0x64	; 100
    127a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <DcMotor_Rotate>
				  PWM_Timer0_Start(duty_cycle); /* operating PWM*/
    127e:	80 91 8c 00 	lds	r24, 0x008C
    1282:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <PWM_Timer0_Start>
				  motor_operation(); /*calling operating motor function*/
    1286:	0e 94 05 09 	call	0x120a	; 0x120a <motor_operation>
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <Open_Or_Change_operation+0x32>
			     }
		else if (receive == change_Password) {
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	88 23       	and	r24, r24
    1290:	11 f4       	brne	.+4      	; 0x1296 <Open_Or_Change_operation+0x32>

				 Initiating_Passwords();/* calling the function responsible for creating new password */
    1292:	0e 94 06 06 	call	0xc0c	; 0xc0c <Initiating_Passwords>
				 }
	}
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <Option_Processing>:

/*Function responsible for operating and managing the whole module */
void Option_Processing(){
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	c6 5e       	subi	r28, 0xE6	; 230
    12ac:	d0 40       	sbci	r29, 0x00	; 0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
uint8 Identical; /* variable to hold value after checking identicality*/
uint8 val; /* variable to hold values of password from EEPROM*/


for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    12b8:	fe 01       	movw	r30, r28
    12ba:	ec 51       	subi	r30, 0x1C	; 28
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	10 82       	st	Z, r1
    12c0:	7e c1       	rjmp	.+764    	; 0x15be <Option_Processing+0x320>
    UART_sendByte(MC2_READY);
    12c2:	80 e1       	ldi	r24, 0x10	; 16
    12c4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    12c8:	fe 01       	movw	r30, r28
    12ca:	e3 52       	subi	r30, 0x23	; 35
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a8 e4       	ldi	r26, 0x48	; 72
    12d4:	b3 e4       	ldi	r27, 0x43	; 67
    12d6:	80 83       	st	Z, r24
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	a2 83       	std	Z+2, r26	; 0x02
    12dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	8e 01       	movw	r16, r28
    12e0:	07 52       	subi	r16, 0x27	; 39
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	fe 01       	movw	r30, r28
    12e6:	e3 52       	subi	r30, 0x23	; 35
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a ef       	ldi	r20, 0xFA	; 250
    12f8:	54 e4       	ldi	r21, 0x44	; 68
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	f8 01       	movw	r30, r16
    1304:	80 83       	st	Z, r24
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	a2 83       	std	Z+2, r26	; 0x02
    130a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    130c:	fe 01       	movw	r30, r28
    130e:	e7 52       	subi	r30, 0x27	; 39
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e8       	ldi	r20, 0x80	; 128
    1320:	5f e3       	ldi	r21, 0x3F	; 63
    1322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1326:	88 23       	and	r24, r24
    1328:	44 f4       	brge	.+16     	; 0x133a <Option_Processing+0x9c>
		__ticks = 1;
    132a:	fe 01       	movw	r30, r28
    132c:	e9 52       	subi	r30, 0x29	; 41
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
    1338:	64 c0       	rjmp	.+200    	; 0x1402 <Option_Processing+0x164>
	else if (__tmp > 65535)
    133a:	fe 01       	movw	r30, r28
    133c:	e7 52       	subi	r30, 0x27	; 39
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	0c f0       	brlt	.+2      	; 0x135a <Option_Processing+0xbc>
    1358:	43 c0       	rjmp	.+134    	; 0x13e0 <Option_Processing+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135a:	fe 01       	movw	r30, r28
    135c:	e3 52       	subi	r30, 0x23	; 35
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	8e 01       	movw	r16, r28
    137a:	09 52       	subi	r16, 0x29	; 41
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	f8 01       	movw	r30, r16
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	1f c0       	rjmp	.+62     	; 0x13d0 <Option_Processing+0x132>
    1392:	fe 01       	movw	r30, r28
    1394:	eb 52       	subi	r30, 0x2B	; 43
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	88 ec       	ldi	r24, 0xC8	; 200
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
    13a0:	fe 01       	movw	r30, r28
    13a2:	eb 52       	subi	r30, 0x2B	; 43
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <Option_Processing+0x10c>
    13ae:	fe 01       	movw	r30, r28
    13b0:	eb 52       	subi	r30, 0x2B	; 43
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b8:	de 01       	movw	r26, r28
    13ba:	a9 52       	subi	r26, 0x29	; 41
    13bc:	bf 4f       	sbci	r27, 0xFF	; 255
    13be:	fe 01       	movw	r30, r28
    13c0:	e9 52       	subi	r30, 0x29	; 41
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	9c 93       	st	X, r25
    13ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	fe 01       	movw	r30, r28
    13d2:	e9 52       	subi	r30, 0x29	; 41
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	d1 f6       	brne	.-76     	; 0x1392 <Option_Processing+0xf4>
    13de:	27 c0       	rjmp	.+78     	; 0x142e <Option_Processing+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	8e 01       	movw	r16, r28
    13e2:	09 52       	subi	r16, 0x29	; 41
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	fe 01       	movw	r30, r28
    13e8:	e7 52       	subi	r30, 0x27	; 39
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	f8 01       	movw	r30, r16
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
    1402:	de 01       	movw	r26, r28
    1404:	ad 52       	subi	r26, 0x2D	; 45
    1406:	bf 4f       	sbci	r27, 0xFF	; 255
    1408:	fe 01       	movw	r30, r28
    140a:	e9 52       	subi	r30, 0x29	; 41
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	8d 93       	st	X+, r24
    1414:	9c 93       	st	X, r25
    1416:	fe 01       	movw	r30, r28
    1418:	ed 52       	subi	r30, 0x2D	; 45
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <Option_Processing+0x182>
    1424:	fe 01       	movw	r30, r28
    1426:	ed 52       	subi	r30, 0x2D	; 45
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    _delay_ms(200); /*delay for communication to be done effiecently*/
	pass[i]=UART_recieveByte();
    142e:	fe 01       	movw	r30, r28
    1430:	ec 51       	subi	r30, 0x1C	; 28
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	80 81       	ld	r24, Z
    1436:	08 2f       	mov	r16, r24
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    143e:	f8 01       	movw	r30, r16
    1440:	e2 58       	subi	r30, 0x82	; 130
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	80 83       	st	Z, r24
    1446:	fe 01       	movw	r30, r28
    1448:	e1 53       	subi	r30, 0x31	; 49
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a8 e4       	ldi	r26, 0x48	; 72
    1452:	b3 e4       	ldi	r27, 0x43	; 67
    1454:	80 83       	st	Z, r24
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	a2 83       	std	Z+2, r26	; 0x02
    145a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145c:	8e 01       	movw	r16, r28
    145e:	05 53       	subi	r16, 0x35	; 53
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	fe 01       	movw	r30, r28
    1464:	e1 53       	subi	r30, 0x31	; 49
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a ef       	ldi	r20, 0xFA	; 250
    1476:	54 e4       	ldi	r21, 0x44	; 68
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	f8 01       	movw	r30, r16
    1482:	80 83       	st	Z, r24
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	a2 83       	std	Z+2, r26	; 0x02
    1488:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    148a:	fe 01       	movw	r30, r28
    148c:	e5 53       	subi	r30, 0x35	; 53
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	44 f4       	brge	.+16     	; 0x14b8 <Option_Processing+0x21a>
		__ticks = 1;
    14a8:	fe 01       	movw	r30, r28
    14aa:	e7 53       	subi	r30, 0x37	; 55
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
    14b6:	64 c0       	rjmp	.+200    	; 0x1580 <Option_Processing+0x2e2>
	else if (__tmp > 65535)
    14b8:	fe 01       	movw	r30, r28
    14ba:	e5 53       	subi	r30, 0x35	; 53
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	0c f0       	brlt	.+2      	; 0x14d8 <Option_Processing+0x23a>
    14d6:	43 c0       	rjmp	.+134    	; 0x155e <Option_Processing+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	fe 01       	movw	r30, r28
    14da:	e1 53       	subi	r30, 0x31	; 49
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e2       	ldi	r20, 0x20	; 32
    14ec:	51 e4       	ldi	r21, 0x41	; 65
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8e 01       	movw	r16, r28
    14f8:	07 53       	subi	r16, 0x37	; 55
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	f8 01       	movw	r30, r16
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	1f c0       	rjmp	.+62     	; 0x154e <Option_Processing+0x2b0>
    1510:	fe 01       	movw	r30, r28
    1512:	e9 53       	subi	r30, 0x39	; 57
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	88 ec       	ldi	r24, 0xC8	; 200
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
    151e:	fe 01       	movw	r30, r28
    1520:	e9 53       	subi	r30, 0x39	; 57
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <Option_Processing+0x28a>
    152c:	fe 01       	movw	r30, r28
    152e:	e9 53       	subi	r30, 0x39	; 57
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	de 01       	movw	r26, r28
    1538:	a7 53       	subi	r26, 0x37	; 55
    153a:	bf 4f       	sbci	r27, 0xFF	; 255
    153c:	fe 01       	movw	r30, r28
    153e:	e7 53       	subi	r30, 0x37	; 55
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	11 96       	adiw	r26, 0x01	; 1
    154a:	9c 93       	st	X, r25
    154c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	fe 01       	movw	r30, r28
    1550:	e7 53       	subi	r30, 0x37	; 55
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	d1 f6       	brne	.-76     	; 0x1510 <Option_Processing+0x272>
    155c:	27 c0       	rjmp	.+78     	; 0x15ac <Option_Processing+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	8e 01       	movw	r16, r28
    1560:	07 53       	subi	r16, 0x37	; 55
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	fe 01       	movw	r30, r28
    1566:	e5 53       	subi	r30, 0x35	; 53
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	60 81       	ld	r22, Z
    156c:	71 81       	ldd	r23, Z+1	; 0x01
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	f8 01       	movw	r30, r16
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
    1580:	de 01       	movw	r26, r28
    1582:	ab 53       	subi	r26, 0x3B	; 59
    1584:	bf 4f       	sbci	r27, 0xFF	; 255
    1586:	fe 01       	movw	r30, r28
    1588:	e7 53       	subi	r30, 0x37	; 55
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	8d 93       	st	X+, r24
    1592:	9c 93       	st	X, r25
    1594:	fe 01       	movw	r30, r28
    1596:	eb 53       	subi	r30, 0x3B	; 59
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <Option_Processing+0x300>
    15a2:	fe 01       	movw	r30, r28
    15a4:	eb 53       	subi	r30, 0x3B	; 59
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
void Option_Processing(){
uint8 Identical; /* variable to hold value after checking identicality*/
uint8 val; /* variable to hold values of password from EEPROM*/


for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    15ac:	de 01       	movw	r26, r28
    15ae:	ac 51       	subi	r26, 0x1C	; 28
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	ec 51       	subi	r30, 0x1C	; 28
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	8c 93       	st	X, r24
    15be:	fe 01       	movw	r30, r28
    15c0:	ec 51       	subi	r30, 0x1C	; 28
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	85 30       	cpi	r24, 0x05	; 5
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <Option_Processing+0x32e>
    15ca:	7b ce       	rjmp	.-778    	; 0x12c2 <Option_Processing+0x24>
    _delay_ms(200); /*delay for communication to be done effiecently*/
	pass[i]=UART_recieveByte();
	_delay_ms(200); /*delay to give time for recieving data*/
} /*receiving the sent password in an array*/

for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    15cc:	fe 01       	movw	r30, r28
    15ce:	ed 51       	subi	r30, 0x1D	; 29
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	10 82       	st	Z, r1
    15d4:	d7 c0       	rjmp	.+430    	; 0x1784 <Option_Processing+0x4e6>
	        EEPROM_readByte((0x01) + i,&val);
    15d6:	fe 01       	movw	r30, r28
    15d8:	ed 51       	subi	r30, 0x1D	; 29
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	9e 01       	movw	r18, r28
    15e6:	2a 51       	subi	r18, 0x1A	; 26
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	b9 01       	movw	r22, r18
    15ec:	0e 94 ef 17 	call	0x2fde	; 0x2fde <EEPROM_readByte>
    15f0:	fe 01       	movw	r30, r28
    15f2:	ef 53       	subi	r30, 0x3F	; 63
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a8 e4       	ldi	r26, 0x48	; 72
    15fc:	b3 e4       	ldi	r27, 0x43	; 67
    15fe:	80 83       	st	Z, r24
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	a2 83       	std	Z+2, r26	; 0x02
    1604:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	8e 01       	movw	r16, r28
    1608:	03 54       	subi	r16, 0x43	; 67
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	fe 01       	movw	r30, r28
    160e:	ef 53       	subi	r30, 0x3F	; 63
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	80 83       	st	Z, r24
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	a2 83       	std	Z+2, r26	; 0x02
    1632:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1634:	fe 01       	movw	r30, r28
    1636:	e3 54       	subi	r30, 0x43	; 67
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	5f e3       	ldi	r21, 0x3F	; 63
    164a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164e:	88 23       	and	r24, r24
    1650:	44 f4       	brge	.+16     	; 0x1662 <Option_Processing+0x3c4>
		__ticks = 1;
    1652:	fe 01       	movw	r30, r28
    1654:	e5 54       	subi	r30, 0x45	; 69
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
    1660:	64 c0       	rjmp	.+200    	; 0x172a <Option_Processing+0x48c>
	else if (__tmp > 65535)
    1662:	fe 01       	movw	r30, r28
    1664:	e3 54       	subi	r30, 0x43	; 67
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	0c f0       	brlt	.+2      	; 0x1682 <Option_Processing+0x3e4>
    1680:	43 c0       	rjmp	.+134    	; 0x1708 <Option_Processing+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	fe 01       	movw	r30, r28
    1684:	ef 53       	subi	r30, 0x3F	; 63
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8e 01       	movw	r16, r28
    16a2:	05 54       	subi	r16, 0x45	; 69
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	f8 01       	movw	r30, r16
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	80 83       	st	Z, r24
    16b8:	1f c0       	rjmp	.+62     	; 0x16f8 <Option_Processing+0x45a>
    16ba:	fe 01       	movw	r30, r28
    16bc:	e7 54       	subi	r30, 0x47	; 71
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	88 ec       	ldi	r24, 0xC8	; 200
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	fe 01       	movw	r30, r28
    16ca:	e7 54       	subi	r30, 0x47	; 71
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <Option_Processing+0x434>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e7 54       	subi	r30, 0x47	; 71
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	de 01       	movw	r26, r28
    16e2:	a5 54       	subi	r26, 0x45	; 69
    16e4:	bf 4f       	sbci	r27, 0xFF	; 255
    16e6:	fe 01       	movw	r30, r28
    16e8:	e5 54       	subi	r30, 0x45	; 69
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 81       	ld	r24, Z
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	11 96       	adiw	r26, 0x01	; 1
    16f4:	9c 93       	st	X, r25
    16f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	fe 01       	movw	r30, r28
    16fa:	e5 54       	subi	r30, 0x45	; 69
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	d1 f6       	brne	.-76     	; 0x16ba <Option_Processing+0x41c>
    1706:	27 c0       	rjmp	.+78     	; 0x1756 <Option_Processing+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1708:	8e 01       	movw	r16, r28
    170a:	05 54       	subi	r16, 0x45	; 69
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e3 54       	subi	r30, 0x43	; 67
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	f8 01       	movw	r30, r16
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24
    172a:	de 01       	movw	r26, r28
    172c:	a9 54       	subi	r26, 0x49	; 73
    172e:	bf 4f       	sbci	r27, 0xFF	; 255
    1730:	fe 01       	movw	r30, r28
    1732:	e5 54       	subi	r30, 0x45	; 69
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	8d 93       	st	X+, r24
    173c:	9c 93       	st	X, r25
    173e:	fe 01       	movw	r30, r28
    1740:	e9 54       	subi	r30, 0x49	; 73
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <Option_Processing+0x4aa>
    174c:	fe 01       	movw	r30, r28
    174e:	e9 54       	subi	r30, 0x49	; 73
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
	        _delay_ms(200);
		    pass_2[i] = val;} /* getting the password from EEPROM to compare it with given pass*/
    1756:	fe 01       	movw	r30, r28
    1758:	ed 51       	subi	r30, 0x1D	; 29
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	fe 01       	movw	r30, r28
    1764:	ea 51       	subi	r30, 0x1A	; 26
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	20 81       	ld	r18, Z
    176a:	fc 01       	movw	r30, r24
    176c:	ed 57       	subi	r30, 0x7D	; 125
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	20 83       	st	Z, r18
    _delay_ms(200); /*delay for communication to be done effiecently*/
	pass[i]=UART_recieveByte();
	_delay_ms(200); /*delay to give time for recieving data*/
} /*receiving the sent password in an array*/

for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    1772:	de 01       	movw	r26, r28
    1774:	ad 51       	subi	r26, 0x1D	; 29
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	ed 51       	subi	r30, 0x1D	; 29
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	8c 93       	st	X, r24
    1784:	fe 01       	movw	r30, r28
    1786:	ed 51       	subi	r30, 0x1D	; 29
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	08 f4       	brcc	.+2      	; 0x1792 <Option_Processing+0x4f4>
    1790:	22 cf       	rjmp	.-444    	; 0x15d6 <Option_Processing+0x338>
	        EEPROM_readByte((0x01) + i,&val);
	        _delay_ms(200);
		    pass_2[i] = val;} /* getting the password from EEPROM to compare it with given pass*/

Identical= check_Identical(pass,pass_2, PASSWORD_LENGTH); /* Checking if identical or not*/
    1792:	8e e7       	ldi	r24, 0x7E	; 126
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	23 e8       	ldi	r18, 0x83	; 131
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	b9 01       	movw	r22, r18
    179c:	45 e0       	ldi	r20, 0x05	; 5
    179e:	0e 94 cc 05 	call	0xb98	; 0xb98 <check_Identical>
    17a2:	fe 01       	movw	r30, r28
    17a4:	eb 51       	subi	r30, 0x1B	; 27
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 83       	st	Z, r24
if (Identical){
    17aa:	fe 01       	movw	r30, r28
    17ac:	eb 51       	subi	r30, 0x1B	; 27
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <Option_Processing+0x51a>
    17b6:	75 c1       	rjmp	.+746    	; 0x1aa2 <Option_Processing+0x804>
		UART_sendByte(identical);/* send identical to other ECU*/
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    17be:	fe 01       	movw	r30, r28
    17c0:	ed 54       	subi	r30, 0x4D	; 77
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a8 e4       	ldi	r26, 0x48	; 72
    17ca:	b3 e4       	ldi	r27, 0x43	; 67
    17cc:	80 83       	st	Z, r24
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	a2 83       	std	Z+2, r26	; 0x02
    17d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	8e 01       	movw	r16, r28
    17d6:	01 55       	subi	r16, 0x51	; 81
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	ed 54       	subi	r30, 0x4D	; 77
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a ef       	ldi	r20, 0xFA	; 250
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	f8 01       	movw	r30, r16
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1802:	fe 01       	movw	r30, r28
    1804:	e1 55       	subi	r30, 0x51	; 81
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	44 f4       	brge	.+16     	; 0x1830 <Option_Processing+0x592>
		__ticks = 1;
    1820:	fe 01       	movw	r30, r28
    1822:	e3 55       	subi	r30, 0x53	; 83
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	64 c0       	rjmp	.+200    	; 0x18f8 <Option_Processing+0x65a>
	else if (__tmp > 65535)
    1830:	fe 01       	movw	r30, r28
    1832:	e1 55       	subi	r30, 0x51	; 81
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	3f ef       	ldi	r19, 0xFF	; 255
    1842:	4f e7       	ldi	r20, 0x7F	; 127
    1844:	57 e4       	ldi	r21, 0x47	; 71
    1846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184a:	18 16       	cp	r1, r24
    184c:	0c f0       	brlt	.+2      	; 0x1850 <Option_Processing+0x5b2>
    184e:	43 c0       	rjmp	.+134    	; 0x18d6 <Option_Processing+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1850:	fe 01       	movw	r30, r28
    1852:	ed 54       	subi	r30, 0x4D	; 77
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	8e 01       	movw	r16, r28
    1870:	03 55       	subi	r16, 0x53	; 83
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	f8 01       	movw	r30, r16
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
    1886:	1f c0       	rjmp	.+62     	; 0x18c6 <Option_Processing+0x628>
    1888:	fe 01       	movw	r30, r28
    188a:	e5 55       	subi	r30, 0x55	; 85
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	88 ec       	ldi	r24, 0xC8	; 200
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	fe 01       	movw	r30, r28
    1898:	e5 55       	subi	r30, 0x55	; 85
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <Option_Processing+0x602>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e5 55       	subi	r30, 0x55	; 85
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	de 01       	movw	r26, r28
    18b0:	a3 55       	subi	r26, 0x53	; 83
    18b2:	bf 4f       	sbci	r27, 0xFF	; 255
    18b4:	fe 01       	movw	r30, r28
    18b6:	e3 55       	subi	r30, 0x53	; 83
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	9c 93       	st	X, r25
    18c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	fe 01       	movw	r30, r28
    18c8:	e3 55       	subi	r30, 0x53	; 83
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	d1 f6       	brne	.-76     	; 0x1888 <Option_Processing+0x5ea>
    18d4:	27 c0       	rjmp	.+78     	; 0x1924 <Option_Processing+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	8e 01       	movw	r16, r28
    18d8:	03 55       	subi	r16, 0x53	; 83
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	fe 01       	movw	r30, r28
    18de:	e1 55       	subi	r30, 0x51	; 81
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	de 01       	movw	r26, r28
    18fa:	a7 55       	subi	r26, 0x57	; 87
    18fc:	bf 4f       	sbci	r27, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	e3 55       	subi	r30, 0x53	; 83
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	8d 93       	st	X+, r24
    190a:	9c 93       	st	X, r25
    190c:	fe 01       	movw	r30, r28
    190e:	e7 55       	subi	r30, 0x57	; 87
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <Option_Processing+0x678>
    191a:	fe 01       	movw	r30, r28
    191c:	e7 55       	subi	r30, 0x57	; 87
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
		_delay_ms(200); /*delay between 2 sending for the receiver to take time to receive efficiently*/
		UART_sendByte(MC2_READY); /* send ready Byte*/
    1924:	80 e1       	ldi	r24, 0x10	; 16
    1926:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
        receive = UART_recieveByte(); /* Receive the operation option for the ECU to work on */
    192a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    192e:	80 93 89 00 	sts	0x0089, r24
    1932:	fe 01       	movw	r30, r28
    1934:	eb 55       	subi	r30, 0x5B	; 91
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a8 e4       	ldi	r26, 0x48	; 72
    193e:	b3 e4       	ldi	r27, 0x43	; 67
    1940:	80 83       	st	Z, r24
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	a2 83       	std	Z+2, r26	; 0x02
    1946:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	8e 01       	movw	r16, r28
    194a:	0f 55       	subi	r16, 0x5F	; 95
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	eb 55       	subi	r30, 0x5B	; 91
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a ef       	ldi	r20, 0xFA	; 250
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	f8 01       	movw	r30, r16
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1976:	fe 01       	movw	r30, r28
    1978:	ef 55       	subi	r30, 0x5F	; 95
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	44 f4       	brge	.+16     	; 0x19a4 <Option_Processing+0x706>
		__ticks = 1;
    1994:	fe 01       	movw	r30, r28
    1996:	e1 56       	subi	r30, 0x61	; 97
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	64 c0       	rjmp	.+200    	; 0x1a6c <Option_Processing+0x7ce>
	else if (__tmp > 65535)
    19a4:	fe 01       	movw	r30, r28
    19a6:	ef 55       	subi	r30, 0x5F	; 95
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <Option_Processing+0x726>
    19c2:	43 c0       	rjmp	.+134    	; 0x1a4a <Option_Processing+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	fe 01       	movw	r30, r28
    19c6:	eb 55       	subi	r30, 0x5B	; 91
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8e 01       	movw	r16, r28
    19e4:	01 56       	subi	r16, 0x61	; 97
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	f8 01       	movw	r30, r16
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	1f c0       	rjmp	.+62     	; 0x1a3a <Option_Processing+0x79c>
    19fc:	fe 01       	movw	r30, r28
    19fe:	e3 56       	subi	r30, 0x63	; 99
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e3 56       	subi	r30, 0x63	; 99
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <Option_Processing+0x776>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e3 56       	subi	r30, 0x63	; 99
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	de 01       	movw	r26, r28
    1a24:	a1 56       	subi	r26, 0x61	; 97
    1a26:	bf 4f       	sbci	r27, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e1 56       	subi	r30, 0x61	; 97
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	9c 93       	st	X, r25
    1a38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 56       	subi	r30, 0x61	; 97
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	d1 f6       	brne	.-76     	; 0x19fc <Option_Processing+0x75e>
    1a48:	27 c0       	rjmp	.+78     	; 0x1a98 <Option_Processing+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	8e 01       	movw	r16, r28
    1a4c:	01 56       	subi	r16, 0x61	; 97
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	fe 01       	movw	r30, r28
    1a52:	ef 55       	subi	r30, 0x5F	; 95
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	f8 01       	movw	r30, r16
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	de 01       	movw	r26, r28
    1a6e:	a5 56       	subi	r26, 0x65	; 101
    1a70:	bf 4f       	sbci	r27, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	e1 56       	subi	r30, 0x61	; 97
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	8d 93       	st	X+, r24
    1a7e:	9c 93       	st	X, r25
    1a80:	fe 01       	movw	r30, r28
    1a82:	e5 56       	subi	r30, 0x65	; 101
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <Option_Processing+0x7ec>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e5 56       	subi	r30, 0x65	; 101
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
         _delay_ms(200);
	     Open_Or_Change_operation(receive); /* Calling the operation function with input the operation needed*/
    1a98:	80 91 89 00 	lds	r24, 0x0089
    1a9c:	0e 94 32 09 	call	0x1264	; 0x1264 <Open_Or_Change_operation>
    1aa0:	26 c7       	rjmp	.+3660   	; 0x28ee <Option_Processing+0x1650>
	}
else{

	UART_sendByte(Not_identical); /*send not identical because passwords do not match*/
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
	/*taking password again to check if identical*/
	for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ee 51       	subi	r30, 0x1E	; 30
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	10 82       	st	Z, r1
    1ab0:	7e c1       	rjmp	.+764    	; 0x1dae <Option_Processing+0xb10>
        UART_sendByte(MC2_READY);
    1ab2:	80 e1       	ldi	r24, 0x10	; 16
    1ab4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e9 56       	subi	r30, 0x69	; 105
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a8 e4       	ldi	r26, 0x48	; 72
    1ac4:	b3 e4       	ldi	r27, 0x43	; 67
    1ac6:	80 83       	st	Z, r24
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	a2 83       	std	Z+2, r26	; 0x02
    1acc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	8e 01       	movw	r16, r28
    1ad0:	0d 56       	subi	r16, 0x6D	; 109
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e9 56       	subi	r30, 0x69	; 105
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a ef       	ldi	r20, 0xFA	; 250
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 83       	st	Z, r24
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	a2 83       	std	Z+2, r26	; 0x02
    1afa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1afc:	fe 01       	movw	r30, r28
    1afe:	ed 56       	subi	r30, 0x6D	; 109
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	44 f4       	brge	.+16     	; 0x1b2a <Option_Processing+0x88c>
		__ticks = 1;
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ef 56       	subi	r30, 0x6F	; 111
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	64 c0       	rjmp	.+200    	; 0x1bf2 <Option_Processing+0x954>
	else if (__tmp > 65535)
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ed 56       	subi	r30, 0x6D	; 109
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <Option_Processing+0x8ac>
    1b48:	43 c0       	rjmp	.+134    	; 0x1bd0 <Option_Processing+0x932>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e9 56       	subi	r30, 0x69	; 105
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8e 01       	movw	r16, r28
    1b6a:	0f 56       	subi	r16, 0x6F	; 111
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	1f c0       	rjmp	.+62     	; 0x1bc0 <Option_Processing+0x922>
    1b82:	fe 01       	movw	r30, r28
    1b84:	e1 57       	subi	r30, 0x71	; 113
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	88 ec       	ldi	r24, 0xC8	; 200
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	fe 01       	movw	r30, r28
    1b92:	e1 57       	subi	r30, 0x71	; 113
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <Option_Processing+0x8fc>
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e1 57       	subi	r30, 0x71	; 113
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	de 01       	movw	r26, r28
    1baa:	af 56       	subi	r26, 0x6F	; 111
    1bac:	bf 4f       	sbci	r27, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ef 56       	subi	r30, 0x6F	; 111
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	11 96       	adiw	r26, 0x01	; 1
    1bbc:	9c 93       	st	X, r25
    1bbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ef 56       	subi	r30, 0x6F	; 111
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	d1 f6       	brne	.-76     	; 0x1b82 <Option_Processing+0x8e4>
    1bce:	27 c0       	rjmp	.+78     	; 0x1c1e <Option_Processing+0x980>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	8e 01       	movw	r16, r28
    1bd2:	0f 56       	subi	r16, 0x6F	; 111
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ed 56       	subi	r30, 0x6D	; 109
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	f8 01       	movw	r30, r16
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
    1bf2:	de 01       	movw	r26, r28
    1bf4:	a3 57       	subi	r26, 0x73	; 115
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 56       	subi	r30, 0x6F	; 111
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	8d 93       	st	X+, r24
    1c04:	9c 93       	st	X, r25
    1c06:	fe 01       	movw	r30, r28
    1c08:	e3 57       	subi	r30, 0x73	; 115
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <Option_Processing+0x972>
    1c14:	fe 01       	movw	r30, r28
    1c16:	e3 57       	subi	r30, 0x73	; 115
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
        _delay_ms(200); /*delay for communication to be done effiecently*/
		pass[i]=UART_recieveByte();
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ee 51       	subi	r30, 0x1E	; 30
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	08 2f       	mov	r16, r24
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    1c2e:	f8 01       	movw	r30, r16
    1c30:	e2 58       	subi	r30, 0x82	; 130
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 83       	st	Z, r24
    1c36:	fe 01       	movw	r30, r28
    1c38:	e7 57       	subi	r30, 0x77	; 119
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a8 e4       	ldi	r26, 0x48	; 72
    1c42:	b3 e4       	ldi	r27, 0x43	; 67
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4c:	8e 01       	movw	r16, r28
    1c4e:	0b 57       	subi	r16, 0x7B	; 123
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	fe 01       	movw	r30, r28
    1c54:	e7 57       	subi	r30, 0x77	; 119
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a ef       	ldi	r20, 0xFA	; 250
    1c66:	54 e4       	ldi	r21, 0x44	; 68
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	eb 57       	subi	r30, 0x7B	; 123
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	44 f4       	brge	.+16     	; 0x1ca8 <Option_Processing+0xa0a>
		__ticks = 1;
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ed 57       	subi	r30, 0x7D	; 125
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
    1ca6:	64 c0       	rjmp	.+200    	; 0x1d70 <Option_Processing+0xad2>
	else if (__tmp > 65535)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	eb 57       	subi	r30, 0x7B	; 123
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	0c f0       	brlt	.+2      	; 0x1cc8 <Option_Processing+0xa2a>
    1cc6:	43 c0       	rjmp	.+134    	; 0x1d4e <Option_Processing+0xab0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e7 57       	subi	r30, 0x77	; 119
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8e 01       	movw	r16, r28
    1ce8:	0d 57       	subi	r16, 0x7D	; 125
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	1f c0       	rjmp	.+62     	; 0x1d3e <Option_Processing+0xaa0>
    1d00:	fe 01       	movw	r30, r28
    1d02:	ef 57       	subi	r30, 0x7F	; 127
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	88 ec       	ldi	r24, 0xC8	; 200
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ef 57       	subi	r30, 0x7F	; 127
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <Option_Processing+0xa7a>
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ef 57       	subi	r30, 0x7F	; 127
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	de 01       	movw	r26, r28
    1d28:	ad 57       	subi	r26, 0x7D	; 125
    1d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 57       	subi	r30, 0x7D	; 125
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	11 96       	adiw	r26, 0x01	; 1
    1d3a:	9c 93       	st	X, r25
    1d3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 57       	subi	r30, 0x7D	; 125
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	d1 f6       	brne	.-76     	; 0x1d00 <Option_Processing+0xa62>
    1d4c:	27 c0       	rjmp	.+78     	; 0x1d9c <Option_Processing+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	8e 01       	movw	r16, r28
    1d50:	0d 57       	subi	r16, 0x7D	; 125
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	fe 01       	movw	r30, r28
    1d56:	eb 57       	subi	r30, 0x7B	; 123
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	80 83       	st	Z, r24
    1d70:	de 01       	movw	r26, r28
    1d72:	a1 58       	subi	r26, 0x81	; 129
    1d74:	bf 4f       	sbci	r27, 0xFF	; 255
    1d76:	fe 01       	movw	r30, r28
    1d78:	ed 57       	subi	r30, 0x7D	; 125
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	8d 93       	st	X+, r24
    1d82:	9c 93       	st	X, r25
    1d84:	fe 01       	movw	r30, r28
    1d86:	e1 58       	subi	r30, 0x81	; 129
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <Option_Processing+0xaf0>
    1d92:	fe 01       	movw	r30, r28
    1d94:	e1 58       	subi	r30, 0x81	; 129
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
	}
else{

	UART_sendByte(Not_identical); /*send not identical because passwords do not match*/
	/*taking password again to check if identical*/
	for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    1d9c:	de 01       	movw	r26, r28
    1d9e:	ae 51       	subi	r26, 0x1E	; 30
    1da0:	bf 4f       	sbci	r27, 0xFF	; 255
    1da2:	fe 01       	movw	r30, r28
    1da4:	ee 51       	subi	r30, 0x1E	; 30
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	8f 5f       	subi	r24, 0xFF	; 255
    1dac:	8c 93       	st	X, r24
    1dae:	fe 01       	movw	r30, r28
    1db0:	ee 51       	subi	r30, 0x1E	; 30
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	85 30       	cpi	r24, 0x05	; 5
    1db8:	08 f4       	brcc	.+2      	; 0x1dbc <Option_Processing+0xb1e>
    1dba:	7b ce       	rjmp	.-778    	; 0x1ab2 <Option_Processing+0x814>
        _delay_ms(200); /*delay for communication to be done effiecently*/
		pass[i]=UART_recieveByte();
		_delay_ms(200); /*delay to give time for recieving data*/
	} /*receiving the first password in an array*/

	Identical= check_Identical(pass,pass_2, PASSWORD_LENGTH); /* Checking if identical or not*/
    1dbc:	8e e7       	ldi	r24, 0x7E	; 126
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	23 e8       	ldi	r18, 0x83	; 131
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	45 e0       	ldi	r20, 0x05	; 5
    1dc8:	0e 94 cc 05 	call	0xb98	; 0xb98 <check_Identical>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	eb 51       	subi	r30, 0x1B	; 27
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 83       	st	Z, r24
	if (Identical){
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	eb 51       	subi	r30, 0x1B	; 27
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <Option_Processing+0xb44>
    1de0:	75 c1       	rjmp	.+746    	; 0x20cc <Option_Processing+0xe2e>
			UART_sendByte(identical);/* send identical to other ECU*/
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 58       	subi	r30, 0x85	; 133
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a8 e4       	ldi	r26, 0x48	; 72
    1df4:	b3 e4       	ldi	r27, 0x43	; 67
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	a2 83       	std	Z+2, r26	; 0x02
    1dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfe:	8e 01       	movw	r16, r28
    1e00:	09 58       	subi	r16, 0x89	; 137
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	e5 58       	subi	r30, 0x85	; 133
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a ef       	ldi	r20, 0xFA	; 250
    1e18:	54 e4       	ldi	r21, 0x44	; 68
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	f8 01       	movw	r30, r16
    1e24:	80 83       	st	Z, r24
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	a2 83       	std	Z+2, r26	; 0x02
    1e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e9 58       	subi	r30, 0x89	; 137
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	44 f4       	brge	.+16     	; 0x1e5a <Option_Processing+0xbbc>
		__ticks = 1;
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	eb 58       	subi	r30, 0x8B	; 139
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	64 c0       	rjmp	.+200    	; 0x1f22 <Option_Processing+0xc84>
	else if (__tmp > 65535)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 58       	subi	r30, 0x89	; 137
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	0c f0       	brlt	.+2      	; 0x1e7a <Option_Processing+0xbdc>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <Option_Processing+0xc62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e5 58       	subi	r30, 0x85	; 133
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8e 01       	movw	r16, r28
    1e9a:	0b 58       	subi	r16, 0x8B	; 139
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <Option_Processing+0xc52>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ed 58       	subi	r30, 0x8D	; 141
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	88 ec       	ldi	r24, 0xC8	; 200
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ed 58       	subi	r30, 0x8D	; 141
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <Option_Processing+0xc2c>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ed 58       	subi	r30, 0x8D	; 141
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	de 01       	movw	r26, r28
    1eda:	ab 58       	subi	r26, 0x8B	; 139
    1edc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	eb 58       	subi	r30, 0x8B	; 139
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	9c 93       	st	X, r25
    1eee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	eb 58       	subi	r30, 0x8B	; 139
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	d1 f6       	brne	.-76     	; 0x1eb2 <Option_Processing+0xc14>
    1efe:	27 c0       	rjmp	.+78     	; 0x1f4e <Option_Processing+0xcb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	8e 01       	movw	r16, r28
    1f02:	0b 58       	subi	r16, 0x8B	; 139
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	fe 01       	movw	r30, r28
    1f08:	e9 58       	subi	r30, 0x89	; 137
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	60 81       	ld	r22, Z
    1f0e:	71 81       	ldd	r23, Z+1	; 0x01
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	de 01       	movw	r26, r28
    1f24:	af 58       	subi	r26, 0x8F	; 143
    1f26:	bf 4f       	sbci	r27, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	eb 58       	subi	r30, 0x8B	; 139
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	8d 93       	st	X+, r24
    1f34:	9c 93       	st	X, r25
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 58       	subi	r30, 0x8F	; 143
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <Option_Processing+0xca2>
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 58       	subi	r30, 0x8F	; 143
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
			_delay_ms(200); /*delay between 2 sending for the receiver to take time to receive efficiently*/
			UART_sendByte(MC2_READY); /* send ready Byte*/
    1f4e:	80 e1       	ldi	r24, 0x10	; 16
    1f50:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
	        receive = UART_recieveByte(); /* Receive the operation option for the ECU to work on */
    1f54:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    1f58:	80 93 89 00 	sts	0x0089, r24
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e3 59       	subi	r30, 0x93	; 147
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a8 e4       	ldi	r26, 0x48	; 72
    1f68:	b3 e4       	ldi	r27, 0x43	; 67
    1f6a:	80 83       	st	Z, r24
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	a2 83       	std	Z+2, r26	; 0x02
    1f70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f72:	8e 01       	movw	r16, r28
    1f74:	07 59       	subi	r16, 0x97	; 151
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e3 59       	subi	r30, 0x93	; 147
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a ef       	ldi	r20, 0xFA	; 250
    1f8c:	54 e4       	ldi	r21, 0x44	; 68
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	f8 01       	movw	r30, r16
    1f98:	80 83       	st	Z, r24
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	a2 83       	std	Z+2, r26	; 0x02
    1f9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e7 59       	subi	r30, 0x97	; 151
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	44 f4       	brge	.+16     	; 0x1fce <Option_Processing+0xd30>
		__ticks = 1;
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e9 59       	subi	r30, 0x99	; 153
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	64 c0       	rjmp	.+200    	; 0x2096 <Option_Processing+0xdf8>
	else if (__tmp > 65535)
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 59       	subi	r30, 0x97	; 151
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	0c f0       	brlt	.+2      	; 0x1fee <Option_Processing+0xd50>
    1fec:	43 c0       	rjmp	.+134    	; 0x2074 <Option_Processing+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e3 59       	subi	r30, 0x93	; 147
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8e 01       	movw	r16, r28
    200e:	09 59       	subi	r16, 0x99	; 153
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	bc 01       	movw	r22, r24
    2014:	cd 01       	movw	r24, r26
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	f8 01       	movw	r30, r16
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	80 83       	st	Z, r24
    2024:	1f c0       	rjmp	.+62     	; 0x2064 <Option_Processing+0xdc6>
    2026:	fe 01       	movw	r30, r28
    2028:	eb 59       	subi	r30, 0x9B	; 155
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	88 ec       	ldi	r24, 0xC8	; 200
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	fe 01       	movw	r30, r28
    2036:	eb 59       	subi	r30, 0x9B	; 155
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <Option_Processing+0xda0>
    2042:	fe 01       	movw	r30, r28
    2044:	eb 59       	subi	r30, 0x9B	; 155
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	de 01       	movw	r26, r28
    204e:	a9 59       	subi	r26, 0x99	; 153
    2050:	bf 4f       	sbci	r27, 0xFF	; 255
    2052:	fe 01       	movw	r30, r28
    2054:	e9 59       	subi	r30, 0x99	; 153
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	11 96       	adiw	r26, 0x01	; 1
    2060:	9c 93       	st	X, r25
    2062:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	fe 01       	movw	r30, r28
    2066:	e9 59       	subi	r30, 0x99	; 153
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	d1 f6       	brne	.-76     	; 0x2026 <Option_Processing+0xd88>
    2072:	27 c0       	rjmp	.+78     	; 0x20c2 <Option_Processing+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	8e 01       	movw	r16, r28
    2076:	09 59       	subi	r16, 0x99	; 153
    2078:	1f 4f       	sbci	r17, 0xFF	; 255
    207a:	fe 01       	movw	r30, r28
    207c:	e7 59       	subi	r30, 0x97	; 151
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	f8 01       	movw	r30, r16
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	de 01       	movw	r26, r28
    2098:	ad 59       	subi	r26, 0x9D	; 157
    209a:	bf 4f       	sbci	r27, 0xFF	; 255
    209c:	fe 01       	movw	r30, r28
    209e:	e9 59       	subi	r30, 0x99	; 153
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	8d 93       	st	X+, r24
    20a8:	9c 93       	st	X, r25
    20aa:	fe 01       	movw	r30, r28
    20ac:	ed 59       	subi	r30, 0x9D	; 157
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <Option_Processing+0xe16>
    20b8:	fe 01       	movw	r30, r28
    20ba:	ed 59       	subi	r30, 0x9D	; 157
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
	         _delay_ms(200);
		     Open_Or_Change_operation(receive); /* Calling the operation function with input the operation needed*/
    20c2:	80 91 89 00 	lds	r24, 0x0089
    20c6:	0e 94 32 09 	call	0x1264	; 0x1264 <Open_Or_Change_operation>
    20ca:	11 c4       	rjmp	.+2082   	; 0x28ee <Option_Processing+0x1650>
		}
	else {

		  UART_sendByte(Not_identical); /*send not identical because passwords do not match*/
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
		  /*taking password again to check if identical*/
          for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    20d2:	fe 01       	movw	r30, r28
    20d4:	ef 51       	subi	r30, 0x1F	; 31
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	10 82       	st	Z, r1
    20da:	7e c1       	rjmp	.+764    	; 0x23d8 <Option_Processing+0x113a>
                    UART_sendByte(MC2_READY);
    20dc:	80 e1       	ldi	r24, 0x10	; 16
    20de:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    20e2:	fe 01       	movw	r30, r28
    20e4:	e1 5a       	subi	r30, 0xA1	; 161
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a8 e4       	ldi	r26, 0x48	; 72
    20ee:	b3 e4       	ldi	r27, 0x43	; 67
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f8:	8e 01       	movw	r16, r28
    20fa:	05 5a       	subi	r16, 0xA5	; 165
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	fe 01       	movw	r30, r28
    2100:	e1 5a       	subi	r30, 0xA1	; 161
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	f8 01       	movw	r30, r16
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2126:	fe 01       	movw	r30, r28
    2128:	e5 5a       	subi	r30, 0xA5	; 165
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	44 f4       	brge	.+16     	; 0x2154 <Option_Processing+0xeb6>
		__ticks = 1;
    2144:	fe 01       	movw	r30, r28
    2146:	e7 5a       	subi	r30, 0xA7	; 167
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	64 c0       	rjmp	.+200    	; 0x221c <Option_Processing+0xf7e>
	else if (__tmp > 65535)
    2154:	fe 01       	movw	r30, r28
    2156:	e5 5a       	subi	r30, 0xA5	; 165
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	0c f0       	brlt	.+2      	; 0x2174 <Option_Processing+0xed6>
    2172:	43 c0       	rjmp	.+134    	; 0x21fa <Option_Processing+0xf5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	fe 01       	movw	r30, r28
    2176:	e1 5a       	subi	r30, 0xA1	; 161
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8e 01       	movw	r16, r28
    2194:	07 5a       	subi	r16, 0xA7	; 167
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	1f c0       	rjmp	.+62     	; 0x21ea <Option_Processing+0xf4c>
    21ac:	fe 01       	movw	r30, r28
    21ae:	e9 5a       	subi	r30, 0xA9	; 169
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	88 ec       	ldi	r24, 0xC8	; 200
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
    21ba:	fe 01       	movw	r30, r28
    21bc:	e9 5a       	subi	r30, 0xA9	; 169
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <Option_Processing+0xf26>
    21c8:	fe 01       	movw	r30, r28
    21ca:	e9 5a       	subi	r30, 0xA9	; 169
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	de 01       	movw	r26, r28
    21d4:	a7 5a       	subi	r26, 0xA7	; 167
    21d6:	bf 4f       	sbci	r27, 0xFF	; 255
    21d8:	fe 01       	movw	r30, r28
    21da:	e7 5a       	subi	r30, 0xA7	; 167
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	11 96       	adiw	r26, 0x01	; 1
    21e6:	9c 93       	st	X, r25
    21e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	fe 01       	movw	r30, r28
    21ec:	e7 5a       	subi	r30, 0xA7	; 167
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	d1 f6       	brne	.-76     	; 0x21ac <Option_Processing+0xf0e>
    21f8:	27 c0       	rjmp	.+78     	; 0x2248 <Option_Processing+0xfaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	8e 01       	movw	r16, r28
    21fc:	07 5a       	subi	r16, 0xA7	; 167
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e5 5a       	subi	r30, 0xA5	; 165
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	f8 01       	movw	r30, r16
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	de 01       	movw	r26, r28
    221e:	ab 5a       	subi	r26, 0xAB	; 171
    2220:	bf 4f       	sbci	r27, 0xFF	; 255
    2222:	fe 01       	movw	r30, r28
    2224:	e7 5a       	subi	r30, 0xA7	; 167
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	8d 93       	st	X+, r24
    222e:	9c 93       	st	X, r25
    2230:	fe 01       	movw	r30, r28
    2232:	eb 5a       	subi	r30, 0xAB	; 171
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <Option_Processing+0xf9c>
    223e:	fe 01       	movw	r30, r28
    2240:	eb 5a       	subi	r30, 0xAB	; 171
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
                    _delay_ms(200); /*delay for communication to be done effiecently*/
            		pass[i]=UART_recieveByte();
    2248:	fe 01       	movw	r30, r28
    224a:	ef 51       	subi	r30, 0x1F	; 31
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	08 2f       	mov	r16, r24
    2252:	10 e0       	ldi	r17, 0x00	; 0
    2254:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    2258:	f8 01       	movw	r30, r16
    225a:	e2 58       	subi	r30, 0x82	; 130
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 83       	st	Z, r24
    2260:	fe 01       	movw	r30, r28
    2262:	ef 5a       	subi	r30, 0xAF	; 175
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a8 e4       	ldi	r26, 0x48	; 72
    226c:	b3 e4       	ldi	r27, 0x43	; 67
    226e:	80 83       	st	Z, r24
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	a2 83       	std	Z+2, r26	; 0x02
    2274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	8e 01       	movw	r16, r28
    2278:	03 5b       	subi	r16, 0xB3	; 179
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	ef 5a       	subi	r30, 0xAF	; 175
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	f8 01       	movw	r30, r16
    229c:	80 83       	st	Z, r24
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	a2 83       	std	Z+2, r26	; 0x02
    22a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a4:	fe 01       	movw	r30, r28
    22a6:	e3 5b       	subi	r30, 0xB3	; 179
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	82 81       	ldd	r24, Z+2	; 0x02
    22b0:	93 81       	ldd	r25, Z+3	; 0x03
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	44 f4       	brge	.+16     	; 0x22d2 <Option_Processing+0x1034>
		__ticks = 1;
    22c2:	fe 01       	movw	r30, r28
    22c4:	e5 5b       	subi	r30, 0xB5	; 181
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	64 c0       	rjmp	.+200    	; 0x239a <Option_Processing+0x10fc>
	else if (__tmp > 65535)
    22d2:	fe 01       	movw	r30, r28
    22d4:	e3 5b       	subi	r30, 0xB3	; 179
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	4f e7       	ldi	r20, 0x7F	; 127
    22e6:	57 e4       	ldi	r21, 0x47	; 71
    22e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ec:	18 16       	cp	r1, r24
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <Option_Processing+0x1054>
    22f0:	43 c0       	rjmp	.+134    	; 0x2378 <Option_Processing+0x10da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	fe 01       	movw	r30, r28
    22f4:	ef 5a       	subi	r30, 0xAF	; 175
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8e 01       	movw	r16, r28
    2312:	05 5b       	subi	r16, 0xB5	; 181
    2314:	1f 4f       	sbci	r17, 0xFF	; 255
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	f8 01       	movw	r30, r16
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	1f c0       	rjmp	.+62     	; 0x2368 <Option_Processing+0x10ca>
    232a:	fe 01       	movw	r30, r28
    232c:	e7 5b       	subi	r30, 0xB7	; 183
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	88 ec       	ldi	r24, 0xC8	; 200
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	fe 01       	movw	r30, r28
    233a:	e7 5b       	subi	r30, 0xB7	; 183
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <Option_Processing+0x10a4>
    2346:	fe 01       	movw	r30, r28
    2348:	e7 5b       	subi	r30, 0xB7	; 183
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2350:	de 01       	movw	r26, r28
    2352:	a5 5b       	subi	r26, 0xB5	; 181
    2354:	bf 4f       	sbci	r27, 0xFF	; 255
    2356:	fe 01       	movw	r30, r28
    2358:	e5 5b       	subi	r30, 0xB5	; 181
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	9c 93       	st	X, r25
    2366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	fe 01       	movw	r30, r28
    236a:	e5 5b       	subi	r30, 0xB5	; 181
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	d1 f6       	brne	.-76     	; 0x232a <Option_Processing+0x108c>
    2376:	27 c0       	rjmp	.+78     	; 0x23c6 <Option_Processing+0x1128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	8e 01       	movw	r16, r28
    237a:	05 5b       	subi	r16, 0xB5	; 181
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	fe 01       	movw	r30, r28
    2380:	e3 5b       	subi	r30, 0xB3	; 179
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	f8 01       	movw	r30, r16
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
    239a:	de 01       	movw	r26, r28
    239c:	a9 5b       	subi	r26, 0xB9	; 185
    239e:	bf 4f       	sbci	r27, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	e5 5b       	subi	r30, 0xB5	; 181
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	8d 93       	st	X+, r24
    23ac:	9c 93       	st	X, r25
    23ae:	fe 01       	movw	r30, r28
    23b0:	e9 5b       	subi	r30, 0xB9	; 185
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <Option_Processing+0x111a>
    23bc:	fe 01       	movw	r30, r28
    23be:	e9 5b       	subi	r30, 0xB9	; 185
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
		}
	else {

		  UART_sendByte(Not_identical); /*send not identical because passwords do not match*/
		  /*taking password again to check if identical*/
          for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
    23c6:	de 01       	movw	r26, r28
    23c8:	af 51       	subi	r26, 0x1F	; 31
    23ca:	bf 4f       	sbci	r27, 0xFF	; 255
    23cc:	fe 01       	movw	r30, r28
    23ce:	ef 51       	subi	r30, 0x1F	; 31
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	8c 93       	st	X, r24
    23d8:	fe 01       	movw	r30, r28
    23da:	ef 51       	subi	r30, 0x1F	; 31
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	85 30       	cpi	r24, 0x05	; 5
    23e2:	08 f4       	brcc	.+2      	; 0x23e6 <Option_Processing+0x1148>
    23e4:	7b ce       	rjmp	.-778    	; 0x20dc <Option_Processing+0xe3e>
                    UART_sendByte(MC2_READY);
                    _delay_ms(200); /*delay for communication to be done effiecently*/
            		pass[i]=UART_recieveByte();
            		_delay_ms(200); /*delay to give time for receiving data*/
            	} /*receiving the first password in an array*/
         Identical= check_Identical(pass,pass_2, PASSWORD_LENGTH);/* Checking if identical or not*/
    23e6:	8e e7       	ldi	r24, 0x7E	; 126
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	23 e8       	ldi	r18, 0x83	; 131
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	b9 01       	movw	r22, r18
    23f0:	45 e0       	ldi	r20, 0x05	; 5
    23f2:	0e 94 cc 05 	call	0xb98	; 0xb98 <check_Identical>
    23f6:	fe 01       	movw	r30, r28
    23f8:	eb 51       	subi	r30, 0x1B	; 27
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 83       	st	Z, r24
         if (Identical){
    23fe:	fe 01       	movw	r30, r28
    2400:	eb 51       	subi	r30, 0x1B	; 27
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	09 f4       	brne	.+2      	; 0x240c <Option_Processing+0x116e>
    240a:	06 c1       	rjmp	.+524    	; 0x2618 <Option_Processing+0x137a>
         		UART_sendByte(identical);/* send identical to other ECU*/
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    2412:	fe 01       	movw	r30, r28
    2414:	ed 5b       	subi	r30, 0xBD	; 189
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a8 e4       	ldi	r26, 0x48	; 72
    241e:	b3 e4       	ldi	r27, 0x43	; 67
    2420:	80 83       	st	Z, r24
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	a2 83       	std	Z+2, r26	; 0x02
    2426:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	8e 01       	movw	r16, r28
    242a:	01 5c       	subi	r16, 0xC1	; 193
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	fe 01       	movw	r30, r28
    2430:	ed 5b       	subi	r30, 0xBD	; 189
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a ef       	ldi	r20, 0xFA	; 250
    2442:	54 e4       	ldi	r21, 0x44	; 68
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	f8 01       	movw	r30, r16
    244e:	80 83       	st	Z, r24
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	a2 83       	std	Z+2, r26	; 0x02
    2454:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2456:	fe 01       	movw	r30, r28
    2458:	ff 96       	adiw	r30, 0x3f	; 63
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	2c f4       	brge	.+10     	; 0x247c <Option_Processing+0x11de>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9e af       	std	Y+62, r25	; 0x3e
    2478:	8d af       	std	Y+61, r24	; 0x3d
    247a:	46 c0       	rjmp	.+140    	; 0x2508 <Option_Processing+0x126a>
	else if (__tmp > 65535)
    247c:	fe 01       	movw	r30, r28
    247e:	ff 96       	adiw	r30, 0x3f	; 63
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	64 f5       	brge	.+88     	; 0x24f0 <Option_Processing+0x1252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	fe 01       	movw	r30, r28
    249a:	ed 5b       	subi	r30, 0xBD	; 189
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e2       	ldi	r20, 0x20	; 32
    24ac:	51 e4       	ldi	r21, 0x41	; 65
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e af       	std	Y+62, r25	; 0x3e
    24c4:	8d af       	std	Y+61, r24	; 0x3d
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <Option_Processing+0x1248>
    24c8:	88 ec       	ldi	r24, 0xC8	; 200
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c af       	std	Y+60, r25	; 0x3c
    24ce:	8b af       	std	Y+59, r24	; 0x3b
    24d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <Option_Processing+0x1236>
    24d8:	9c af       	std	Y+60, r25	; 0x3c
    24da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24de:	9e ad       	ldd	r25, Y+62	; 0x3e
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	9e af       	std	Y+62, r25	; 0x3e
    24e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	69 f7       	brne	.-38     	; 0x24c8 <Option_Processing+0x122a>
    24ee:	16 c0       	rjmp	.+44     	; 0x251c <Option_Processing+0x127e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f0:	fe 01       	movw	r30, r28
    24f2:	ff 96       	adiw	r30, 0x3f	; 63
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e af       	std	Y+62, r25	; 0x3e
    2506:	8d af       	std	Y+61, r24	; 0x3d
    2508:	8d ad       	ldd	r24, Y+61	; 0x3d
    250a:	9e ad       	ldd	r25, Y+62	; 0x3e
    250c:	9a af       	std	Y+58, r25	; 0x3a
    250e:	89 af       	std	Y+57, r24	; 0x39
    2510:	89 ad       	ldd	r24, Y+57	; 0x39
    2512:	9a ad       	ldd	r25, Y+58	; 0x3a
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <Option_Processing+0x1276>
    2518:	9a af       	std	Y+58, r25	; 0x3a
    251a:	89 af       	std	Y+57, r24	; 0x39
         		_delay_ms(200); /*delay between 2 sending for the receiver to take time to receive efficiently*/
         		UART_sendByte(MC2_READY); /* send ready Byte*/
    251c:	80 e1       	ldi	r24, 0x10	; 16
    251e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
                 receive = UART_recieveByte(); /* Receive the operation option for the ECU to work on */
    2522:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    2526:	80 93 89 00 	sts	0x0089, r24
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a8 e4       	ldi	r26, 0x48	; 72
    2530:	b3 e4       	ldi	r27, 0x43	; 67
    2532:	8d ab       	std	Y+53, r24	; 0x35
    2534:	9e ab       	std	Y+54, r25	; 0x36
    2536:	af ab       	std	Y+55, r26	; 0x37
    2538:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	6d a9       	ldd	r22, Y+53	; 0x35
    253c:	7e a9       	ldd	r23, Y+54	; 0x36
    253e:	8f a9       	ldd	r24, Y+55	; 0x37
    2540:	98 ad       	ldd	r25, Y+56	; 0x38
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	89 ab       	std	Y+49, r24	; 0x31
    2554:	9a ab       	std	Y+50, r25	; 0x32
    2556:	ab ab       	std	Y+51, r26	; 0x33
    2558:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    255a:	69 a9       	ldd	r22, Y+49	; 0x31
    255c:	7a a9       	ldd	r23, Y+50	; 0x32
    255e:	8b a9       	ldd	r24, Y+51	; 0x33
    2560:	9c a9       	ldd	r25, Y+52	; 0x34
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <Option_Processing+0x12de>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	98 ab       	std	Y+48, r25	; 0x30
    2578:	8f a7       	std	Y+47, r24	; 0x2f
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <Option_Processing+0x135c>
	else if (__tmp > 65535)
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <Option_Processing+0x1348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	6d a9       	ldd	r22, Y+53	; 0x35
    2596:	7e a9       	ldd	r23, Y+54	; 0x36
    2598:	8f a9       	ldd	r24, Y+55	; 0x37
    259a:	98 ad       	ldd	r25, Y+56	; 0x38
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	98 ab       	std	Y+48, r25	; 0x30
    25ba:	8f a7       	std	Y+47, r24	; 0x2f
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <Option_Processing+0x133e>
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9e a7       	std	Y+46, r25	; 0x2e
    25c4:	8d a7       	std	Y+45, r24	; 0x2d
    25c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <Option_Processing+0x132c>
    25ce:	9e a7       	std	Y+46, r25	; 0x2e
    25d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d4:	98 a9       	ldd	r25, Y+48	; 0x30
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	98 ab       	std	Y+48, r25	; 0x30
    25da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25de:	98 a9       	ldd	r25, Y+48	; 0x30
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <Option_Processing+0x1320>
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <Option_Processing+0x1370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	69 a9       	ldd	r22, Y+49	; 0x31
    25e8:	7a a9       	ldd	r23, Y+50	; 0x32
    25ea:	8b a9       	ldd	r24, Y+51	; 0x33
    25ec:	9c a9       	ldd	r25, Y+52	; 0x34
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	98 ab       	std	Y+48, r25	; 0x30
    25f8:	8f a7       	std	Y+47, r24	; 0x2f
    25fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fc:	98 a9       	ldd	r25, Y+48	; 0x30
    25fe:	9c a7       	std	Y+44, r25	; 0x2c
    2600:	8b a7       	std	Y+43, r24	; 0x2b
    2602:	8b a5       	ldd	r24, Y+43	; 0x2b
    2604:	9c a5       	ldd	r25, Y+44	; 0x2c
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <Option_Processing+0x1368>
    260a:	9c a7       	std	Y+44, r25	; 0x2c
    260c:	8b a7       	std	Y+43, r24	; 0x2b
                  _delay_ms(200);
         	     Open_Or_Change_operation(receive); /* Calling the operation function with input the operation needed*/
    260e:	80 91 89 00 	lds	r24, 0x0089
    2612:	0e 94 32 09 	call	0x1264	; 0x1264 <Open_Or_Change_operation>
    2616:	6b c1       	rjmp	.+726    	; 0x28ee <Option_Processing+0x1650>
         	} /*After giving 2 chances to get the correct password hold the system for 1 minute*/
         else {
        	        UART_sendByte(Not_identical);/*send not identical because passwords do not match*/
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a8 e4       	ldi	r26, 0x48	; 72
    2624:	b3 e4       	ldi	r27, 0x43	; 67
    2626:	8f a3       	std	Y+39, r24	; 0x27
    2628:	98 a7       	std	Y+40, r25	; 0x28
    262a:	a9 a7       	std	Y+41, r26	; 0x29
    262c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	6f a1       	ldd	r22, Y+39	; 0x27
    2630:	78 a5       	ldd	r23, Y+40	; 0x28
    2632:	89 a5       	ldd	r24, Y+41	; 0x29
    2634:	9a a5       	ldd	r25, Y+42	; 0x2a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a ef       	ldi	r20, 0xFA	; 250
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8b a3       	std	Y+35, r24	; 0x23
    2648:	9c a3       	std	Y+36, r25	; 0x24
    264a:	ad a3       	std	Y+37, r26	; 0x25
    264c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    264e:	6b a1       	ldd	r22, Y+35	; 0x23
    2650:	7c a1       	ldd	r23, Y+36	; 0x24
    2652:	8d a1       	ldd	r24, Y+37	; 0x25
    2654:	9e a1       	ldd	r25, Y+38	; 0x26
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <Option_Processing+0x13d2>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9a a3       	std	Y+34, r25	; 0x22
    266c:	89 a3       	std	Y+33, r24	; 0x21
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <Option_Processing+0x1450>
	else if (__tmp > 65535)
    2670:	6b a1       	ldd	r22, Y+35	; 0x23
    2672:	7c a1       	ldd	r23, Y+36	; 0x24
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	4c f5       	brge	.+82     	; 0x26da <Option_Processing+0x143c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	6f a1       	ldd	r22, Y+39	; 0x27
    268a:	78 a5       	ldd	r23, Y+40	; 0x28
    268c:	89 a5       	ldd	r24, Y+41	; 0x29
    268e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	9a a3       	std	Y+34, r25	; 0x22
    26ae:	89 a3       	std	Y+33, r24	; 0x21
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <Option_Processing+0x1432>
    26b2:	88 ec       	ldi	r24, 0xC8	; 200
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	98 a3       	std	Y+32, r25	; 0x20
    26b8:	8f 8f       	std	Y+31, r24	; 0x1f
    26ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26bc:	98 a1       	ldd	r25, Y+32	; 0x20
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <Option_Processing+0x1420>
    26c2:	98 a3       	std	Y+32, r25	; 0x20
    26c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	89 a1       	ldd	r24, Y+33	; 0x21
    26c8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	9a a3       	std	Y+34, r25	; 0x22
    26ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d0:	89 a1       	ldd	r24, Y+33	; 0x21
    26d2:	9a a1       	ldd	r25, Y+34	; 0x22
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	69 f7       	brne	.-38     	; 0x26b2 <Option_Processing+0x1414>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <Option_Processing+0x1464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	6b a1       	ldd	r22, Y+35	; 0x23
    26dc:	7c a1       	ldd	r23, Y+36	; 0x24
    26de:	8d a1       	ldd	r24, Y+37	; 0x25
    26e0:	9e a1       	ldd	r25, Y+38	; 0x26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9a a3       	std	Y+34, r25	; 0x22
    26ec:	89 a3       	std	Y+33, r24	; 0x21
    26ee:	89 a1       	ldd	r24, Y+33	; 0x21
    26f0:	9a a1       	ldd	r25, Y+34	; 0x22
    26f2:	9e 8f       	std	Y+30, r25	; 0x1e
    26f4:	8d 8f       	std	Y+29, r24	; 0x1d
    26f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <Option_Processing+0x145c>
    26fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2700:	8d 8f       	std	Y+29, r24	; 0x1d
        	        _delay_ms(200);/*delay between 2 sending for the receiver to take time to receive efficiently*/
                    UART_sendByte(MC2_READY);
    2702:	80 e1       	ldi	r24, 0x10	; 16
    2704:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a8 e4       	ldi	r26, 0x48	; 72
    270e:	b3 e4       	ldi	r27, 0x43	; 67
    2710:	89 8f       	std	Y+25, r24	; 0x19
    2712:	9a 8f       	std	Y+26, r25	; 0x1a
    2714:	ab 8f       	std	Y+27, r26	; 0x1b
    2716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	69 8d       	ldd	r22, Y+25	; 0x19
    271a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a ef       	ldi	r20, 0xFA	; 250
    2726:	54 e4       	ldi	r21, 0x44	; 68
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8d 8b       	std	Y+21, r24	; 0x15
    2732:	9e 8b       	std	Y+22, r25	; 0x16
    2734:	af 8b       	std	Y+23, r26	; 0x17
    2736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2738:	6d 89       	ldd	r22, Y+21	; 0x15
    273a:	7e 89       	ldd	r23, Y+22	; 0x16
    273c:	8f 89       	ldd	r24, Y+23	; 0x17
    273e:	98 8d       	ldd	r25, Y+24	; 0x18
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <Option_Processing+0x14bc>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <Option_Processing+0x153a>
	else if (__tmp > 65535)
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <Option_Processing+0x1526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	69 8d       	ldd	r22, Y+25	; 0x19
    2774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <Option_Processing+0x151c>
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9a 8b       	std	Y+18, r25	; 0x12
    27a2:	89 8b       	std	Y+17, r24	; 0x11
    27a4:	89 89       	ldd	r24, Y+17	; 0x11
    27a6:	9a 89       	ldd	r25, Y+18	; 0x12
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <Option_Processing+0x150a>
    27ac:	9a 8b       	std	Y+18, r25	; 0x12
    27ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8b 89       	ldd	r24, Y+19	; 0x13
    27bc:	9c 89       	ldd	r25, Y+20	; 0x14
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <Option_Processing+0x14fe>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <Option_Processing+0x154e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6d 89       	ldd	r22, Y+21	; 0x15
    27c6:	7e 89       	ldd	r23, Y+22	; 0x16
    27c8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ca:	98 8d       	ldd	r25, Y+24	; 0x18
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	8b 89       	ldd	r24, Y+19	; 0x13
    27da:	9c 89       	ldd	r25, Y+20	; 0x14
    27dc:	98 8b       	std	Y+16, r25	; 0x10
    27de:	8f 87       	std	Y+15, r24	; 0x0f
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e2:	98 89       	ldd	r25, Y+16	; 0x10
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <Option_Processing+0x1546>
    27e8:	98 8b       	std	Y+16, r25	; 0x10
    27ea:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_ms(200);/*delay to give the receiver time to receive and send*/
                    receive = UART_recieveByte(); /*receive byte*/
    27ec:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    27f0:	80 93 89 00 	sts	0x0089, r24
                    if (receive == Buzzer){
    27f4:	80 91 89 00 	lds	r24, 0x0089
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	09 f0       	breq	.+2      	; 0x27fe <Option_Processing+0x1560>
    27fc:	78 c0       	rjmp	.+240    	; 0x28ee <Option_Processing+0x1650>
                    Buzzer_on();
    27fe:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e6       	ldi	r25, 0x60	; 96
    2806:	aa e6       	ldi	r26, 0x6A	; 106
    2808:	b7 e4       	ldi	r27, 0x47	; 71
    280a:	8b 87       	std	Y+11, r24	; 0x0b
    280c:	9c 87       	std	Y+12, r25	; 0x0c
    280e:	ad 87       	std	Y+13, r26	; 0x0d
    2810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	6b 85       	ldd	r22, Y+11	; 0x0b
    2814:	7c 85       	ldd	r23, Y+12	; 0x0c
    2816:	8d 85       	ldd	r24, Y+13	; 0x0d
    2818:	9e 85       	ldd	r25, Y+14	; 0x0e
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a ef       	ldi	r20, 0xFA	; 250
    2820:	54 e4       	ldi	r21, 0x44	; 68
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8f 83       	std	Y+7, r24	; 0x07
    282c:	98 87       	std	Y+8, r25	; 0x08
    282e:	a9 87       	std	Y+9, r26	; 0x09
    2830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <Option_Processing+0x15b6>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <Option_Processing+0x1634>
	else if (__tmp > 65535)
    2854:	6f 81       	ldd	r22, Y+7	; 0x07
    2856:	78 85       	ldd	r23, Y+8	; 0x08
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <Option_Processing+0x1620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	6b 85       	ldd	r22, Y+11	; 0x0b
    286e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2870:	8d 85       	ldd	r24, Y+13	; 0x0d
    2872:	9e 85       	ldd	r25, Y+14	; 0x0e
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <Option_Processing+0x1616>
    2896:	88 ec       	ldi	r24, 0xC8	; 200
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <Option_Processing+0x1604>
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <Option_Processing+0x15f8>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <Option_Processing+0x1648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <Option_Processing+0x1640>
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
		           _delay_ms(60000);
		           Buzzer_off();
    28e6:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		           Option_Processing();} /*initiate Buzzer for one minute then close it and start function again from start*/
    28ea:	0e 94 4f 09 	call	0x129e	; 0x129e <Option_Processing>


		 }
	}

	}
    28ee:	ca 51       	subi	r28, 0x1A	; 26
    28f0:	df 4f       	sbci	r29, 0xFF	; 255
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	08 95       	ret

00002906 <main>:

int main(void){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	a2 97       	sbiw	r28, 0x22	; 34
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
	TWI_ConfigType TWI_Configuration={0x01,400000}; /* Bit Rate: 400.000 and address 0x01*/
    291a:	ce 01       	movw	r24, r28
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	9d 8b       	std	Y+21, r25	; 0x15
    2920:	8c 8b       	std	Y+20, r24	; 0x14
    2922:	e5 e7       	ldi	r30, 0x75	; 117
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	ff 8b       	std	Y+23, r31	; 0x17
    2928:	ee 8b       	std	Y+22, r30	; 0x16
    292a:	f6 e0       	ldi	r31, 0x06	; 6
    292c:	f8 8f       	std	Y+24, r31	; 0x18
    292e:	ee 89       	ldd	r30, Y+22	; 0x16
    2930:	ff 89       	ldd	r31, Y+23	; 0x17
    2932:	00 80       	ld	r0, Z
    2934:	8e 89       	ldd	r24, Y+22	; 0x16
    2936:	9f 89       	ldd	r25, Y+23	; 0x17
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	9f 8b       	std	Y+23, r25	; 0x17
    293c:	8e 8b       	std	Y+22, r24	; 0x16
    293e:	ec 89       	ldd	r30, Y+20	; 0x14
    2940:	fd 89       	ldd	r31, Y+21	; 0x15
    2942:	00 82       	st	Z, r0
    2944:	8c 89       	ldd	r24, Y+20	; 0x14
    2946:	9d 89       	ldd	r25, Y+21	; 0x15
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	9d 8b       	std	Y+21, r25	; 0x15
    294c:	8c 8b       	std	Y+20, r24	; 0x14
    294e:	98 8d       	ldd	r25, Y+24	; 0x18
    2950:	91 50       	subi	r25, 0x01	; 1
    2952:	98 8f       	std	Y+24, r25	; 0x18
    2954:	e8 8d       	ldd	r30, Y+24	; 0x18
    2956:	ee 23       	and	r30, r30
    2958:	51 f7       	brne	.-44     	; 0x292e <main+0x28>
	TWI_init(&TWI_Configuration); /*Initializing I2C*/
    295a:	ce 01       	movw	r24, r28
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	0e 94 8d 1b 	call	0x371a	; 0x371a <TWI_init>
	UART_ConfigType UART_Configuration={Eight_bit,Disabled,One_bit,9600}; /* configuring the UART as eight bit mode, disabled parity, One stop bit, and baud rate = 9600*/
    2962:	ce 01       	movw	r24, r28
    2964:	07 96       	adiw	r24, 0x07	; 7
    2966:	9a 8f       	std	Y+26, r25	; 0x1a
    2968:	89 8f       	std	Y+25, r24	; 0x19
    296a:	ee e6       	ldi	r30, 0x6E	; 110
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	fc 8f       	std	Y+28, r31	; 0x1c
    2970:	eb 8f       	std	Y+27, r30	; 0x1b
    2972:	f7 e0       	ldi	r31, 0x07	; 7
    2974:	fd 8f       	std	Y+29, r31	; 0x1d
    2976:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2978:	fc 8d       	ldd	r31, Y+28	; 0x1c
    297a:	00 80       	ld	r0, Z
    297c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	9c 8f       	std	Y+28, r25	; 0x1c
    2984:	8b 8f       	std	Y+27, r24	; 0x1b
    2986:	e9 8d       	ldd	r30, Y+25	; 0x19
    2988:	fa 8d       	ldd	r31, Y+26	; 0x1a
    298a:	00 82       	st	Z, r0
    298c:	89 8d       	ldd	r24, Y+25	; 0x19
    298e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	9a 8f       	std	Y+26, r25	; 0x1a
    2994:	89 8f       	std	Y+25, r24	; 0x19
    2996:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2998:	91 50       	subi	r25, 0x01	; 1
    299a:	9d 8f       	std	Y+29, r25	; 0x1d
    299c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    299e:	ee 23       	and	r30, r30
    29a0:	51 f7       	brne	.-44     	; 0x2976 <main+0x70>
	UART_init(&UART_Configuration); /*Initializing UART*/
    29a2:	ce 01       	movw	r24, r28
    29a4:	07 96       	adiw	r24, 0x07	; 7
    29a6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <UART_init>
	PWM_Timer0_init();/* Initializing PWM Timer0 */
    29aa:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <PWM_Timer0_init>
	DcMotor_Init(); /*Initializing DC Motor*/
    29ae:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <DcMotor_Init>
	Buzzer_init(); /*Initializing Buzzer*/
    29b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	Initiating_Passwords(); /*calling the initializing function to create password*/
    29b6:	0e 94 06 06 	call	0xc0c	; 0xc0c <Initiating_Passwords>
	Timer1_ConfigType Configuration2={0,23438,F_CPU_1024,Compare_mode};/* configuring Timer 1 as initial value = 0, compare value = 23438(3 seconds ), prescaler = 1024, and operate compare mode  */
    29ba:	ce 01       	movw	r24, r28
    29bc:	0e 96       	adiw	r24, 0x0e	; 14
    29be:	9f 8f       	std	Y+31, r25	; 0x1f
    29c0:	8e 8f       	std	Y+30, r24	; 0x1e
    29c2:	e8 e6       	ldi	r30, 0x68	; 104
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	f9 a3       	std	Y+33, r31	; 0x21
    29c8:	e8 a3       	std	Y+32, r30	; 0x20
    29ca:	f6 e0       	ldi	r31, 0x06	; 6
    29cc:	fa a3       	std	Y+34, r31	; 0x22
    29ce:	e8 a1       	ldd	r30, Y+32	; 0x20
    29d0:	f9 a1       	ldd	r31, Y+33	; 0x21
    29d2:	00 80       	ld	r0, Z
    29d4:	88 a1       	ldd	r24, Y+32	; 0x20
    29d6:	99 a1       	ldd	r25, Y+33	; 0x21
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	99 a3       	std	Y+33, r25	; 0x21
    29dc:	88 a3       	std	Y+32, r24	; 0x20
    29de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    29e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    29e2:	00 82       	st	Z, r0
    29e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	9f 8f       	std	Y+31, r25	; 0x1f
    29ec:	8e 8f       	std	Y+30, r24	; 0x1e
    29ee:	9a a1       	ldd	r25, Y+34	; 0x22
    29f0:	91 50       	subi	r25, 0x01	; 1
    29f2:	9a a3       	std	Y+34, r25	; 0x22
    29f4:	ea a1       	ldd	r30, Y+34	; 0x22
    29f6:	ee 23       	and	r30, r30
    29f8:	51 f7       	brne	.-44     	; 0x29ce <main+0xc8>
	Timer1_init(&Configuration2); /*Initializing Timer 1*/
    29fa:	ce 01       	movw	r24, r28
    29fc:	0e 96       	adiw	r24, 0x0e	; 14
    29fe:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <Timer1_init>
	Timer1_setCallBack(TIMER1_ticks); /*setting the call back function to increment the g_tick*/
    2a02:	89 ef       	ldi	r24, 0xF9	; 249
    2a04:	98 e0       	ldi	r25, 0x08	; 8
    2a06:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Timer1_setCallBack>
	SREG |= (1<<7); /*Setting I_bit*/
    2a0a:	af e5       	ldi	r26, 0x5F	; 95
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	ef e5       	ldi	r30, 0x5F	; 95
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	8c 93       	st	X, r24

	while (1)
	{
		Option_Processing();
    2a18:	0e 94 4f 09 	call	0x129e	; 0x129e <Option_Processing>
    2a1c:	fd cf       	rjmp	.-6      	; 0x2a18 <main+0x112>

00002a1e <DcMotor_Init>:
#include "gpio.h"
#include "DC.h"
/*global variable holding the duty cycle value and volatile because it can be changed in run time by hard ware */
volatile uint8 duty_cycle;
/* funtion responsible to initialize DC driver*/
void DcMotor_Init(void){
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
/*setting directions of input pins to the DC and initializing them with 0 */
	 GPIO_setupPinDirection( INPUT_PORT,  INPUT_PIN1, PIN_OUTPUT);
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 4f 18 	call	0x309e	; 0x309e <GPIO_setupPinDirection>
	 GPIO_setupPinDirection( INPUT_PORT,  INPUT_PIN2, PIN_OUTPUT);
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	61 e0       	ldi	r22, 0x01	; 1
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 4f 18 	call	0x309e	; 0x309e <GPIO_setupPinDirection>
	 GPIO_writePin(INPUT_PORT,INPUT_PIN1, Stop);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 3a 19 	call	0x3274	; 0x3274 <GPIO_writePin>
	 GPIO_writePin(INPUT_PORT,INPUT_PIN2, Stop);
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	61 e0       	ldi	r22, 0x01	; 1
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0e 94 3a 19 	call	0x3274	; 0x3274 <GPIO_writePin>

}
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <DcMotor_Rotate>:
/*setting the purpose of the DC and getting its operation*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <DcMotor_Rotate+0x6>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	6a 83       	std	Y+2, r22	; 0x02
	/* nested if to write on port the suitable binary according to the state */
if(state == Clockwise)
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	82 30       	cpi	r24, 0x02	; 2
    2a66:	29 f4       	brne	.+10     	; 0x2a72 <DcMotor_Rotate+0x1e>
	GPIO_writePort(INPUT_PORT,Clockwise);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	62 e0       	ldi	r22, 0x02	; 2
    2a6c:	0e 94 04 1b 	call	0x3608	; 0x3608 <GPIO_writePort>
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <DcMotor_Rotate+0x3c>
else if(state == Anti_Clockwise)
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	29 f4       	brne	.+10     	; 0x2a82 <DcMotor_Rotate+0x2e>
	GPIO_writePort(INPUT_PORT,Anti_Clockwise);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	0e 94 04 1b 	call	0x3608	; 0x3608 <GPIO_writePort>
    2a80:	07 c0       	rjmp	.+14     	; 0x2a90 <DcMotor_Rotate+0x3c>
else if(state == Stop)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	88 23       	and	r24, r24
    2a86:	21 f4       	brne	.+8      	; 0x2a90 <DcMotor_Rotate+0x3c>
	 GPIO_writePort(INPUT_PORT, Stop);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 04 1b 	call	0x3608	; 0x3608 <GPIO_writePort>

#error "Speed not valid"

#endif

duty_cycle= (speed/MAXIMUM_SPEED)*NO_OF_STEPS ; /* calculating the duty cycle value to be used by PWM and application file*/
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	94 e6       	ldi	r25, 0x64	; 100
    2a94:	69 2f       	mov	r22, r25
    2a96:	0e 94 18 1c 	call	0x3830	; 0x3830 <__udivmodqi4>
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	88 27       	eor	r24, r24
    2aa2:	80 93 8c 00 	sts	0x008C, r24


}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <PWM_Timer0_init>:
 * Timer0 will be used with pre-scaler F_CPU/8
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Function for initializing the PWM mode on Timer 0
 */
void PWM_Timer0_init(void)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; //Set Timer Initial value
    2ab8:	e2 e5       	ldi	r30, 0x52	; 82
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	10 82       	st	Z, r1
	GPIO_writePin( OUTPUT_PORT,OUTPUT_PIN, LOGIC_HIGH); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	63 e0       	ldi	r22, 0x03	; 3
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 3a 19 	call	0x3274	; 0x3274 <GPIO_writePin>
	/* Configure timer control register
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    2ac8:	e3 e5       	ldi	r30, 0x53	; 83
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	88 e6       	ldi	r24, 0x68	; 104
    2ace:	80 83       	st	Z, r24
}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <PWM_Timer0_Start>:
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	0f 92       	push	r0
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	89 83       	std	Y+1, r24	; 0x01
#error "duty is not correct"

#endif


	OCR0  =duty_cycle; /* Set Compare Value */
    2ae2:	ec e5       	ldi	r30, 0x5C	; 92
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	80 83       	st	Z, r24


	/* clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 |= (1<<CS01);
    2aea:	a3 e5       	ldi	r26, 0x53	; 83
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e3 e5       	ldi	r30, 0x53	; 83
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	82 60       	ori	r24, 0x02	; 2
    2af6:	8c 93       	st	X, r24
}
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_COMPA_vect)
{
    2b00:	1f 92       	push	r1
    2b02:	0f 92       	push	r0
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	0f 92       	push	r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	2f 93       	push	r18
    2b0c:	3f 93       	push	r19
    2b0e:	4f 93       	push	r20
    2b10:	5f 93       	push	r21
    2b12:	6f 93       	push	r22
    2b14:	7f 93       	push	r23
    2b16:	8f 93       	push	r24
    2b18:	9f 93       	push	r25
    2b1a:	af 93       	push	r26
    2b1c:	bf 93       	push	r27
    2b1e:	ef 93       	push	r30
    2b20:	ff 93       	push	r31
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2b2a:	80 91 7c 00 	lds	r24, 0x007C
    2b2e:	90 91 7d 00 	lds	r25, 0x007D
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	29 f0       	breq	.+10     	; 0x2b40 <__vector_7+0x40>
		{
	/* Call the Call Back function in the application */
			(*g_callBackPtr)();
    2b36:	e0 91 7c 00 	lds	r30, 0x007C
    2b3a:	f0 91 7d 00 	lds	r31, 0x007D
    2b3e:	09 95       	icall
		}
}
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	ff 91       	pop	r31
    2b46:	ef 91       	pop	r30
    2b48:	bf 91       	pop	r27
    2b4a:	af 91       	pop	r26
    2b4c:	9f 91       	pop	r25
    2b4e:	8f 91       	pop	r24
    2b50:	7f 91       	pop	r23
    2b52:	6f 91       	pop	r22
    2b54:	5f 91       	pop	r21
    2b56:	4f 91       	pop	r20
    2b58:	3f 91       	pop	r19
    2b5a:	2f 91       	pop	r18
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	0f 90       	pop	r0
    2b62:	1f 90       	pop	r1
    2b64:	18 95       	reti

00002b66 <__vector_9>:

/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_OVF_vect)
{
    2b66:	1f 92       	push	r1
    2b68:	0f 92       	push	r0
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	0f 92       	push	r0
    2b6e:	11 24       	eor	r1, r1
    2b70:	2f 93       	push	r18
    2b72:	3f 93       	push	r19
    2b74:	4f 93       	push	r20
    2b76:	5f 93       	push	r21
    2b78:	6f 93       	push	r22
    2b7a:	7f 93       	push	r23
    2b7c:	8f 93       	push	r24
    2b7e:	9f 93       	push	r25
    2b80:	af 93       	push	r26
    2b82:	bf 93       	push	r27
    2b84:	ef 93       	push	r30
    2b86:	ff 93       	push	r31
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2b90:	80 91 7c 00 	lds	r24, 0x007C
    2b94:	90 91 7d 00 	lds	r25, 0x007D
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	29 f0       	breq	.+10     	; 0x2ba6 <__vector_9+0x40>
		{
	/* Call the Call Back function in the application  */
			(*g_callBackPtr)();
    2b9c:	e0 91 7c 00 	lds	r30, 0x007C
    2ba0:	f0 91 7d 00 	lds	r31, 0x007D
    2ba4:	09 95       	icall
		}
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	ff 91       	pop	r31
    2bac:	ef 91       	pop	r30
    2bae:	bf 91       	pop	r27
    2bb0:	af 91       	pop	r26
    2bb2:	9f 91       	pop	r25
    2bb4:	8f 91       	pop	r24
    2bb6:	7f 91       	pop	r23
    2bb8:	6f 91       	pop	r22
    2bba:	5f 91       	pop	r21
    2bbc:	4f 91       	pop	r20
    2bbe:	3f 91       	pop	r19
    2bc0:	2f 91       	pop	r18
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	0f 90       	pop	r0
    2bc8:	1f 90       	pop	r1
    2bca:	18 95       	reti

00002bcc <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <Timer1_init+0x6>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = (Config_Ptr->initial_value); /*Initializing The TCNT Register with the initial value*/
    2bda:	ac e4       	ldi	r26, 0x4C	; 76
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	9c 93       	st	X, r25
    2bea:	8e 93       	st	-X, r24

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler); /*setting the prescaler */
    2bec:	ae e4       	ldi	r26, 0x4E	; 78
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	ee e4       	ldi	r30, 0x4E	; 78
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	98 2f       	mov	r25, r24
    2bf8:	98 7f       	andi	r25, 0xF8	; 248
    2bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfe:	84 81       	ldd	r24, Z+4	; 0x04
    2c00:	89 2b       	or	r24, r25
    2c02:	8c 93       	st	X, r24
	if ((Config_Ptr->mode)== Normal_mode )
    2c04:	e9 81       	ldd	r30, Y+1	; 0x01
    2c06:	fa 81       	ldd	r31, Y+2	; 0x02
    2c08:	85 81       	ldd	r24, Z+5	; 0x05
    2c0a:	88 23       	and	r24, r24
    2c0c:	61 f4       	brne	.+24     	; 0x2c26 <Timer1_init+0x5a>
	{
		TIMSK |= (1<<TOIE1);/*Enabling overflow interrupt*/
    2c0e:	a9 e5       	ldi	r26, 0x59	; 89
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e9 e5       	ldi	r30, 0x59	; 89
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	84 60       	ori	r24, 0x04	; 4
    2c1a:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A) | (1<<FOC1B)  ; /*setting two registers in case of no PWM*/
    2c1c:	ef e4       	ldi	r30, 0x4F	; 79
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	8c e0       	ldi	r24, 0x0C	; 12
    2c22:	80 83       	st	Z, r24
    2c24:	25 c0       	rjmp	.+74     	; 0x2c70 <Timer1_init+0xa4>
	}
	else if ( (Config_Ptr->mode)== Compare_mode)
    2c26:	e9 81       	ldd	r30, Y+1	; 0x01
    2c28:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2a:	85 81       	ldd	r24, Z+5	; 0x05
    2c2c:	84 30       	cpi	r24, 0x04	; 4
    2c2e:	01 f5       	brne	.+64     	; 0x2c70 <Timer1_init+0xa4>
	{
		OCR1A = (Config_Ptr->compare_value); /* Set the compare value */
    2c30:	aa e4       	ldi	r26, 0x4A	; 74
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e9 81       	ldd	r30, Y+1	; 0x01
    2c36:	fa 81       	ldd	r31, Y+2	; 0x02
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	11 96       	adiw	r26, 0x01	; 1
    2c3e:	9c 93       	st	X, r25
    2c40:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /*Enabling compare mode interrupt*/
    2c42:	a9 e5       	ldi	r26, 0x59	; 89
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e9 e5       	ldi	r30, 0x59	; 89
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	80 61       	ori	r24, 0x10	; 16
    2c4e:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A)| (1<<FOC1B) ;/*setting two registers in case of no PWM*/
    2c50:	ef e4       	ldi	r30, 0x4F	; 79
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	8c e0       	ldi	r24, 0x0C	; 12
    2c56:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
    2c58:	ae e4       	ldi	r26, 0x4E	; 78
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	ee e4       	ldi	r30, 0x4E	; 78
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	88 60       	ori	r24, 0x08	; 8
    2c64:	8c 93       	st	X, r24
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	65 e0       	ldi	r22, 0x05	; 5
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 4f 18 	call	0x309e	; 0x309e <GPIO_setupPinDirection>
	}
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <Timer1_deInit>:
void Timer1_deInit(void){
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
	/*clearing all registers */
	TCCR1A = 0;
    2c82:	ef e4       	ldi	r30, 0x4F	; 79
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	10 82       	st	Z, r1
	TCCR1B = 0;
    2c88:	ee e4       	ldi	r30, 0x4E	; 78
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	10 82       	st	Z, r1
	TCNT1 = 0;
    2c8e:	ec e4       	ldi	r30, 0x4C	; 76
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	11 82       	std	Z+1, r1	; 0x01
    2c94:	10 82       	st	Z, r1
	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    2c96:	a9 e5       	ldi	r26, 0x59	; 89
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e9 e5       	ldi	r30, 0x59	; 89
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8f 7d       	andi	r24, 0xDF	; 223
    2ca2:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
    2ca4:	a9 e5       	ldi	r26, 0x59	; 89
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e9 e5       	ldi	r30, 0x59	; 89
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8f 7e       	andi	r24, 0xEF	; 239
    2cb0:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2cb2:	10 92 7d 00 	sts	0x007D, r1
    2cb6:	10 92 7c 00 	sts	0x007C, r1
}
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <Timer1_setCallBack+0x6>
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	90 93 7d 00 	sts	0x007D, r25
    2cd6:	80 93 7c 00 	sts	0x007C, r24
}
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <UART_init+0x6>
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <UART_init+0x8>
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2cf4:	1a 82       	std	Y+2, r1	; 0x02
    2cf6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2cf8:	eb e2       	ldi	r30, 0x2B	; 43
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	80 83       	st	Z, r24
	/*putting parity , bit mode, stop bit in thier places in UCSRC register for bit-data =9*/
	if ((Config_Ptr->bit_data)== Nine_bit )
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	80 81       	ld	r24, Z
    2d06:	84 30       	cpi	r24, 0x04	; 4
    2d08:	39 f5       	brne	.+78     	; 0x2d58 <UART_init+0x74>
	{
		UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<UCSZ2) ;
    2d0a:	ea e2       	ldi	r30, 0x2A	; 42
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	8c e1       	ldi	r24, 0x1C	; 28
    2d10:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1) | ((UCSRC & 0xF7)|(Config_Ptr->stop_bit) << 3)|((Config_Ptr->parity) << 4);
    2d12:	a0 e4       	ldi	r26, 0x40	; 64
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e0 e4       	ldi	r30, 0x40	; 64
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	27 7f       	andi	r18, 0xF7	; 247
    2d20:	eb 81       	ldd	r30, Y+3	; 0x03
    2d22:	fc 81       	ldd	r31, Y+4	; 0x04
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	82 2b       	or	r24, r18
    2d38:	28 2f       	mov	r18, r24
    2d3a:	26 68       	ori	r18, 0x86	; 134
    2d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d40:	81 81       	ldd	r24, Z+1	; 0x01
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	82 95       	swap	r24
    2d48:	92 95       	swap	r25
    2d4a:	90 7f       	andi	r25, 0xF0	; 240
    2d4c:	98 27       	eor	r25, r24
    2d4e:	80 7f       	andi	r24, 0xF0	; 240
    2d50:	98 27       	eor	r25, r24
    2d52:	82 2b       	or	r24, r18
    2d54:	8c 93       	st	X, r24
    2d56:	3d c0       	rjmp	.+122    	; 0x2dd2 <UART_init+0xee>
	}
	/*putting parity , bit mode, stop bit in thier places in UCSRC register for bit-datas =5,6,7,8*/
	else
	{
		UCSRB = (1<<RXEN) | (1<<TXEN);
    2d58:	ea e2       	ldi	r30, 0x2A	; 42
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	88 e1       	ldi	r24, 0x18	; 24
    2d5e:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL);
    2d60:	e0 e4       	ldi	r30, 0x40	; 64
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 e8       	ldi	r24, 0x80	; 128
    2d66:	80 83       	st	Z, r24
		UCSRC = ((UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1))|((UCSRC & 0xCF) | ((Config_Ptr->parity)<<4))|((UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3));
    2d68:	a0 e4       	ldi	r26, 0x40	; 64
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e0 e4       	ldi	r30, 0x40	; 64
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	28 2f       	mov	r18, r24
    2d74:	29 7f       	andi	r18, 0xF9	; 249
    2d76:	eb 81       	ldd	r30, Y+3	; 0x03
    2d78:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7a:	80 81       	ld	r24, Z
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	32 2f       	mov	r19, r18
    2d86:	38 2b       	or	r19, r24
    2d88:	e0 e4       	ldi	r30, 0x40	; 64
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	28 2f       	mov	r18, r24
    2d90:	2f 7c       	andi	r18, 0xCF	; 207
    2d92:	eb 81       	ldd	r30, Y+3	; 0x03
    2d94:	fc 81       	ldd	r31, Y+4	; 0x04
    2d96:	81 81       	ldd	r24, Z+1	; 0x01
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	82 95       	swap	r24
    2d9e:	92 95       	swap	r25
    2da0:	90 7f       	andi	r25, 0xF0	; 240
    2da2:	98 27       	eor	r25, r24
    2da4:	80 7f       	andi	r24, 0xF0	; 240
    2da6:	98 27       	eor	r25, r24
    2da8:	82 2b       	or	r24, r18
    2daa:	38 2b       	or	r19, r24
    2dac:	e0 e4       	ldi	r30, 0x40	; 64
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	28 2f       	mov	r18, r24
    2db4:	27 7f       	andi	r18, 0xF7	; 247
    2db6:	eb 81       	ldd	r30, Y+3	; 0x03
    2db8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dba:	82 81       	ldd	r24, Z+2	; 0x02
    2dbc:	88 2f       	mov	r24, r24
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	82 2b       	or	r24, r18
    2dce:	83 2b       	or	r24, r19
    2dd0:	8c 93       	st	X, r24




	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2dd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd6:	83 81       	ldd	r24, Z+3	; 0x03
    2dd8:	94 81       	ldd	r25, Z+4	; 0x04
    2dda:	a5 81       	ldd	r26, Z+5	; 0x05
    2ddc:	b6 81       	ldd	r27, Z+6	; 0x06
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	aa 1f       	adc	r26, r26
    2de4:	bb 1f       	adc	r27, r27
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	aa 1f       	adc	r26, r26
    2dec:	bb 1f       	adc	r27, r27
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	aa 1f       	adc	r26, r26
    2df4:	bb 1f       	adc	r27, r27
    2df6:	9c 01       	movw	r18, r24
    2df8:	ad 01       	movw	r20, r26
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	92 e1       	ldi	r25, 0x12	; 18
    2dfe:	aa e7       	ldi	r26, 0x7A	; 122
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
    2e0a:	da 01       	movw	r26, r20
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e14:	e0 e4       	ldi	r30, 0x40	; 64
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	89 2f       	mov	r24, r25
    2e1e:	99 27       	eor	r25, r25
    2e20:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e22:	e9 e2       	ldi	r30, 0x29	; 41
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	80 83       	st	Z, r24
}
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	0f 92       	push	r0
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e44:	eb e2       	ldi	r30, 0x2B	; 43
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	88 2f       	mov	r24, r24
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	80 72       	andi	r24, 0x20	; 32
    2e50:	90 70       	andi	r25, 0x00	; 0
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	b9 f3       	breq	.-18     	; 0x2e44 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e56:	ec e2       	ldi	r30, 0x2C	; 44
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e6e:	eb e2       	ldi	r30, 0x2B	; 43
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	88 23       	and	r24, r24
    2e76:	dc f7       	brge	.-10     	; 0x2e6e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2e78:	ec e2       	ldi	r30, 0x2C	; 44
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <UART_sendString+0x6>
    2e8a:	0f 92       	push	r0
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	9b 83       	std	Y+3, r25	; 0x03
    2e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e94:	19 82       	std	Y+1, r1	; 0x01
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	80 81       	ld	r24, Z
    2eaa:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <UART_sendByte>
		i++;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e2 0f       	add	r30, r18
    2ec2:	f3 1f       	adc	r31, r19
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 23       	and	r24, r24
    2ec8:	39 f7       	brne	.-50     	; 0x2e98 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <UART_receiveString+0xa>
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	9b 83       	std	Y+3, r25	; 0x03
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	28 2f       	mov	r18, r24
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef6:	8c 01       	movw	r16, r24
    2ef8:	02 0f       	add	r16, r18
    2efa:	13 1f       	adc	r17, r19
    2efc:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    2f00:	f8 01       	movw	r30, r16
    2f02:	80 83       	st	Z, r24
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	8f 5f       	subi	r24, 0xFF	; 255
    2f0a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	8c 01       	movw	r16, r24
    2f18:	02 0f       	add	r16, r18
    2f1a:	13 1f       	adc	r17, r19
    2f1c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART_recieveByte>
    2f20:	f8 01       	movw	r30, r16
    2f22:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2e:	fc 01       	movw	r30, r24
    2f30:	e2 0f       	add	r30, r18
    2f32:	f3 1f       	adc	r31, r19
    2f34:	80 81       	ld	r24, Z
    2f36:	83 32       	cpi	r24, 0x23	; 35
    2f38:	31 f7       	brne	.-52     	; 0x2f06 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	9b 81       	ldd	r25, Y+3	; 0x03
    2f44:	fc 01       	movw	r30, r24
    2f46:	e2 0f       	add	r30, r18
    2f48:	f3 1f       	adc	r31, r19
    2f4a:	10 82       	st	Z, r1
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	1f 91       	pop	r17
    2f58:	0f 91       	pop	r16
    2f5a:	08 95       	ret

00002f5c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <EEPROM_writeByte+0x6>
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <EEPROM_writeByte+0x8>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2f6e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2f72:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    2f76:	88 30       	cpi	r24, 0x08	; 8
    2f78:	11 f0       	breq	.+4      	; 0x2f7e <EEPROM_writeByte+0x22>
        return ERROR;
    2f7a:	1c 82       	std	Y+4, r1	; 0x04
    2f7c:	28 c0       	rjmp	.+80     	; 0x2fce <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	80 70       	andi	r24, 0x00	; 0
    2f84:	97 70       	andi	r25, 0x07	; 7
    2f86:	88 0f       	add	r24, r24
    2f88:	89 2f       	mov	r24, r25
    2f8a:	88 1f       	adc	r24, r24
    2f8c:	99 0b       	sbc	r25, r25
    2f8e:	91 95       	neg	r25
    2f90:	80 6a       	ori	r24, 0xA0	; 160
    2f92:	0e 94 cc 1b 	call	0x3798	; 0x3798 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2f96:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    2f9a:	88 31       	cpi	r24, 0x18	; 24
    2f9c:	11 f0       	breq	.+4      	; 0x2fa2 <EEPROM_writeByte+0x46>
        return ERROR; 
    2f9e:	1c 82       	std	Y+4, r1	; 0x04
    2fa0:	16 c0       	rjmp	.+44     	; 0x2fce <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2fa8:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    2fac:	88 32       	cpi	r24, 0x28	; 40
    2fae:	11 f0       	breq	.+4      	; 0x2fb4 <EEPROM_writeByte+0x58>
        return ERROR;
    2fb0:	1c 82       	std	Y+4, r1	; 0x04
    2fb2:	0d c0       	rjmp	.+26     	; 0x2fce <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2fba:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    2fbe:	88 32       	cpi	r24, 0x28	; 40
    2fc0:	11 f0       	breq	.+4      	; 0x2fc6 <EEPROM_writeByte+0x6a>
        return ERROR;
    2fc2:	1c 82       	std	Y+4, r1	; 0x04
    2fc4:	04 c0       	rjmp	.+8      	; 0x2fce <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2fc6:	0e 94 c1 1b 	call	0x3782	; 0x3782 <TWI_stop>
	
    return SUCCESS;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	8c 83       	std	Y+4, r24	; 0x04
    2fce:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <EEPROM_readByte+0x6>
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <EEPROM_readByte+0x8>
    2fe6:	0f 92       	push	r0
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	7c 83       	std	Y+4, r23	; 0x04
    2ff2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2ff4:	0e 94 b1 1b 	call	0x3762	; 0x3762 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2ff8:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    2ffc:	88 30       	cpi	r24, 0x08	; 8
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <EEPROM_readByte+0x26>
        return ERROR;
    3000:	1d 82       	std	Y+5, r1	; 0x05
    3002:	44 c0       	rjmp	.+136    	; 0x308c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	80 70       	andi	r24, 0x00	; 0
    300a:	97 70       	andi	r25, 0x07	; 7
    300c:	88 0f       	add	r24, r24
    300e:	89 2f       	mov	r24, r25
    3010:	88 1f       	adc	r24, r24
    3012:	99 0b       	sbc	r25, r25
    3014:	91 95       	neg	r25
    3016:	80 6a       	ori	r24, 0xA0	; 160
    3018:	0e 94 cc 1b 	call	0x3798	; 0x3798 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    301c:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    3020:	88 31       	cpi	r24, 0x18	; 24
    3022:	11 f0       	breq	.+4      	; 0x3028 <EEPROM_readByte+0x4a>
        return ERROR;
    3024:	1d 82       	std	Y+5, r1	; 0x05
    3026:	32 c0       	rjmp	.+100    	; 0x308c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	0e 94 cc 1b 	call	0x3798	; 0x3798 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    302e:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    3032:	88 32       	cpi	r24, 0x28	; 40
    3034:	11 f0       	breq	.+4      	; 0x303a <EEPROM_readByte+0x5c>
        return ERROR;
    3036:	1d 82       	std	Y+5, r1	; 0x05
    3038:	29 c0       	rjmp	.+82     	; 0x308c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    303a:	0e 94 b1 1b 	call	0x3762	; 0x3762 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    303e:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    3042:	80 31       	cpi	r24, 0x10	; 16
    3044:	11 f0       	breq	.+4      	; 0x304a <EEPROM_readByte+0x6c>
        return ERROR;
    3046:	1d 82       	std	Y+5, r1	; 0x05
    3048:	21 c0       	rjmp	.+66     	; 0x308c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	80 70       	andi	r24, 0x00	; 0
    3050:	97 70       	andi	r25, 0x07	; 7
    3052:	88 0f       	add	r24, r24
    3054:	89 2f       	mov	r24, r25
    3056:	88 1f       	adc	r24, r24
    3058:	99 0b       	sbc	r25, r25
    305a:	91 95       	neg	r25
    305c:	81 6a       	ori	r24, 0xA1	; 161
    305e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    3062:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    3066:	80 34       	cpi	r24, 0x40	; 64
    3068:	11 f0       	breq	.+4      	; 0x306e <EEPROM_readByte+0x90>
        return ERROR;
    306a:	1d 82       	std	Y+5, r1	; 0x05
    306c:	0f c0       	rjmp	.+30     	; 0x308c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    306e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <TWI_readByteWithNACK>
    3072:	eb 81       	ldd	r30, Y+3	; 0x03
    3074:	fc 81       	ldd	r31, Y+4	; 0x04
    3076:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    3078:	0e 94 09 1c 	call	0x3812	; 0x3812 <TWI_getStatus>
    307c:	88 35       	cpi	r24, 0x58	; 88
    307e:	11 f0       	breq	.+4      	; 0x3084 <EEPROM_readByte+0xa6>
        return ERROR;
    3080:	1d 82       	std	Y+5, r1	; 0x05
    3082:	04 c0       	rjmp	.+8      	; 0x308c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    3084:	0e 94 c1 1b 	call	0x3782	; 0x3782 <TWI_stop>

    return SUCCESS;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	8d 83       	std	Y+5, r24	; 0x05
    308c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	00 d0       	rcall	.+0      	; 0x30a4 <GPIO_setupPinDirection+0x6>
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <GPIO_setupPinDirection+0x8>
    30a6:	0f 92       	push	r0
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	6a 83       	std	Y+2, r22	; 0x02
    30b0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	88 30       	cpi	r24, 0x08	; 8
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <GPIO_setupPinDirection+0x1c>
    30b8:	d5 c0       	rjmp	.+426    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	84 30       	cpi	r24, 0x04	; 4
    30be:	08 f0       	brcs	.+2      	; 0x30c2 <GPIO_setupPinDirection+0x24>
    30c0:	d1 c0       	rjmp	.+418    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	3d 83       	std	Y+5, r19	; 0x05
    30ca:	2c 83       	std	Y+4, r18	; 0x04
    30cc:	8c 81       	ldd	r24, Y+4	; 0x04
    30ce:	9d 81       	ldd	r25, Y+5	; 0x05
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	91 05       	cpc	r25, r1
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <GPIO_setupPinDirection+0x3a>
    30d6:	43 c0       	rjmp	.+134    	; 0x315e <GPIO_setupPinDirection+0xc0>
    30d8:	2c 81       	ldd	r18, Y+4	; 0x04
    30da:	3d 81       	ldd	r19, Y+5	; 0x05
    30dc:	22 30       	cpi	r18, 0x02	; 2
    30de:	31 05       	cpc	r19, r1
    30e0:	2c f4       	brge	.+10     	; 0x30ec <GPIO_setupPinDirection+0x4e>
    30e2:	8c 81       	ldd	r24, Y+4	; 0x04
    30e4:	9d 81       	ldd	r25, Y+5	; 0x05
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	71 f0       	breq	.+28     	; 0x3106 <GPIO_setupPinDirection+0x68>
    30ea:	bc c0       	rjmp	.+376    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
    30ec:	2c 81       	ldd	r18, Y+4	; 0x04
    30ee:	3d 81       	ldd	r19, Y+5	; 0x05
    30f0:	22 30       	cpi	r18, 0x02	; 2
    30f2:	31 05       	cpc	r19, r1
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <GPIO_setupPinDirection+0x5a>
    30f6:	5f c0       	rjmp	.+190    	; 0x31b6 <GPIO_setupPinDirection+0x118>
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	9d 81       	ldd	r25, Y+5	; 0x05
    30fc:	83 30       	cpi	r24, 0x03	; 3
    30fe:	91 05       	cpc	r25, r1
    3100:	09 f4       	brne	.+2      	; 0x3104 <GPIO_setupPinDirection+0x66>
    3102:	85 c0       	rjmp	.+266    	; 0x320e <GPIO_setupPinDirection+0x170>
    3104:	af c0       	rjmp	.+350    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	81 30       	cpi	r24, 0x01	; 1
    310a:	a1 f4       	brne	.+40     	; 0x3134 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    310c:	aa e3       	ldi	r26, 0x3A	; 58
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	ea e3       	ldi	r30, 0x3A	; 58
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	48 2f       	mov	r20, r24
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	02 2e       	mov	r0, r18
    3124:	02 c0       	rjmp	.+4      	; 0x312a <GPIO_setupPinDirection+0x8c>
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	0a 94       	dec	r0
    312c:	e2 f7       	brpl	.-8      	; 0x3126 <GPIO_setupPinDirection+0x88>
    312e:	84 2b       	or	r24, r20
    3130:	8c 93       	st	X, r24
    3132:	98 c0       	rjmp	.+304    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3134:	aa e3       	ldi	r26, 0x3A	; 58
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	ea e3       	ldi	r30, 0x3A	; 58
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	48 2f       	mov	r20, r24
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	02 2e       	mov	r0, r18
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <GPIO_setupPinDirection+0xb4>
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	0a 94       	dec	r0
    3154:	e2 f7       	brpl	.-8      	; 0x314e <GPIO_setupPinDirection+0xb0>
    3156:	80 95       	com	r24
    3158:	84 23       	and	r24, r20
    315a:	8c 93       	st	X, r24
    315c:	83 c0       	rjmp	.+262    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	a1 f4       	brne	.+40     	; 0x318c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3164:	a7 e3       	ldi	r26, 0x37	; 55
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e7 e3       	ldi	r30, 0x37	; 55
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	48 2f       	mov	r20, r24
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	02 2e       	mov	r0, r18
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <GPIO_setupPinDirection+0xe4>
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	0a 94       	dec	r0
    3184:	e2 f7       	brpl	.-8      	; 0x317e <GPIO_setupPinDirection+0xe0>
    3186:	84 2b       	or	r24, r20
    3188:	8c 93       	st	X, r24
    318a:	6c c0       	rjmp	.+216    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    318c:	a7 e3       	ldi	r26, 0x37	; 55
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e7 e3       	ldi	r30, 0x37	; 55
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	48 2f       	mov	r20, r24
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	02 2e       	mov	r0, r18
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <GPIO_setupPinDirection+0x10c>
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	0a 94       	dec	r0
    31ac:	e2 f7       	brpl	.-8      	; 0x31a6 <GPIO_setupPinDirection+0x108>
    31ae:	80 95       	com	r24
    31b0:	84 23       	and	r24, r20
    31b2:	8c 93       	st	X, r24
    31b4:	57 c0       	rjmp	.+174    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	a1 f4       	brne	.+40     	; 0x31e4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    31bc:	a4 e3       	ldi	r26, 0x34	; 52
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	e4 e3       	ldi	r30, 0x34	; 52
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	48 2f       	mov	r20, r24
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	02 2e       	mov	r0, r18
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <GPIO_setupPinDirection+0x13c>
    31d6:	88 0f       	add	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	0a 94       	dec	r0
    31dc:	e2 f7       	brpl	.-8      	; 0x31d6 <GPIO_setupPinDirection+0x138>
    31de:	84 2b       	or	r24, r20
    31e0:	8c 93       	st	X, r24
    31e2:	40 c0       	rjmp	.+128    	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    31e4:	a4 e3       	ldi	r26, 0x34	; 52
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e4 e3       	ldi	r30, 0x34	; 52
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	48 2f       	mov	r20, r24
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	02 2e       	mov	r0, r18
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <GPIO_setupPinDirection+0x164>
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	0a 94       	dec	r0
    3204:	e2 f7       	brpl	.-8      	; 0x31fe <GPIO_setupPinDirection+0x160>
    3206:	80 95       	com	r24
    3208:	84 23       	and	r24, r20
    320a:	8c 93       	st	X, r24
    320c:	2b c0       	rjmp	.+86     	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	81 30       	cpi	r24, 0x01	; 1
    3212:	a1 f4       	brne	.+40     	; 0x323c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3214:	a1 e3       	ldi	r26, 0x31	; 49
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e1 e3       	ldi	r30, 0x31	; 49
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	48 2f       	mov	r20, r24
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	02 2e       	mov	r0, r18
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <GPIO_setupPinDirection+0x194>
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	0a 94       	dec	r0
    3234:	e2 f7       	brpl	.-8      	; 0x322e <GPIO_setupPinDirection+0x190>
    3236:	84 2b       	or	r24, r20
    3238:	8c 93       	st	X, r24
    323a:	14 c0       	rjmp	.+40     	; 0x3264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    323c:	a1 e3       	ldi	r26, 0x31	; 49
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e1 e3       	ldi	r30, 0x31	; 49
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	48 2f       	mov	r20, r24
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	28 2f       	mov	r18, r24
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	02 2e       	mov	r0, r18
    3254:	02 c0       	rjmp	.+4      	; 0x325a <GPIO_setupPinDirection+0x1bc>
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	0a 94       	dec	r0
    325c:	e2 f7       	brpl	.-8      	; 0x3256 <GPIO_setupPinDirection+0x1b8>
    325e:	80 95       	com	r24
    3260:	84 23       	and	r24, r20
    3262:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	00 d0       	rcall	.+0      	; 0x327a <GPIO_writePin+0x6>
    327a:	00 d0       	rcall	.+0      	; 0x327c <GPIO_writePin+0x8>
    327c:	0f 92       	push	r0
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	6a 83       	std	Y+2, r22	; 0x02
    3286:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	88 30       	cpi	r24, 0x08	; 8
    328c:	08 f0       	brcs	.+2      	; 0x3290 <GPIO_writePin+0x1c>
    328e:	d5 c0       	rjmp	.+426    	; 0x343a <GPIO_writePin+0x1c6>
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	84 30       	cpi	r24, 0x04	; 4
    3294:	08 f0       	brcs	.+2      	; 0x3298 <GPIO_writePin+0x24>
    3296:	d1 c0       	rjmp	.+418    	; 0x343a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	3d 83       	std	Y+5, r19	; 0x05
    32a0:	2c 83       	std	Y+4, r18	; 0x04
    32a2:	8c 81       	ldd	r24, Y+4	; 0x04
    32a4:	9d 81       	ldd	r25, Y+5	; 0x05
    32a6:	81 30       	cpi	r24, 0x01	; 1
    32a8:	91 05       	cpc	r25, r1
    32aa:	09 f4       	brne	.+2      	; 0x32ae <GPIO_writePin+0x3a>
    32ac:	43 c0       	rjmp	.+134    	; 0x3334 <GPIO_writePin+0xc0>
    32ae:	2c 81       	ldd	r18, Y+4	; 0x04
    32b0:	3d 81       	ldd	r19, Y+5	; 0x05
    32b2:	22 30       	cpi	r18, 0x02	; 2
    32b4:	31 05       	cpc	r19, r1
    32b6:	2c f4       	brge	.+10     	; 0x32c2 <GPIO_writePin+0x4e>
    32b8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ba:	9d 81       	ldd	r25, Y+5	; 0x05
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	71 f0       	breq	.+28     	; 0x32dc <GPIO_writePin+0x68>
    32c0:	bc c0       	rjmp	.+376    	; 0x343a <GPIO_writePin+0x1c6>
    32c2:	2c 81       	ldd	r18, Y+4	; 0x04
    32c4:	3d 81       	ldd	r19, Y+5	; 0x05
    32c6:	22 30       	cpi	r18, 0x02	; 2
    32c8:	31 05       	cpc	r19, r1
    32ca:	09 f4       	brne	.+2      	; 0x32ce <GPIO_writePin+0x5a>
    32cc:	5f c0       	rjmp	.+190    	; 0x338c <GPIO_writePin+0x118>
    32ce:	8c 81       	ldd	r24, Y+4	; 0x04
    32d0:	9d 81       	ldd	r25, Y+5	; 0x05
    32d2:	83 30       	cpi	r24, 0x03	; 3
    32d4:	91 05       	cpc	r25, r1
    32d6:	09 f4       	brne	.+2      	; 0x32da <GPIO_writePin+0x66>
    32d8:	85 c0       	rjmp	.+266    	; 0x33e4 <GPIO_writePin+0x170>
    32da:	af c0       	rjmp	.+350    	; 0x343a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	a1 f4       	brne	.+40     	; 0x330a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    32e2:	ab e3       	ldi	r26, 0x3B	; 59
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	eb e3       	ldi	r30, 0x3B	; 59
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	48 2f       	mov	r20, r24
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	28 2f       	mov	r18, r24
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	02 2e       	mov	r0, r18
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <GPIO_writePin+0x8c>
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	0a 94       	dec	r0
    3302:	e2 f7       	brpl	.-8      	; 0x32fc <GPIO_writePin+0x88>
    3304:	84 2b       	or	r24, r20
    3306:	8c 93       	st	X, r24
    3308:	98 c0       	rjmp	.+304    	; 0x343a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    330a:	ab e3       	ldi	r26, 0x3B	; 59
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	eb e3       	ldi	r30, 0x3B	; 59
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	48 2f       	mov	r20, r24
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	02 2e       	mov	r0, r18
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <GPIO_writePin+0xb4>
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	0a 94       	dec	r0
    332a:	e2 f7       	brpl	.-8      	; 0x3324 <GPIO_writePin+0xb0>
    332c:	80 95       	com	r24
    332e:	84 23       	and	r24, r20
    3330:	8c 93       	st	X, r24
    3332:	83 c0       	rjmp	.+262    	; 0x343a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	81 30       	cpi	r24, 0x01	; 1
    3338:	a1 f4       	brne	.+40     	; 0x3362 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    333a:	a8 e3       	ldi	r26, 0x38	; 56
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e8 e3       	ldi	r30, 0x38	; 56
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	48 2f       	mov	r20, r24
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	02 2e       	mov	r0, r18
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <GPIO_writePin+0xe4>
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	0a 94       	dec	r0
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <GPIO_writePin+0xe0>
    335c:	84 2b       	or	r24, r20
    335e:	8c 93       	st	X, r24
    3360:	6c c0       	rjmp	.+216    	; 0x343a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    3362:	a8 e3       	ldi	r26, 0x38	; 56
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e8 e3       	ldi	r30, 0x38	; 56
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	48 2f       	mov	r20, r24
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	28 2f       	mov	r18, r24
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	02 2e       	mov	r0, r18
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <GPIO_writePin+0x10c>
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	0a 94       	dec	r0
    3382:	e2 f7       	brpl	.-8      	; 0x337c <GPIO_writePin+0x108>
    3384:	80 95       	com	r24
    3386:	84 23       	and	r24, r20
    3388:	8c 93       	st	X, r24
    338a:	57 c0       	rjmp	.+174    	; 0x343a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	81 30       	cpi	r24, 0x01	; 1
    3390:	a1 f4       	brne	.+40     	; 0x33ba <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    3392:	a5 e3       	ldi	r26, 0x35	; 53
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e5 e3       	ldi	r30, 0x35	; 53
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	48 2f       	mov	r20, r24
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 2e       	mov	r0, r18
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <GPIO_writePin+0x13c>
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <GPIO_writePin+0x138>
    33b4:	84 2b       	or	r24, r20
    33b6:	8c 93       	st	X, r24
    33b8:	40 c0       	rjmp	.+128    	; 0x343a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    33ba:	a5 e3       	ldi	r26, 0x35	; 53
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e5 e3       	ldi	r30, 0x35	; 53
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	48 2f       	mov	r20, r24
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	02 2e       	mov	r0, r18
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <GPIO_writePin+0x164>
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	0a 94       	dec	r0
    33da:	e2 f7       	brpl	.-8      	; 0x33d4 <GPIO_writePin+0x160>
    33dc:	80 95       	com	r24
    33de:	84 23       	and	r24, r20
    33e0:	8c 93       	st	X, r24
    33e2:	2b c0       	rjmp	.+86     	; 0x343a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	a1 f4       	brne	.+40     	; 0x3412 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    33ea:	a2 e3       	ldi	r26, 0x32	; 50
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	e2 e3       	ldi	r30, 0x32	; 50
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	48 2f       	mov	r20, r24
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	02 2e       	mov	r0, r18
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <GPIO_writePin+0x194>
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	0a 94       	dec	r0
    340a:	e2 f7       	brpl	.-8      	; 0x3404 <GPIO_writePin+0x190>
    340c:	84 2b       	or	r24, r20
    340e:	8c 93       	st	X, r24
    3410:	14 c0       	rjmp	.+40     	; 0x343a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    3412:	a2 e3       	ldi	r26, 0x32	; 50
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	e2 e3       	ldi	r30, 0x32	; 50
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	48 2f       	mov	r20, r24
    341e:	8a 81       	ldd	r24, Y+2	; 0x02
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	02 2e       	mov	r0, r18
    342a:	02 c0       	rjmp	.+4      	; 0x3430 <GPIO_writePin+0x1bc>
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	0a 94       	dec	r0
    3432:	e2 f7       	brpl	.-8      	; 0x342c <GPIO_writePin+0x1b8>
    3434:	80 95       	com	r24
    3436:	84 23       	and	r24, r20
    3438:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	00 d0       	rcall	.+0      	; 0x3450 <GPIO_readPin+0x6>
    3450:	00 d0       	rcall	.+0      	; 0x3452 <GPIO_readPin+0x8>
    3452:	0f 92       	push	r0
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	8a 83       	std	Y+2, r24	; 0x02
    345a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    345c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	88 30       	cpi	r24, 0x08	; 8
    3462:	08 f0       	brcs	.+2      	; 0x3466 <GPIO_readPin+0x1c>
    3464:	84 c0       	rjmp	.+264    	; 0x356e <GPIO_readPin+0x124>
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	84 30       	cpi	r24, 0x04	; 4
    346a:	08 f0       	brcs	.+2      	; 0x346e <GPIO_readPin+0x24>
    346c:	80 c0       	rjmp	.+256    	; 0x356e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	3d 83       	std	Y+5, r19	; 0x05
    3476:	2c 83       	std	Y+4, r18	; 0x04
    3478:	4c 81       	ldd	r20, Y+4	; 0x04
    347a:	5d 81       	ldd	r21, Y+5	; 0x05
    347c:	41 30       	cpi	r20, 0x01	; 1
    347e:	51 05       	cpc	r21, r1
    3480:	79 f1       	breq	.+94     	; 0x34e0 <GPIO_readPin+0x96>
    3482:	8c 81       	ldd	r24, Y+4	; 0x04
    3484:	9d 81       	ldd	r25, Y+5	; 0x05
    3486:	82 30       	cpi	r24, 0x02	; 2
    3488:	91 05       	cpc	r25, r1
    348a:	34 f4       	brge	.+12     	; 0x3498 <GPIO_readPin+0x4e>
    348c:	2c 81       	ldd	r18, Y+4	; 0x04
    348e:	3d 81       	ldd	r19, Y+5	; 0x05
    3490:	21 15       	cp	r18, r1
    3492:	31 05       	cpc	r19, r1
    3494:	69 f0       	breq	.+26     	; 0x34b0 <GPIO_readPin+0x66>
    3496:	6b c0       	rjmp	.+214    	; 0x356e <GPIO_readPin+0x124>
    3498:	4c 81       	ldd	r20, Y+4	; 0x04
    349a:	5d 81       	ldd	r21, Y+5	; 0x05
    349c:	42 30       	cpi	r20, 0x02	; 2
    349e:	51 05       	cpc	r21, r1
    34a0:	b9 f1       	breq	.+110    	; 0x3510 <GPIO_readPin+0xc6>
    34a2:	8c 81       	ldd	r24, Y+4	; 0x04
    34a4:	9d 81       	ldd	r25, Y+5	; 0x05
    34a6:	83 30       	cpi	r24, 0x03	; 3
    34a8:	91 05       	cpc	r25, r1
    34aa:	09 f4       	brne	.+2      	; 0x34ae <GPIO_readPin+0x64>
    34ac:	49 c0       	rjmp	.+146    	; 0x3540 <GPIO_readPin+0xf6>
    34ae:	5f c0       	rjmp	.+190    	; 0x356e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    34b0:	e9 e3       	ldi	r30, 0x39	; 57
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a9 01       	movw	r20, r18
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <GPIO_readPin+0x7e>
    34c4:	55 95       	asr	r21
    34c6:	47 95       	ror	r20
    34c8:	8a 95       	dec	r24
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <GPIO_readPin+0x7a>
    34cc:	ca 01       	movw	r24, r20
    34ce:	81 70       	andi	r24, 0x01	; 1
    34d0:	90 70       	andi	r25, 0x00	; 0
    34d2:	88 23       	and	r24, r24
    34d4:	19 f0       	breq	.+6      	; 0x34dc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	89 83       	std	Y+1, r24	; 0x01
    34da:	49 c0       	rjmp	.+146    	; 0x356e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    34dc:	19 82       	std	Y+1, r1	; 0x01
    34de:	47 c0       	rjmp	.+142    	; 0x356e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    34e0:	e6 e3       	ldi	r30, 0x36	; 54
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	88 2f       	mov	r24, r24
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a9 01       	movw	r20, r18
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <GPIO_readPin+0xae>
    34f4:	55 95       	asr	r21
    34f6:	47 95       	ror	r20
    34f8:	8a 95       	dec	r24
    34fa:	e2 f7       	brpl	.-8      	; 0x34f4 <GPIO_readPin+0xaa>
    34fc:	ca 01       	movw	r24, r20
    34fe:	81 70       	andi	r24, 0x01	; 1
    3500:	90 70       	andi	r25, 0x00	; 0
    3502:	88 23       	and	r24, r24
    3504:	19 f0       	breq	.+6      	; 0x350c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	31 c0       	rjmp	.+98     	; 0x356e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    350c:	19 82       	std	Y+1, r1	; 0x01
    350e:	2f c0       	rjmp	.+94     	; 0x356e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    3510:	e3 e3       	ldi	r30, 0x33	; 51
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	28 2f       	mov	r18, r24
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	88 2f       	mov	r24, r24
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	a9 01       	movw	r20, r18
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <GPIO_readPin+0xde>
    3524:	55 95       	asr	r21
    3526:	47 95       	ror	r20
    3528:	8a 95       	dec	r24
    352a:	e2 f7       	brpl	.-8      	; 0x3524 <GPIO_readPin+0xda>
    352c:	ca 01       	movw	r24, r20
    352e:	81 70       	andi	r24, 0x01	; 1
    3530:	90 70       	andi	r25, 0x00	; 0
    3532:	88 23       	and	r24, r24
    3534:	19 f0       	breq	.+6      	; 0x353c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	89 83       	std	Y+1, r24	; 0x01
    353a:	19 c0       	rjmp	.+50     	; 0x356e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    353c:	19 82       	std	Y+1, r1	; 0x01
    353e:	17 c0       	rjmp	.+46     	; 0x356e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3540:	e0 e3       	ldi	r30, 0x30	; 48
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	88 2f       	mov	r24, r24
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	a9 01       	movw	r20, r18
    3552:	02 c0       	rjmp	.+4      	; 0x3558 <GPIO_readPin+0x10e>
    3554:	55 95       	asr	r21
    3556:	47 95       	ror	r20
    3558:	8a 95       	dec	r24
    355a:	e2 f7       	brpl	.-8      	; 0x3554 <GPIO_readPin+0x10a>
    355c:	ca 01       	movw	r24, r20
    355e:	81 70       	andi	r24, 0x01	; 1
    3560:	90 70       	andi	r25, 0x00	; 0
    3562:	88 23       	and	r24, r24
    3564:	19 f0       	breq	.+6      	; 0x356c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	01 c0       	rjmp	.+2      	; 0x356e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    356c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    356e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <GPIO_setupPortDirection+0x6>
    3586:	00 d0       	rcall	.+0      	; 0x3588 <GPIO_setupPortDirection+0x8>
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	84 30       	cpi	r24, 0x04	; 4
    3594:	90 f5       	brcc	.+100    	; 0x35fa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	28 2f       	mov	r18, r24
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	3c 83       	std	Y+4, r19	; 0x04
    359e:	2b 83       	std	Y+3, r18	; 0x03
    35a0:	8b 81       	ldd	r24, Y+3	; 0x03
    35a2:	9c 81       	ldd	r25, Y+4	; 0x04
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	91 05       	cpc	r25, r1
    35a8:	d1 f0       	breq	.+52     	; 0x35de <GPIO_setupPortDirection+0x5e>
    35aa:	2b 81       	ldd	r18, Y+3	; 0x03
    35ac:	3c 81       	ldd	r19, Y+4	; 0x04
    35ae:	22 30       	cpi	r18, 0x02	; 2
    35b0:	31 05       	cpc	r19, r1
    35b2:	2c f4       	brge	.+10     	; 0x35be <GPIO_setupPortDirection+0x3e>
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	9c 81       	ldd	r25, Y+4	; 0x04
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	61 f0       	breq	.+24     	; 0x35d4 <GPIO_setupPortDirection+0x54>
    35bc:	1e c0       	rjmp	.+60     	; 0x35fa <GPIO_setupPortDirection+0x7a>
    35be:	2b 81       	ldd	r18, Y+3	; 0x03
    35c0:	3c 81       	ldd	r19, Y+4	; 0x04
    35c2:	22 30       	cpi	r18, 0x02	; 2
    35c4:	31 05       	cpc	r19, r1
    35c6:	81 f0       	breq	.+32     	; 0x35e8 <GPIO_setupPortDirection+0x68>
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	9c 81       	ldd	r25, Y+4	; 0x04
    35cc:	83 30       	cpi	r24, 0x03	; 3
    35ce:	91 05       	cpc	r25, r1
    35d0:	81 f0       	breq	.+32     	; 0x35f2 <GPIO_setupPortDirection+0x72>
    35d2:	13 c0       	rjmp	.+38     	; 0x35fa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    35d4:	ea e3       	ldi	r30, 0x3A	; 58
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	80 83       	st	Z, r24
    35dc:	0e c0       	rjmp	.+28     	; 0x35fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    35de:	e7 e3       	ldi	r30, 0x37	; 55
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	80 83       	st	Z, r24
    35e6:	09 c0       	rjmp	.+18     	; 0x35fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    35e8:	e4 e3       	ldi	r30, 0x34	; 52
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	8a 81       	ldd	r24, Y+2	; 0x02
    35ee:	80 83       	st	Z, r24
    35f0:	04 c0       	rjmp	.+8      	; 0x35fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    35f2:	e1 e3       	ldi	r30, 0x31	; 49
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	08 95       	ret

00003608 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    3608:	df 93       	push	r29
    360a:	cf 93       	push	r28
    360c:	00 d0       	rcall	.+0      	; 0x360e <GPIO_writePort+0x6>
    360e:	00 d0       	rcall	.+0      	; 0x3610 <GPIO_writePort+0x8>
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	89 83       	std	Y+1, r24	; 0x01
    3616:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	84 30       	cpi	r24, 0x04	; 4
    361c:	90 f5       	brcc	.+100    	; 0x3682 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	3c 83       	std	Y+4, r19	; 0x04
    3626:	2b 83       	std	Y+3, r18	; 0x03
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	91 05       	cpc	r25, r1
    3630:	d1 f0       	breq	.+52     	; 0x3666 <GPIO_writePort+0x5e>
    3632:	2b 81       	ldd	r18, Y+3	; 0x03
    3634:	3c 81       	ldd	r19, Y+4	; 0x04
    3636:	22 30       	cpi	r18, 0x02	; 2
    3638:	31 05       	cpc	r19, r1
    363a:	2c f4       	brge	.+10     	; 0x3646 <GPIO_writePort+0x3e>
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	9c 81       	ldd	r25, Y+4	; 0x04
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	61 f0       	breq	.+24     	; 0x365c <GPIO_writePort+0x54>
    3644:	1e c0       	rjmp	.+60     	; 0x3682 <GPIO_writePort+0x7a>
    3646:	2b 81       	ldd	r18, Y+3	; 0x03
    3648:	3c 81       	ldd	r19, Y+4	; 0x04
    364a:	22 30       	cpi	r18, 0x02	; 2
    364c:	31 05       	cpc	r19, r1
    364e:	81 f0       	breq	.+32     	; 0x3670 <GPIO_writePort+0x68>
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	9c 81       	ldd	r25, Y+4	; 0x04
    3654:	83 30       	cpi	r24, 0x03	; 3
    3656:	91 05       	cpc	r25, r1
    3658:	81 f0       	breq	.+32     	; 0x367a <GPIO_writePort+0x72>
    365a:	13 c0       	rjmp	.+38     	; 0x3682 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    365c:	eb e3       	ldi	r30, 0x3B	; 59
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	80 83       	st	Z, r24
    3664:	0e c0       	rjmp	.+28     	; 0x3682 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3666:	e8 e3       	ldi	r30, 0x38	; 56
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	80 83       	st	Z, r24
    366e:	09 c0       	rjmp	.+18     	; 0x3682 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    3670:	e5 e3       	ldi	r30, 0x35	; 53
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	80 83       	st	Z, r24
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    367a:	e2 e3       	ldi	r30, 0x32	; 50
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	80 83       	st	Z, r24
			break;
		}
	}
}
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	00 d0       	rcall	.+0      	; 0x3696 <GPIO_readPort+0x6>
    3696:	00 d0       	rcall	.+0      	; 0x3698 <GPIO_readPort+0x8>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    369e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	84 30       	cpi	r24, 0x04	; 4
    36a4:	90 f5       	brcc	.+100    	; 0x370a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    36a6:	8a 81       	ldd	r24, Y+2	; 0x02
    36a8:	28 2f       	mov	r18, r24
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	3c 83       	std	Y+4, r19	; 0x04
    36ae:	2b 83       	std	Y+3, r18	; 0x03
    36b0:	8b 81       	ldd	r24, Y+3	; 0x03
    36b2:	9c 81       	ldd	r25, Y+4	; 0x04
    36b4:	81 30       	cpi	r24, 0x01	; 1
    36b6:	91 05       	cpc	r25, r1
    36b8:	d1 f0       	breq	.+52     	; 0x36ee <GPIO_readPort+0x5e>
    36ba:	2b 81       	ldd	r18, Y+3	; 0x03
    36bc:	3c 81       	ldd	r19, Y+4	; 0x04
    36be:	22 30       	cpi	r18, 0x02	; 2
    36c0:	31 05       	cpc	r19, r1
    36c2:	2c f4       	brge	.+10     	; 0x36ce <GPIO_readPort+0x3e>
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	9c 81       	ldd	r25, Y+4	; 0x04
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	61 f0       	breq	.+24     	; 0x36e4 <GPIO_readPort+0x54>
    36cc:	1e c0       	rjmp	.+60     	; 0x370a <GPIO_readPort+0x7a>
    36ce:	2b 81       	ldd	r18, Y+3	; 0x03
    36d0:	3c 81       	ldd	r19, Y+4	; 0x04
    36d2:	22 30       	cpi	r18, 0x02	; 2
    36d4:	31 05       	cpc	r19, r1
    36d6:	81 f0       	breq	.+32     	; 0x36f8 <GPIO_readPort+0x68>
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	9c 81       	ldd	r25, Y+4	; 0x04
    36dc:	83 30       	cpi	r24, 0x03	; 3
    36de:	91 05       	cpc	r25, r1
    36e0:	81 f0       	breq	.+32     	; 0x3702 <GPIO_readPort+0x72>
    36e2:	13 c0       	rjmp	.+38     	; 0x370a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    36e4:	e9 e3       	ldi	r30, 0x39	; 57
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	0e c0       	rjmp	.+28     	; 0x370a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    36ee:	e6 e3       	ldi	r30, 0x36	; 54
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	09 c0       	rjmp	.+18     	; 0x370a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    36f8:	e3 e3       	ldi	r30, 0x33	; 51
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	04 c0       	rjmp	.+8      	; 0x370a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3702:	e0 e3       	ldi	r30, 0x30	; 48
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    370a:	89 81       	ldd	r24, Y+1	; 0x01
}
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	00 d0       	rcall	.+0      	; 0x3720 <TWI_init+0x6>
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	9a 83       	std	Y+2, r25	; 0x02
    3726:	89 83       	std	Y+1, r24	; 0x01

	/* using zero pre-scaler TWPS=00 and F_CPU=8Mhz */


	TWSR = 0x00;
    3728:	e1 e2       	ldi	r30, 0x21	; 33
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	10 82       	st	Z, r1
	TWBR = (Config_Ptr->bit_rate) ; /*setting the given bit rate in TWBR register*/
    372e:	20 e2       	ldi	r18, 0x20	; 32
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	e9 81       	ldd	r30, Y+1	; 0x01
    3734:	fa 81       	ldd	r31, Y+2	; 0x02
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	a4 81       	ldd	r26, Z+4	; 0x04
    373c:	b5 81       	ldd	r27, Z+5	; 0x05
    373e:	f9 01       	movw	r30, r18
    3740:	80 83       	st	Z, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; /*putting address on the address register*/
    3742:	a2 e2       	ldi	r26, 0x22	; 34
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	e9 81       	ldd	r30, Y+1	; 0x01
    3748:	fa 81       	ldd	r31, Y+2	; 0x02
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3750:	e6 e5       	ldi	r30, 0x56	; 86
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	84 e0       	ldi	r24, 0x04	; 4
    3756:	80 83       	st	Z, r24


}
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <TWI_start>:

void TWI_start(void)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    376a:	e6 e5       	ldi	r30, 0x56	; 86
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	84 ea       	ldi	r24, 0xA4	; 164
    3770:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3772:	e6 e5       	ldi	r30, 0x56	; 86
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	88 23       	and	r24, r24
    377a:	dc f7       	brge	.-10     	; 0x3772 <TWI_start+0x10>
}
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <TWI_stop>:

void TWI_stop(void)
{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    378a:	e6 e5       	ldi	r30, 0x56	; 86
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	84 e9       	ldi	r24, 0x94	; 148
    3790:	80 83       	st	Z, r24
}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	0f 92       	push	r0
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    37a4:	e3 e2       	ldi	r30, 0x23	; 35
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    37ac:	e6 e5       	ldi	r30, 0x56	; 86
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	84 e8       	ldi	r24, 0x84	; 132
    37b2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    37b4:	e6 e5       	ldi	r30, 0x56	; 86
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	88 23       	and	r24, r24
    37bc:	dc f7       	brge	.-10     	; 0x37b4 <TWI_writeByte+0x1c>
}
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    37ce:	e6 e5       	ldi	r30, 0x56	; 86
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	84 ec       	ldi	r24, 0xC4	; 196
    37d4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    37d6:	e6 e5       	ldi	r30, 0x56	; 86
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	88 23       	and	r24, r24
    37de:	dc f7       	brge	.-10     	; 0x37d6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    37e0:	e3 e2       	ldi	r30, 0x23	; 35
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
}
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    37f4:	e6 e5       	ldi	r30, 0x56	; 86
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	84 e8       	ldi	r24, 0x84	; 132
    37fa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    37fc:	e6 e5       	ldi	r30, 0x56	; 86
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	88 23       	and	r24, r24
    3804:	dc f7       	brge	.-10     	; 0x37fc <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3806:	e3 e2       	ldi	r30, 0x23	; 35
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
}
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	0f 92       	push	r0
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    381c:	e1 e2       	ldi	r30, 0x21	; 33
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	88 7f       	andi	r24, 0xF8	; 248
    3824:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3826:	89 81       	ldd	r24, Y+1	; 0x01
}
    3828:	0f 90       	pop	r0
    382a:	cf 91       	pop	r28
    382c:	df 91       	pop	r29
    382e:	08 95       	ret

00003830 <__udivmodqi4>:
    3830:	99 1b       	sub	r25, r25
    3832:	79 e0       	ldi	r23, 0x09	; 9
    3834:	04 c0       	rjmp	.+8      	; 0x383e <__udivmodqi4_ep>

00003836 <__udivmodqi4_loop>:
    3836:	99 1f       	adc	r25, r25
    3838:	96 17       	cp	r25, r22
    383a:	08 f0       	brcs	.+2      	; 0x383e <__udivmodqi4_ep>
    383c:	96 1b       	sub	r25, r22

0000383e <__udivmodqi4_ep>:
    383e:	88 1f       	adc	r24, r24
    3840:	7a 95       	dec	r23
    3842:	c9 f7       	brne	.-14     	; 0x3836 <__udivmodqi4_loop>
    3844:	80 95       	com	r24
    3846:	08 95       	ret

00003848 <__udivmodsi4>:
    3848:	a1 e2       	ldi	r26, 0x21	; 33
    384a:	1a 2e       	mov	r1, r26
    384c:	aa 1b       	sub	r26, r26
    384e:	bb 1b       	sub	r27, r27
    3850:	fd 01       	movw	r30, r26
    3852:	0d c0       	rjmp	.+26     	; 0x386e <__udivmodsi4_ep>

00003854 <__udivmodsi4_loop>:
    3854:	aa 1f       	adc	r26, r26
    3856:	bb 1f       	adc	r27, r27
    3858:	ee 1f       	adc	r30, r30
    385a:	ff 1f       	adc	r31, r31
    385c:	a2 17       	cp	r26, r18
    385e:	b3 07       	cpc	r27, r19
    3860:	e4 07       	cpc	r30, r20
    3862:	f5 07       	cpc	r31, r21
    3864:	20 f0       	brcs	.+8      	; 0x386e <__udivmodsi4_ep>
    3866:	a2 1b       	sub	r26, r18
    3868:	b3 0b       	sbc	r27, r19
    386a:	e4 0b       	sbc	r30, r20
    386c:	f5 0b       	sbc	r31, r21

0000386e <__udivmodsi4_ep>:
    386e:	66 1f       	adc	r22, r22
    3870:	77 1f       	adc	r23, r23
    3872:	88 1f       	adc	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	1a 94       	dec	r1
    3878:	69 f7       	brne	.-38     	; 0x3854 <__udivmodsi4_loop>
    387a:	60 95       	com	r22
    387c:	70 95       	com	r23
    387e:	80 95       	com	r24
    3880:	90 95       	com	r25
    3882:	9b 01       	movw	r18, r22
    3884:	ac 01       	movw	r20, r24
    3886:	bd 01       	movw	r22, r26
    3888:	cf 01       	movw	r24, r30
    388a:	08 95       	ret

0000388c <__prologue_saves__>:
    388c:	2f 92       	push	r2
    388e:	3f 92       	push	r3
    3890:	4f 92       	push	r4
    3892:	5f 92       	push	r5
    3894:	6f 92       	push	r6
    3896:	7f 92       	push	r7
    3898:	8f 92       	push	r8
    389a:	9f 92       	push	r9
    389c:	af 92       	push	r10
    389e:	bf 92       	push	r11
    38a0:	cf 92       	push	r12
    38a2:	df 92       	push	r13
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	ca 1b       	sub	r28, r26
    38b6:	db 0b       	sbc	r29, r27
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	09 94       	ijmp

000038c4 <__epilogue_restores__>:
    38c4:	2a 88       	ldd	r2, Y+18	; 0x12
    38c6:	39 88       	ldd	r3, Y+17	; 0x11
    38c8:	48 88       	ldd	r4, Y+16	; 0x10
    38ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    38cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    38d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d6:	b9 84       	ldd	r11, Y+9	; 0x09
    38d8:	c8 84       	ldd	r12, Y+8	; 0x08
    38da:	df 80       	ldd	r13, Y+7	; 0x07
    38dc:	ee 80       	ldd	r14, Y+6	; 0x06
    38de:	fd 80       	ldd	r15, Y+5	; 0x05
    38e0:	0c 81       	ldd	r16, Y+4	; 0x04
    38e2:	1b 81       	ldd	r17, Y+3	; 0x03
    38e4:	aa 81       	ldd	r26, Y+2	; 0x02
    38e6:	b9 81       	ldd	r27, Y+1	; 0x01
    38e8:	ce 0f       	add	r28, r30
    38ea:	d1 1d       	adc	r29, r1
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	ed 01       	movw	r28, r26
    38f8:	08 95       	ret

000038fa <_exit>:
    38fa:	f8 94       	cli

000038fc <__stop_program>:
    38fc:	ff cf       	rjmp	.-2      	; 0x38fc <__stop_program>
